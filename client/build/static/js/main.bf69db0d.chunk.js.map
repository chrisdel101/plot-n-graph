{"version":3,"sources":["components/Box.js","components/Stop.js","components/Truck.js","components/material/MaterialSelect.js","components/material/MaterialButton.js","components/Dropdown.js","components/material/MaterialForm.js","components/material/Accordion.js","components/material/AddButton.js","components/material/Icon.js","components/material/Checkbox.js","components/material/Tabs.js","components/material/Snackbar.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allColored","legColored","completeColored","allColorsCounter","legColorsCounter","completedColorsCounter","previousLegIndex","BoxMarkup","bind","assertThisInitialized","i","_this2","toRender","map","obj","result","type","allColorsAddLogic","allColorsRemoveLogic","legColorsAddLogic","legColorsRemoveLogic","completedColorsAddLogic","completedColorsRemoveLogic","react_default","a","createElement","key","console","log","setState","stopsColor","hasStopColor","length","includes","legsColor","hasLegColor","leg","completeColor","hasCompletionColor","input","className","concat","selectedDriver","prevProps","prevState","toggleColor","error","index","Fragment","renderBoxes","React","Component","Stop","coords","coord","_styles","styles","defineProperty","directions","xDir","pixels","moveX","toString","yDir","moveY","esm","_ref","ref","style","placement","_ref2","arrowProps","data-placement","Truck","_style","driverID","id","colors","MaterialSelect","labelWidth","handleChange","name","event","target","value","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","classes","root","FormControl_default","variant","formControl","InputLabel_default","htmlFor","Select_default","native","onChange","OutlinedInput_default","legs","legID","withStyles","theme","display","flexWrap","margin","spacing","unit","minWidth","selectEmpty","marginTop","button","Button_default","size","color","data-number","buttonNumber","onClick","text","container","textField","marginLeft","marginRight","width","dense","menu","Dropdown","TextField_default","driverProgressInput","label","placeholder","ev","_this3","onSubmit","texts","driverText","colorText","material_MaterialSelect","renderInput","material_MaterialButton","MaterialForm","noValidate","autoComplete","values","x","y","Accordion","expanded","panel","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","heading","secondaryHeading","ExpansionPanelDetails_default","material_MaterialForm","components_Dropdown","fontSize","typography","pxToRem","flexBasis","flexShrink","palette","secondary","fab","backgroundColor","extendedIcon","Fab_default","aria-label","number","iconType","Add_default","src","renderIcon","justifyContent","alignItems","icon","position","right","top","iconHover","&:hover","black","Icon_default","tabIndex","green","&$checked","checked","CheckboxLabels","checkedA","FormGroup_default","row","FormControlLabel_default","control","Checkbox_default","TabContainer","component","padding","children","SimpleTabs","tabs","numberOfTabs","hovered","driverNum","indexToRemove","e","addTab","driverIndex","parseInt","innerText","substring","subtractTab","rect","getBoundingClientRect","clientX","left","clientY","material_Icon","driversArr","AppBar_default","Tabs_default","indicator","handleTabsClick","tab","Tab_default","onMouseMove","mouseEvent","handleRemoveButtonClick","material_AddButton","handleAddButtonClick","material_Checkbox","material_Accordion","flexGrow","background","paper","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","dark","primary","amber","iconVariant","opacity","message","onClose","other","objectWithoutProperties","Icon","SnackbarContent_default","assign","classNames","aria-describedby","action","IconButton_default","close","Close_default","CustomizedSnackbars","open","handleClick","handleClose","reason","Snackbar_default","anchorOrigin","vertical","horizontal","snackbarOpen","autoHideDuration","data-item","Grid","utilsTop","floatToggle","colorType","loadingDataArr","selectedDriverIndex","createCounter","stops","legToColorID","driverFormX","driverFormY","driverLegInput","currentDriver","driverLegStart","driverCoords","positionSelect","startingCellNumAll","startingCellNumPartial","previousLegEndCell","previousStopX","previousStopY","previousLegX","previousLegY","partialLegStartCoords","partialLegEndCoords","boxesToRender","Array","from","v","holdAllStopColorIndexes","holdAllLegColorArrs","holdingCompletedArrs","finalStopColorArr","finalLegColorObj","finalCompletedColorsArr","finalDriverMoveObj","legStartEndCellNums","totalX","totalY","tempX","Math","abs","tempY","firstCoordsObj","secondCoordsObj","xDiff","yDiff","diffObj","percent","xNum","floor","yNum","firstLegStopObj","lastLegStopObj","numToMoveObj","xToMove","yToMove","x1","x2","y1","y2","newDriverObj","arr","push","allDrivers","increaseDriverIdindex","changeDriver","driverName","driver","filter","toLowerCase","indexOf","splice","driverData","legName","activeLegID","firstLetter","secondLetter","firstStopOfLeg","stop","lastStopOfLeg","_absDiff","progress","legProgress","numToMove","_percentToCoords","_this$_getDriverCoord","_getDriverCoords","moves","driverProgressinPixels","_convertToPixels","data","_resetTruck","_setStopCoords","toConsumableArray","that","setTimeout","holdingArrIndex","_legIndex","dataIndex","thisLeg","legFirstStop","startStop","legLastStop","endStop","stopStartCoords","stopEndCoords","_this$state$legStartE","start","previousLegArrs","end","slice","legStartEnd","tempCellNum","loopAxis","tempCellNumsArr","_numToMove","tempStartNum","_this$_numToMove","legCellNums","merged","apply","firstStop","stop1","stop2","undefined","yAbsDiff","xAbsDiff","xPercent","yPercent","_getLegStartfromCoords","firstStopIndex","secondStop","diff","_findPercentFromDriverCoords","newPositionWpercent","components_Truck","counter","bottom","handleStyle","renderTrucks","components_Stop","stopsDirsArr","components_Box","material_Tabs","handleFormSubmit","material_Snackbar","element","checkClass","split","parentNode","hasParentClass","removeDriver","classList","contains","stopPropagation","addNewDriver","dataset","colorAllStops","colorCompletedStops","preventDefault","updatedData","updateDriverwithData","colorCompleted","colorLeg","evt","scrollToBottom","onDropdownSubmit","formData","updateDriverWithCoords","updateDriverData","toggleSnackbar","legObj","coordsArr","forEach","window","scrollTo","document","body","scrollHeight","utils","querySelector","offsetHeight","colorGrid","App","components_Grid","Boolean","location","hostname","match","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6sCAmMeA,cA/Lb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAY,EACZC,YAAY,EACZC,iBAAiB,EACjBC,iBAAkB,EAClBC,iBAAkB,EAClBC,uBAAwB,EACxBC,iBAAkB,IAEpBd,EAAKe,UAAYf,EAAKe,UAAUC,KAAff,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KAXAA,2EAaPkB,GAAG,IAAAC,EAAAhB,KACb,GAAIA,KAAKJ,MAAMqB,SAEb,OADmBjB,KAAKJ,MAAlBqB,SACUC,IAAI,SAACC,EAAKJ,GACxB,IAAIK,EACJ,OAAQJ,EAAKpB,MAAMyB,MACjB,IAAK,MACEL,EAAKZ,MAAMC,WAELW,EAAKZ,MAAMC,aACpBe,EAASJ,EAAKM,kBAAkBP,IAFhCK,EAASJ,EAAKO,qBAAqBR,GAIrC,MACF,IAAK,MACEC,EAAKZ,MAAME,WAELU,EAAKZ,MAAME,aACpBc,EAASJ,EAAKQ,kBAAkBT,IAFhCK,EAASJ,EAAKS,qBAAqBV,GAIrC,MACF,IAAK,WACEC,EAAKZ,MAAMG,gBAELS,EAAKZ,MAAMG,kBACpBa,EAASJ,EAAKU,wBAAwBX,IAFtCK,EAASJ,EAAKW,2BAA2BZ,GAI3C,MACF,QAEEK,EAASQ,EAAAC,EAAAC,cAACd,EAAKJ,UAAN,CAAgBmB,IAAKhB,IAGlC,OAAOK,wCAIDC,GACG,QAATA,GACFrB,KAAKI,MAAMC,YAAcL,KAAKI,MAAMC,WACpC2B,QAAQC,IAAI,WAAYjC,KAAKI,MAAMC,YACnCL,KAAKkC,SAAS,CACZ7B,WAAYL,KAAKI,MAAMC,cAEP,QAATgB,GACTrB,KAAKI,MAAME,YAAcN,KAAKI,MAAME,WACpC0B,QAAQC,IAAI,WAAYjC,KAAKI,MAAME,YACnCN,KAAKkC,SAAS,CACZ5B,WAAYN,KAAKI,MAAME,cAEP,aAATe,IACTrB,KAAKI,MAAMG,iBAAmBP,KAAKI,MAAMG,gBACzCyB,QAAQC,IAAI,WAAYjC,KAAKI,MAAMG,iBACnCP,KAAKkC,SAAS,CACZ3B,gBAAiBP,KAAKI,MAAMG,6DAIhBQ,GAAG,IACboB,EAAenC,KAAKJ,MAApBuC,WACFC,KACGD,GAAeA,EAAWE,QAAWF,EAAWG,SAASvB,IAIhE,OAAOa,EAAAC,EAAAC,cAAA9B,KAAMY,UAAN,CAAgBwB,aAAcA,EAAcL,IAAKhB,iDAErCA,GAAG,IAChBoB,EAAenC,KAAKJ,MAApBuC,WACFC,EAAgB,WAClB,GAAID,GAAcA,EAAWG,SAASvB,GAAI,OAAO,EAD/B,GAGpB,OAAOa,EAAAC,EAAAC,cAAA9B,KAAMY,UAAN,CAAgBwB,aAAcA,EAAcL,IAAKhB,8CAExCA,GAAG,IACbwB,EAAcvC,KAAKJ,MAAnB2C,UAEFC,MADJD,EAAYA,EAAUE,MAEDF,EAAUF,QAAWE,EAAUD,SAASvB,IAI7D,OAAOa,EAAAC,EAAAC,cAAA9B,KAAMY,UAAN,CAAgB4B,YAAaA,EAAaT,IAAKhB,iDAEnCA,GAAG,IAChBwB,EAAcvC,KAAKJ,MAAnB2C,UACNA,EAAYA,EAAUE,IACtB,IAAID,EAAe,WACjB,GAAID,GAAaA,EAAUD,SAASvB,GAAI,OAAO,EAD9B,GAGnB,OAAOa,EAAAC,EAAAC,cAAA9B,KAAMY,UAAN,CAAgB4B,YAAaA,EAAaT,IAAKhB,oDAEhCA,GAAG,IACnB2B,EAAkB1C,KAAKJ,MAAvB8C,cACFC,KACGD,GAAkBA,EAAcL,QAAWK,EAAcJ,SAASvB,IAIzE,OAAOa,EAAAC,EAAAC,cAAA9B,KAAMY,UAAN,CAAgB+B,mBAAoBA,EAAoBZ,IAAKhB,uDAE3CA,GAAG,IACtB2B,EAAkB1C,KAAKJ,MAAvB8C,cACFC,EAAsB,WACxB,GAAID,GAAiBA,EAAcJ,SAASvB,GAAI,OAAO,EAD/B,GAG1B,OAAOa,EAAAC,EAAAC,cAAA9B,KAAMY,UAAN,CAAgB+B,mBAAoBA,EAAoBZ,IAAKhB,sCAG5D6B,GACR,OACEhB,EAAAC,EAAAC,cAAA,OACEe,UAAS,OAAAC,OAASF,EAAMR,aAAN,aAAAU,OAAkC9C,KAAKJ,MAAMmD,gBAAmB,GAAzE,KAAAD,OACPF,EAAMJ,YAAN,YAAAM,OAAgC9C,KAAKJ,MAAMmD,gBAAmB,GADvD,KAAAD,OAELF,EAAMD,mBAAN,iBAAAG,OAA4C9C,KAAKJ,MAAMmD,gBAAmB,iDAIjEC,EAAWC,GAExBjD,KAAKJ,MAAMY,mBAAqBwC,EAAUxC,mBAExCR,KAAKI,MAAMI,mBAAqBR,KAAKJ,MAAMY,kBAC7CwB,QAAQC,IAAI,UACZjC,KAAKkD,YAAY,OACjBlD,KAAKkC,SAAS,CAEZ1B,iBAAkBR,KAAKJ,MAAMY,oBAG/BwB,QAAQmB,MAAM,qCAIdnD,KAAKJ,MAAMa,mBAAqBuC,EAAUvC,mBAExCT,KAAKJ,MAAM2C,UAAUa,QAAUpD,KAAKI,MAAMO,kBAC5CqB,QAAQC,IAAI,cAEZjC,KAAKkC,SAAS,CACZvB,iBAAkBX,KAAKJ,MAAM2C,UAAUa,MACvC9C,YAAY,KAGLN,KAAKJ,MAAM2C,UAAUa,QAAUpD,KAAKI,MAAMO,kBACnDqB,QAAQC,IAAI,cACZjC,KAAKkD,YAAY,QAEjBlB,QAAQmB,MAAM,oCAIhBnD,KAAKJ,MAAMc,yBAA2BsC,EAAUtC,yBAEhDsB,QAAQC,IAAIjC,KAAKJ,OAEfI,KAAKI,MAAMM,yBAA2BV,KAAKJ,MAAMc,wBAEjDsB,QAAQC,IAAI,UAEZjC,KAAKkD,YAAY,YACjBlD,KAAKkC,SAAS,CACZxB,uBAAwBV,KAAKJ,MAAMc,0BAGrCsB,QAAQmB,MAAM,0EAMlB,OAAInD,KAAKJ,MAAMqB,UAAYjB,KAAKJ,MAAMqB,SAASoB,OACtCT,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,SAAP,KAAiBrD,KAAKsD,eAEtB1B,EAAAC,EAAAC,cAAA,mCA3LKyB,IAAMC,2BCgCTC,MA9Bf,SAAc7D,GACV,OAAIA,EAAM8D,OAEM9D,EAAM8D,OACLxC,IAAI,SAACyC,EAAO5C,GAAM,IAAA6C,EAC3BC,GAAMD,EAAA,GAAA9D,OAAAgE,EAAA,EAAAhE,CAAA8D,EACLD,EAAMI,WAAWC,KAAOL,EAAMM,OAAOC,MAAMC,WAAa,MADnDrE,OAAAgE,EAAA,EAAAhE,CAAA8D,EAELD,EAAMI,WAAWK,KAAOT,EAAMM,OAAOI,MAAMF,WAAa,MAFnDP,GAKV,OACIhC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAASvC,IAAKhB,GACda,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACC,SAAAC,GAAA,OAAAA,EAAGC,IACA5C,EAAAC,EAAAC,cAAA,OAAKe,UAAU,cAAc4B,MAAOZ,MAGxCjC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAQI,UAAU,SACjB,SAAAC,GAAA,IAAGH,EAAHG,EAAGH,IAAKC,EAARE,EAAQF,MAAOC,EAAfC,EAAeD,UAAWE,EAA1BD,EAA0BC,WAA1B,OACGhD,EAAAC,EAAAC,cAAA,OAAK0C,IAAKA,EAAKC,MAAOA,EAAOI,iBAAgBH,GAA7C,iBAEA9C,EAAAC,EAAAC,cAAA,OAAK0C,IAAKI,EAAWJ,IAAKC,MAAOG,EAAWH,cApB/B,MCadK,MAhBf,SAAelF,GAAM,IAAAmF,EACjB,IAAInF,EAAM8D,OAAQ,OAAO,KACzB,IAAIC,EAAQ/D,EAAM8D,OAEdsB,EAAWpF,EAAM8D,OAAOuB,GAExBR,GAAKM,EAAA,GAAAjF,OAAAgE,EAAA,EAAAhE,CAAAiF,EACJpB,EAAMI,WAAWC,KAAOL,EAAMM,OAAOC,MAAMC,WAAa,MADpDrE,OAAAgE,EAAA,EAAAhE,CAAAiF,EAEJpB,EAAMI,WAAWK,KAAOT,EAAMM,OAAOI,MAAMF,WAAa,MAFpDrE,OAAAgE,EAAA,EAAAhE,CAAAiF,EAGL,iBAAkBnF,EAAMsF,OAAOF,IAH1BD,GAKT,OACInD,EAAAC,EAAAC,cAAA,OAAKe,UAAU,QAAQ4B,MAAOA,4NCQhCU,6MACJ/E,MAAQ,CACNqC,IAAK,GACL2C,WAAY,KASdC,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB1F,EAAKqC,SAALpC,OAAAgE,EAAA,EAAAhE,CAAA,GAAiBwF,EAAOC,EAAMC,OAAOC,6FANrCzF,KAAKkC,SAAS,CACZkD,WAAYM,IAASC,YAAY3F,KAAK4F,eAAeC,+CAQhD,IAAA7E,EAAAhB,KACC8F,EAAY9F,KAAKJ,MAAjBkG,QAER,OACElE,EAAAC,EAAAC,cAAA,OAAKe,UAAWiD,EAAQC,MAEtBnE,EAAAC,EAAAC,cAACkE,EAAAnE,EAAD,CAAaoE,QAAQ,WAAWpD,UAAWiD,EAAQI,aACjDtE,EAAAC,EAAAC,cAACqE,EAAAtE,EAAD,CACE2C,IAAK,SAAAA,GACHxD,EAAK4E,cAAgBpB,GAEvB4B,QAAQ,8BAJV,QAQAxE,EAAAC,EAAAC,cAACuE,EAAAxE,EAAD,CACEyE,QAAM,EACNb,MAAOzF,KAAKJ,MAAM6F,MAClBc,SAAUvG,KAAKJ,MAAM2G,SACrB3D,MACEhB,EAAAC,EAAAC,cAAC0E,EAAA3E,EAAD,CACEyD,KAA0B,WAApBtF,KAAKJ,MAAMyB,KAAoB,gBAAiB,eACtD+D,WAAYpF,KAAKI,MAAMgF,WACvBH,GAAG,gCAITrD,EAAAC,EAAAC,cAAA,UAAQ2D,MAAM,KAEVzF,KAAKJ,MAAM6G,KAAKvF,IAAI,SAACuB,EAAK1B,GACxB,OAAOa,EAAAC,EAAAC,cAAA,UAAQC,IAAKhB,EAAG0E,MAAOzE,EAAKZ,MAAMqF,OAAQhD,EAAIiE,mBA9CxCnD,IAAMC,WA8DpBmD,uBA5EA,SAAAC,GAAK,MAAK,CACvBb,KAAM,CACJc,QAAS,OACTC,SAAU,QAEZZ,YAAa,CACXa,OAAQH,EAAMI,QAAQC,KACtBC,SAAU,KAEZC,YAAa,CACXC,UAAgC,EAArBR,EAAMI,QAAQC,QAkEdN,CAAmBxB,qBC1DnBwB,2BAtBA,SAAAC,GAAK,MAAK,CACvBS,OAAQ,CACNN,OAAQH,EAAMI,QAAQC,MAExBrE,MAAO,CACLiE,QAAS,UAiBEF,CAbf,SAAwB/G,GAAO,IACrBkG,EAAYlG,EAAZkG,QACR,OACIlE,EAAAC,EAAAC,cAACwF,EAAAzF,EAAD,CAAQoE,QAAQ,YAAY5E,KAAMzB,EAAMyB,KAAMkG,KAAM3H,EAAM2H,KAAMC,MAAO5H,EAAM4H,MAAO3E,UAAS,GAAAC,OAAKlD,EAAMyB,KAAX,YAAAyB,OAA0BgD,EAAQuB,QAAUI,cAAa7H,EAAM8H,aAAcC,QAAS/H,EAAM+H,SACtL/H,EAAMgI,yBCZT/D,EAAS,SAAA+C,GAAK,MAAK,CACrBiB,UAAW,CACPhB,QAAS,OACTC,SAAU,QAEdgB,UAAW,CACPC,WAAYnB,EAAMI,QAAQC,KAC1Be,YAAapB,EAAMI,QAAQC,KAC3BgB,MAAO,KAEXC,MAAO,CACHd,UAAW,IAEfe,KAAM,CACFF,MAAO,OAkEAG,cA7DX,SAAAA,EAAYxI,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoI,IACrBvI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsI,GAAAjI,KAAAH,KAAMJ,KACKQ,MAAQ,GAFEP,6EAMN,IAAAmB,EAAAhB,KACT,OACI4B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,qCAEXjB,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CACI4D,MAAOzF,KAAKJ,MAAM0I,oBAClBrD,GAAG,gBACHsD,MAAM,WACNC,YAAY,qBACZ3F,UAAS,GAAAC,OAAKe,EAAOiE,UAAZ,mBACTxC,KAAK,iBACLiB,SAAU,SAAAkC,GAAE,OAAKzH,EAAKpB,MAAM2G,SAASkC,IACrC1B,OAAO,6CAMf,IAAA2B,EAAA1I,KAEJ,OAAGA,KAAKJ,MAAM6G,KAGN7E,EAAAC,EAAAC,cAAA,OAAKe,UAAU,kBAEfjB,EAAAC,EAAAC,cAAA,QAAMwD,KAA0B,WAApBtF,KAAKJ,MAAMyB,KAAoB,kBAAmB,QAASsH,SAAU,SAACF,GAAD,OAAQC,EAAK9I,MAAM+I,SAASF,KACzG7G,EAAAC,EAAAC,cAAA,SAAOe,UAAU,cACI,WAApB7C,KAAKJ,MAAMyB,KAAoBrB,KAAKJ,MAAMgJ,MAAMC,WAAY7I,KAAKJ,MAAMgJ,MAAME,UAC9ElH,EAAAC,EAAAC,cAACiH,EAAD,CAAgBtC,KAAMzG,KAAKJ,MAAM6G,KAAMhB,MAAOzF,KAAKI,MAAMqF,MAAOc,SAAUvG,KAAKJ,MAAM2G,SAAUlF,KAA0B,WAApBrB,KAAKJ,MAAMyB,KAAoB,SAAW,SAE3IO,EAAAC,EAAAC,cAAA,eAEA9B,KAAKJ,MAAM6G,KAAKvF,IAAI,SAACuB,EAAK1B,GACtB,OAAOa,EAAAC,EAAAC,cAAA,UAAQC,IAAKhB,EAAG0E,MAAOiD,EAAKtI,MAAMqF,OAAQhD,EAAIiE,WAKxC,WAApB1G,KAAKJ,MAAMyB,KACZrB,KAAKgJ,cAAgB,KAErBpH,EAAAC,EAAAC,cAACmH,EAAD,CAAgB5H,KAAK,SAASoE,MAAM,SAAS8B,KAAK,QAAQC,MAAM,UAAUI,KAAK,iBAOhF,YAvDIrE,IAAMC,WCAvB0F,6MACJ9I,MAAQ,KAIRiF,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB1F,EAAKqC,SAALpC,OAAAgE,EAAA,EAAAhE,CAAA,GACGwF,EAAOC,EAAMC,OAAOC,kFAGhB,IAAAzE,EAAAhB,KAEC8F,EAAY9F,KAAKJ,MAAjBkG,QAQR,OACElE,EAAAC,EAAAC,cAAA,QAAMe,UAAS,GAAAC,OAAKgD,EAAQ+B,UAAb,kBAAwCsB,YAAU,EAACC,aAAa,MAAM9D,KAAK,cAAcqD,SAAU,SAACF,GAAD,OAAQzH,EAAKpB,MAAM+I,SAASF,KAC3IzI,KAAKJ,MAAMyJ,OACRzH,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,SAAP,KACIzB,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CACIoD,GAAG,gBACHsD,MAAM,WACNC,YAAY,QACZ3F,UAAWiD,EAAQgC,UACnBrC,MAAOzF,KAAKJ,MAAMyJ,OAAOC,EACzB/C,SAAUvG,KAAKJ,MAAM2G,SACrBQ,OAAO,SACPzB,KAAK,MAET1D,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CACIoD,GAAG,gBACHsD,MAAM,WACNC,YAAY,QACZ3F,UAAWiD,EAAQgC,UACnBrC,MAAOzF,KAAKJ,MAAMyJ,OAAOE,EACzBhD,SAAUvG,KAAKJ,MAAM2G,SACrBQ,OAAO,SACPzB,KAAK,OAIb1D,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,SAAP,KACIzB,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CACAoD,GAAG,gBACHsD,MAAM,WACNC,YAAY,QACZ3F,UAAWiD,EAAQgC,UACnBvB,SAAUvG,KAAKJ,MAAM2G,SACrBQ,OAAO,SACPzB,KAAK,MAEL1D,EAAAC,EAAAC,cAACuG,EAAAxG,EAAD,CACAoD,GAAG,gBACHsD,MAAM,WACNC,YAAY,QACZ3F,UAAWiD,EAAQgC,UACnBvB,SAAUvG,KAAKJ,MAAM2G,SACrBQ,OAAO,SACPzB,KAAK,OAIR1D,EAAAC,EAAAC,cAACmH,EAAD,CAAgB1B,KAAK,QAAQC,MAAM,UAAUnG,KAAK,iBAAiBuG,KAAK,SAASF,aAAc,YAnEjFnE,IAAMC,WA6ElBmD,wBA/FA,SAAAC,GAAK,MAAK,CACvBiB,UAAW,CACThB,QAAS,OACTC,SAAU,QAEZgB,UAAW,CACTC,WAAYnB,EAAMI,QAAQC,KAC1Be,YAAapB,EAAMI,QAAQC,KAC3BgB,MAAO,KAETC,MAAO,CACLd,UAAW,IAEbe,KAAM,CACJF,MAAO,OAiFItB,CAAmBuC,GCrE5BM,8MACJpJ,MAAQ,CACNqJ,SAAU,QAGZpE,aAAe,SAAAqE,GAAK,OAAI,SAACnE,EAAOkE,GAC9B5J,EAAKqC,SAAS,CACZuH,WAAUA,GAAWC,8EAIhB,IACC5D,EAAY9F,KAAKJ,MAAjBkG,QACA2D,EAAazJ,KAAKI,MAAlBqJ,SAER,OACE7H,EAAAC,EAAAC,cAAA,OAAKe,UAAWiD,EAAQC,MACtBnE,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CAAgBgB,UAAU,YAAY4G,SAAuB,WAAbA,EAAuBlD,SAAUvG,KAAKqF,aAAa,WACjGzD,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAuBgI,WAAYjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,OACjCD,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAYgB,UAAWiD,EAAQkE,SAA/B,0BACApI,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAYgB,UAAWiD,EAAQmE,kBAA/B,yCAGFrI,EAAAC,EAAAC,cAACoI,EAAArI,EAAD,KACAD,EAAAC,EAAAC,cAACqI,GAAD,CACI5D,SAAUvG,KAAKJ,MAAM2G,SACrBoC,SAAU3I,KAAKJ,MAAM+I,SACrBU,OAAQrJ,KAAKJ,MAAMyJ,SAErBzH,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,QAKJD,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CAAgBgB,UAAU,YAAY4G,SAAuB,WAAbA,EAAuBlD,SAAUvG,KAAKqF,aAAa,WACjGzD,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAuBgI,WAAYjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,OACjCD,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAYgB,UAAWiD,EAAQkE,SAA/B,kBACApI,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAYgB,UAAWiD,EAAQmE,kBAA/B,+CAIFrI,EAAAC,EAAAC,cAACoI,EAAArI,EAAD,CAAuBgB,UAAU,gBACjCjB,EAAAC,EAAAC,cAACsI,EAAD,CACM7D,SAAUvG,KAAKJ,MAAM2G,SACrBoC,SAAU3I,KAAKJ,MAAM+I,SACrBlC,KAAMzG,KAAKJ,MAAM6G,KAAOzG,KAAKJ,MAAM6G,KAAO,KAC1CpF,KAAK,SACLuH,MAAO5I,KAAKJ,MAAMgJ,QAEtBhH,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,QAKJD,EAAAC,EAAAC,cAAC6H,EAAA9H,EAAD,CAAgBgB,UAAU,YAAY4G,SAAuB,WAAbA,EAAuBlD,SAAUvG,KAAKqF,aAAa,WACjGzD,EAAAC,EAAAC,cAAC8H,EAAA/H,EAAD,CAAuBgI,WAAYjI,EAAAC,EAAAC,cAACgI,EAAAjI,EAAD,OACjCD,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAYgB,UAAWiD,EAAQkE,SAA/B,mBACApI,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAYgB,UAAWiD,EAAQmE,kBAA/B,wCAEFrI,EAAAC,EAAAC,cAACoI,EAAArI,EAAD,CAAuBgB,UAAU,eACjCjB,EAAAC,EAAAC,cAACsI,EAAD,CACM7D,SAAUvG,KAAKJ,MAAM2G,SACrBoC,SAAU3I,KAAKJ,MAAM+I,SACrBlC,KAAMzG,KAAKJ,MAAM6G,KAAOzG,KAAKJ,MAAM6G,KAAO,KAC1CpF,KAAK,QACLuH,MAAO5I,KAAKJ,MAAMgJ,QAExBhH,EAAAC,EAAAC,cAACmH,EAAD,CAAgB1B,KAAK,QAAQC,MAAM,UAAUnG,KAAK,mBAAmBuG,KAAK,UAAUF,aAAc,EAAGC,QAAS3H,KAAKJ,MAAM+H,UAEvH/F,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,gBArEY0B,IAAMC,WAoFfmD,wBAnGA,SAAAC,GAAK,MAAK,CACvBb,KAAM,CACJkC,MAAO,QAET+B,QAAS,CACPK,SAAUzD,EAAM0D,WAAWC,QAAQ,IACnCC,UAAW,SACXC,WAAY,GAEdR,iBAAkB,CAChBI,SAAUzD,EAAM0D,WAAWC,QAAQ,IACnC/C,MAAOZ,EAAM8D,QAAQ9C,KAAK+C,aAwFfhE,CAAmB6C,8CC3EnB7C,4BAnCA,SAAAC,GAAK,MAAK,CACvBgE,IAAK,CACH7D,OAAQH,EAAMI,QAAQC,KACtB4D,gBAAiB,WAEnBC,aAAc,CACZ9C,YAAapB,EAAMI,QAAQC,QA6BhBN,CAhBf,SAAmB/G,GAAO,IAChBkG,EAAYlG,EAAZkG,QACR,OACElE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiJ,GAAAlJ,EAAD,CAAK0F,KAAK,QAAQC,MAAM,UAAUwD,aAAW,MAAMnI,UAAS,qBAAAC,OAAuBgD,EAAQ8E,KAAOjD,QAAS,SAACc,GAAD,OAAQ7I,EAAM+H,QAAQc,IAAKhB,cAAa7H,EAAMqL,QAd/J,SAAoBrL,GAChB,MAAsB,QAAnBA,EAAMsL,SACEtJ,EAAAC,EAAAC,cAACqJ,GAAAtJ,EAAD,MACkB,UAAnBjC,EAAMsL,SACLtJ,EAAAC,EAAAC,cAAA,OAAKe,UAAU,YAAYuI,IAAI,4BAE/B,KASNC,CAAWzL,iDCeL+G,4BAvCA,SAAAC,GAAK,MAAK,CACvBb,KAAM,CACJc,QAAS,OACTyE,eAAgB,SAChBC,WAAY,YAEdC,KAAM,CACJzE,OAA6B,EAArBH,EAAMI,QAAQC,KACtBO,MAAO,YACP6C,SAAU,OACVoB,SAAU,WACVC,MAAO,OACPC,IAAK,KAGPC,UAAW,CACT7E,OAA6B,EAArBH,EAAMI,QAAQC,KACtB4E,UAAW,CACTrE,MAAOsE,SAqBEnF,CAhBf,SAAe/G,GAAO,IACZkG,EAAYlG,EAAZkG,QAER,OACElE,EAAAC,EAAAC,cAAA,OAAKe,UAAWiD,EAAQC,MACpBnE,EAAAC,EAAAC,cAACiK,GAAAlK,EAAD,CAAMgB,UAAS,GAAAC,OAAKgD,EAAQ0F,KAAb,eAAgChE,MAAM,UAAUwE,SAAS,MAAxE,+FCtBFnI,GAAS,CACbkC,KAAM,CACJyB,MAAOyE,KAAM,KACbC,YAAa,CACX1E,MAAOyE,KAAM,OAGjBE,QAAS,IAGLC,8MACJhM,MAAQ,CACNiM,UAAU,KAGZhH,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB1F,EAAKD,MAAM2G,SAAShB,GACpB1F,EAAKqC,SAALpC,OAAAgE,EAAA,EAAAhE,CAAA,GAAiBwF,EAAOC,EAAMC,OAAO2G,oFAIjBnM,KAAKJ,MAAjBkG,QAER,OACElE,EAAAC,EAAAC,cAACwK,GAAAzK,EAAD,CAAW0K,KAAG,EAAE1J,UAAU,sBACxBjB,EAAAC,EAAAC,cAAC0K,GAAA3K,EAAD,CACE4K,QACE7K,EAAAC,EAAAC,cAAC4K,GAAA7K,EAAD,CACEsK,QAASnM,KAAKI,MAAMiM,SACpB9F,SAAUvG,KAAKqF,aAAa,YAC5BI,MAAM,WACNH,KAAK,iBAGTiD,MAAM,8BAxBahF,IAAMC,WAoCpBmD,wBAAW9C,GAAX8C,CAAmByF,IC5ClC,SAASO,GAAa/M,GACpB,OACEgC,EAAAC,EAAAC,cAACiI,EAAAlI,EAAD,CAAY+K,UAAU,MAAMnI,MAAO,CAAEoI,QAAS,KAC3CjN,EAAMkN,UASb,IAYMC,eACF,SAAAA,EAAYnN,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+M,IACdlN,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiN,GAAA5M,KAAAH,KAAMJ,KASZyF,aAAe,SAACE,EAAOE,GACM,iBAAtBF,EAAMC,OAAOF,KAIlBzF,EAAKqC,SAAS,CAAEuD,UAHV5F,EAAKD,MAAM2G,SAAShB,IAVtB1F,EAAKO,MAAQ,CACTqF,MAAO,EACPuH,KAAM,CAAC,CAAEzE,MAAO,aAChB0E,aAAc,EACdC,SAAS,GANCrN,wEAkBhB,IAAIsN,EAAYnN,KAAKI,MAAM6M,aAAe,EAG1CjN,KAAKkC,SAAS,CACV+K,aAAcE,wCAIVC,GAER,GAAGpN,KAAKI,MAAM6M,aAAe,EACzBjL,QAAQC,IAAI,qCADhB,CAKA,IAAIgL,EAAejN,KAAKI,MAAM6M,aAAe,EAE7CjN,KAAKkC,SAAS,CACV+K,aAAcA,kDAKDI,GAKjBrL,QAAQC,IAAIoL,GACZrN,KAAKJ,MAAM+H,QAAQ0F,GACnBrN,KAAKsN,yDAEeD,GAEpB,GAAIrN,KAAKI,MAAM8M,QAAf,CAGA,IAAIK,EAAcC,SAASH,EAAE7H,OAAOiI,UAAUC,UAAU,GAAG,KAAO,EAClE1N,KAAKJ,MAAM+H,QAAX,GAAA7E,OAAsBuK,EAAE7H,OAAOiI,UAA/B,gBACAzN,KAAK2N,YAAYJ,uCAGTF,GAEN,IAAIO,EAAOP,EAAE7H,OAAOqI,wBAChBvE,EAAI+D,EAAES,QAAUF,EAAKG,KACjBV,EAAEW,QAAUJ,EAAKjC,KAEjB,IAAMrC,GAAK,GACftJ,KAAKkC,SAAS,CAACgL,SAAS,IAExBlN,KAAKkC,SAAS,CAACgL,SAAS,4CAGhBG,GACTrN,KAAKI,MAAM8M,SAGdlN,KAAKJ,MAAM+H,QAAQ0F,EAAE7H,OAAOiI,gDAI5B,OAAO7L,EAAAC,EAAAC,cAAA,OAAKkK,SAAS,KAAKnJ,UAAU,gBAClCjB,EAAAC,EAAAC,cAACmM,GAAD,wCAGC,IAAAjN,EAAAhB,KAEC8F,EAAY9F,KAAKJ,MAAjBkG,QACAL,EAAUzF,KAAKI,MAAfqF,MACR,OAAGzF,KAAKJ,MAAMsO,WAENtM,EAAAC,EAAAC,cAAA,OAAKe,UAAWiD,EAAQC,MACxBnE,EAAAC,EAAAC,cAACqM,EAAAtM,EAAD,CAAQ4J,SAAS,UACb7J,EAAAC,EAAAC,cAACsM,EAAAvM,EAAD,CACIiE,QAAS,CACLuI,UAAWvI,EAAQuI,WAEvBxL,UAAU,eACVyC,KAAK,OACLG,MAAOzF,KAAKJ,MAAMmD,eAClBwD,SAAUvG,KAAKqF,aACfsC,QAAS3H,KAAKsO,gBAAgBzN,KAAKb,OACtCA,KAAKJ,MAAMsO,WAAWhN,IAAI,SAACqN,EAAKxN,GAE7B,OAAOa,EAAAC,EAAAC,cAAC0M,EAAA3M,EAAD,CACK2J,KAAMxK,EAAKqK,aAAcoD,YAAazN,EAAK0N,WAAW7N,KAAKG,GAC3DuH,MAAOgG,EAAIjJ,KACXvD,IAAKhB,EACL4G,QAAS3G,EAAK2N,wBAAwB9N,KAAKG,OAG3DY,EAAAC,EAAAC,cAAC8M,GAAD,CACIjH,QAAS3H,KAAK6O,qBAAqBhO,KAAKb,MACxCkL,SAAS,QACTtJ,EAAAC,EAAAC,cAACgN,GAAD,MACJlN,EAAAC,EAAAC,cAACmH,EAAD,CACI1B,KAAK,QACLC,MAAM,YACNI,KAAK,eACLvG,KAAK,mBACLsG,QAAS3H,KAAKJ,MAAM+H,QACxBD,aAAc,MAMd1H,KAAKJ,MAAMsO,WAAWhN,IAAI,SAACqN,EAAKxN,GAC5B,OAAO0E,IAAU1E,GACba,EAAAC,EAAAC,cAAC6K,GAAD,CAAc5K,IAAKhB,GACnBa,EAAAC,EAAAC,cAACiN,GAAD,CACApH,QAAS3G,EAAKpB,MAAM+H,QACpBgB,SAAU3H,EAAKpB,MAAM+I,SACrBpC,SAAUvF,EAAKpB,MAAM2G,SACrB8C,OAAQrI,EAAKpB,MAAMyJ,OACnB5C,KAAMzF,EAAKpB,MAAM6G,KAAOzF,EAAKpB,MAAM6G,KAAO,KAC1CmC,MAAO5H,EAAKpB,MAAMgJ,YAa3B,YArJUrF,IAAMC,WA+JhBmD,wBA3KA,SAACC,EAAOY,GAAR,MAAmB,CAChCzB,KAAM,CACJiJ,SAAU,EACVnE,gBAAiBjE,EAAM8D,QAAQuE,WAAWC,OAE1Cb,UAAW,CACPxD,gBAAiBrD,KAqKVb,CAAmBoG,2NCtL5BoC,GAAc,CAClBC,QAASC,KACTC,QAASC,KACTpM,MAAOqM,KACPC,KAAMC,MAmER,IAAMC,GAA2BhJ,qBAhEjB,SAAAC,GAAK,MAAK,CACxBwI,QAAS,CACPvE,gBAAiBoB,KAAM,MAEzB9I,MAAO,CACL0H,gBAAiBjE,EAAM8D,QAAQvH,MAAMyM,MAEvCH,KAAM,CACJ5E,gBAAiBjE,EAAM8D,QAAQmF,QAAQD,MAEzCN,QAAS,CACPzE,gBAAiBiF,KAAM,MAEzBtE,KAAM,CACJnB,SAAU,IAEZ0F,YAAa,CACXC,QAAS,GACThI,YAAapB,EAAMI,QAAQC,MAE7BgJ,QAAS,CACPpJ,QAAS,OACT0E,WAAY,YA0CiB5E,CAtCjC,SAA2B/G,GAAO,IACxBkG,EAA4DlG,EAA5DkG,QAASjD,EAAmDjD,EAAnDiD,UAAWoN,EAAwCrQ,EAAxCqQ,QAASC,EAA+BtQ,EAA/BsQ,QAASjK,EAAsBrG,EAAtBqG,QAAYkK,EAD1BrQ,OAAAsQ,GAAA,EAAAtQ,CACoCF,EADpC,uDAE1ByQ,EAAOlB,GAAYlJ,GAEzB,OACErE,EAAAC,EAAAC,cAACwO,GAAAzO,EAAD/B,OAAAyQ,OAAA,CACE1N,UAAW2N,KAAW1K,EAAQG,GAAUpD,GACxC4N,mBAAiB,kBACjBR,QACErO,EAAAC,EAAAC,cAAA,QAAMmD,GAAG,kBAAkBpC,UAAWiD,EAAQmK,SAC5CrO,EAAAC,EAAAC,cAACuO,EAAD,CAAMxN,UAAW2N,KAAW1K,EAAQ0F,KAAM1F,EAAQiK,eACjDE,GAGLS,OAAQ,CACN9O,EAAAC,EAAAC,cAAC6O,GAAA9O,EAAD,CACEE,IAAI,QACJiJ,aAAW,QACXxD,MAAM,UACN3E,UAAWiD,EAAQ8K,MACnBjJ,QAASuI,GAETtO,EAAAC,EAAAC,cAAC+O,GAAAhP,EAAD,CAAWgB,UAAWiD,EAAQ0F,UAG9B2E,MAqBJW,8MACJ1Q,MAAQ,CACN2Q,MAAM,KAGRC,YAAc,WACVhP,QAAQC,IAAI,SACdpC,EAAKqC,SAAS,CAAE6O,MAAM,OAGxBE,YAAc,SAAC1L,EAAO2L,GAClBlP,QAAQC,IAAI,SAQdpC,EAAKqC,SAAS,CAAE6O,MAAM,6EAKtB,OACEnP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqP,GAAAtP,EAAD,CACEuP,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdP,KAAM/Q,KAAKJ,MAAM2R,aACjBC,iBAAkB,IAClBtB,QAASlQ,KAAKiR,YACdtJ,QAAS3H,KAAKJ,MAAM+H,QACpB9E,UAAU,WACV4O,YAAU,SAEV7P,EAAAC,EAAAC,cAAC6N,GAAD,CACIO,QAASlQ,KAAKiR,YACdhL,QAAQ,OACRgK,QAAQ,qDAzCY1M,IAAMC,WAqDzBmD,wBA3DC,SAAAC,GAAK,MAAK,CACxBG,OAAQ,CACNA,OAAQH,EAAMI,QAAQC,QAyDXN,CAAoBmK,kCCktCpBY,eAv1Cd,SAAAA,EAAY9R,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0R,IAClB7R,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4R,GAAAvR,KAAAH,KAAMJ,KACDQ,MAAQ,CACHuR,SAAU,GACVzM,OAAQ,CAAC,MAAO,SAAU,aAAc,iBAAkB,SAAS,YAAa,UAChF0M,aAAa,EACbL,cAAc,EACd/Q,iBAAkB,EAClBC,iBAAkB,EAClBC,uBAAwB,EACxBmR,UAAW,GACXC,eAAgB,GAEhBC,oBAAqB,EAErBC,cAAc,EACdvL,KAAMA,GACfwL,MAAOA,GACEC,aAAa,GACbC,YAAY,GACZC,YAAY,GACZC,eAAe,GACfnE,WAAY,GACZ5F,oBAAqB,GACrBgK,cAAe,GACfC,eAAgB,GAChBC,aAAc,GACdC,eAAgB,SAChBC,mBAAoB,MACpBC,uBAAwB,GACxBC,mBAAmB,EACnBC,cAAe,EACfC,cAAe,EACfC,aAAc,EACdC,aAAa,EACbC,sBAAuB,GACvBC,oBAAqB,GACrBC,cAAeC,MAAMC,KAAK,CAAChR,OAAQ,KAAQ,SAACiR,EAAGvS,GAAJ,OAAUA,IACrDwS,wBAAyB,GACzBC,oBAAqB,GACrBC,qBAAsB,GACtBC,kBAAkB,GAClBC,iBAAkB,GAClBC,wBAAyB,GACzBC,mBAAoB,GACpBC,oBAAqB,GACrBlL,MAAO,CACHC,WAAY,wBACZC,UAAW,0BAInBjJ,EAAKwF,aAAexF,EAAKwF,aAAaxE,KAAlBf,OAAAgB,EAAA,EAAAhB,QAAAgB,EAAA,EAAAhB,CAAAD,KApDRA,gFAyDCyJ,EAAEC,GACf,IAAIwK,EACAC,EAyBJ,OAlBID,EAFDzK,EAAI,GAEM,IAAW,IADpBA,GAAQ,IAGK,GAAJA,EAIT0K,EAFDzK,EAAI,GAEM,IAAW,IADpBA,GAAQ,IAGK,GAAJA,EAMG,CACZrF,MALQsJ,SAASuG,GAMjB1P,MALQmJ,SAASwG,uCAUd1K,EAAEC,EAAGlI,GACZ,MAAY,SAATA,EAOQ,CACH4S,MALQC,KAAKC,IAAInU,KAAKI,MAAMyS,cAAgBvJ,GAM5C8K,MAJQF,KAAKC,IAAInU,KAAKI,MAAM0S,cAAgBvJ,IAMjC,QAATlI,EAOC,CACH4S,MALQC,KAAKC,IAAInU,KAAKI,MAAM2S,aAAezJ,GAM3C8K,MAJQF,KAAKC,IAAInU,KAAKI,MAAM4S,aAAezJ,SAO/CvH,QAAQmB,MAAM,sEAKbkR,EAAgBC,GAGrB,MAAO,CACHC,MAHQL,KAAKC,IAAIE,EAAe/K,EAAIgL,EAAgBhL,GAIpDkL,MAHQN,KAAKC,IAAIE,EAAe9K,EAAI+K,EAAgB/K,6CAO3CkL,EAASC,GAItB,MAAO,CAACC,KAHGT,KAAKU,MAAuB,IAAhBH,EAAQF,MAAgBG,GAGjCG,KAFHX,KAAKU,MAAuB,IAAhBH,EAAQD,MAAgBE,6CAMlCI,EAAiBC,EAAgBC,GAC9C,IAOIC,EACAC,EARAC,EAAKL,EAAgBxL,EACrB8L,EAAKL,EAAezL,EACpB+L,EAAKP,EAAgBvL,EACrB+L,EAAKP,EAAexL,EACpBoL,EAAOK,EAAaL,KACpBE,EAAOG,EAAaH,KAuBxB,OAnBGM,EAAKC,EAGJH,EAAUE,EAAKR,EAETQ,GAAMC,EACZH,EAAUE,EAAKR,EAEf3S,QAAQmB,MAAM,4BAEfkS,EAAKC,EACJJ,EAAUG,EAAKR,EACTQ,GAAMC,EACZJ,EAAUG,EAAKR,EAEf7S,QAAQmB,MAAM,4BAIX,CACH8R,UACAC,2DAMJ,IAAI5L,EAAItJ,KAAKI,MAAM4R,cAAgB,EAEnChS,KAAKkC,SAAS,CACV8P,cAAe1I,2CAOnB,IAAIiM,EAAe,CACfxR,WAAY,CACRC,KAAM,OACNI,KAAM,UAEVH,OAAO,CACHC,MAAO,EACPG,MAAO,GAEXY,GAAIjF,KAAKI,MAAM4R,cACf1M,KAAI,UAAAxC,OAAY9C,KAAKI,MAAM4R,cAAgB,GAC3CxK,MAAOxH,KAAKI,MAAM8E,OAAOlF,KAAKI,MAAM4R,gBAGpCwD,EAAM,GACVA,EAAIC,KAAKF,GACT,IAAIG,EAAa1V,KAAKI,MAAM8N,WAAWpL,OAAO0S,GAE9CxV,KAAKkC,SAAS,CACVgM,WAAYwH,IAEhB1V,KAAK2V,wBACL3V,KAAK4V,aAAa,aAAcL,EAAatQ,yCAIpC5D,EAAM2D,GAEH,eAAT3D,EACCrB,KAAKkC,SAAS,CACV6P,oBAAqB/M,EACrB6M,UAAW,KAEF,kBAATxQ,GACJrB,KAAKkC,SAAS,CACV6P,oBAAqB/M,yCASpBO,GAET,IAAIsQ,EAAatQ,EAAMmI,UAAU,EAAE,IAE/BoI,EAAS9V,KAAKI,MAAM8N,WAAW6H,OAAO,SAAA5U,GACrC,OAAQA,EAAImE,OAASuQ,EAAWG,eAAgB7U,IAGjDiC,EAAQpD,KAAKI,MAAM8N,WAAW+H,QAAQH,EAAO,IAEjD9V,KAAKI,MAAM8N,WAAWgI,OAAO9S,EAAM,GACnCpD,KAAKkC,SAAS,CACVgM,WAAYlO,KAAKI,MAAM8N,0DAKViI,GACjB,IAAIpT,EAAiB/C,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBAGlDqE,EAAUD,EAAWE,YAErBC,EAAcF,EAAQ,GACtBG,EAAeH,EAAQ,GAEvBI,EAAiBxW,KAAKI,MAAM6R,MAAM8D,OAAO,SAAAU,GACzC,OAAOA,EAAKnR,OAASgR,IAErBI,EAAgB1W,KAAKI,MAAM6R,MAAM8D,OAAO,SAAAU,GACxC,OAAOA,EAAKnR,OAASiR,IAGrB9B,EAAUzU,KAAK2W,SAASH,EAAe,GAAIE,EAAc,IAGzDE,EAAWpJ,SAAS2I,EAAWU,aAE/BC,EAAY9W,KAAK+W,iBAAiBtC,EAASmC,GArBnBI,EAuBDhX,KAAKiX,iBAAiBT,EAAe,GAAIE,EAAc,GAAII,GAAhF7B,EAvBsB+B,EAuBtB/B,QAASC,EAvBa8B,EAuBb9B,QACXgC,EAAQlX,KAAKiX,iBAAiBT,EAAe,GAAIE,EAAc,GAAII,GAGnEK,EAAyBnX,KAAKoX,iBAAiBnC,EAASC,GAE5DnS,EAAekB,OAASkT,EACxBpU,EAAesU,KAAOlB,EAEtBpT,EAAeyP,aAAe0E,EAG9BlX,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBAAuBhP,EAIxD/C,KAAKkC,SAAS,CACVgM,WAAYlO,KAAKI,MAAM8N,8DAO3BlO,KAAKsX,cAEL,IAAI5T,EAAS1D,KAAKuX,eAAe,SACjCvX,KAAKI,MAAM+R,YAAanS,KAAKI,MAAMgS,aAC/BrP,EAAiB/C,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBACtD/P,QAAQC,IAAI,iBAAkBc,GAG9B,IAAImL,EAAUpO,OAAA0X,EAAA,EAAA1X,CAAOE,KAAKI,MAAM8N,YAIhCA,EAAWlO,KAAKI,MAAM2R,qBAAqBhO,WAAaL,EAAOK,WAC/DmK,EAAWlO,KAAKI,MAAM2R,qBAAqB9N,OAASP,EAAOO,OAG3DjE,KAAKkC,SAAS,CACVgM,WAAYA,IAEhB,IAAIuJ,EAAOzX,KACX0X,WAAW,WACP1V,QAAQC,IAAIwV,EAAKrX,QAEnB,4CAGSsG,GACX,IAAI3D,EAAiB/C,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBACrDyD,EAAMxV,KAAKI,MAAMqG,KAAKsP,OAAO,SAAAtT,GAChC,OAAOA,EAAIiE,QAAUA,IAEnB1E,QAAQC,IAAIc,GAEZ,IAAI4U,EAAkB3X,KAAK4X,UAAUpC,EAAI,GAAG9O,OAGxCmR,EAAY7X,KAAKI,MAAMqG,KAAKwP,QAAQT,EAAI,IAYxCsC,EAAU9X,KAAKI,MAAMqG,KAAKoR,GAE1BE,EAAe/X,KAAKI,MAAM6R,MAAM8D,OAAO,SAAAU,GACvC,OAAOA,EAAKnR,OAASwS,EAAQE,YAE7BC,EAAcjY,KAAKI,MAAM6R,MAAM8D,OAAO,SAAAU,GACtC,OAAOA,EAAKnR,OAASwS,EAAQI,UAG7BC,EAAkB,CAClB7O,EAAGyO,EAAa,GAAGzO,EACnBC,EAAGwO,EAAa,GAAGxO,GAEnB6O,EAAgB,CAChB9O,EAAG2O,EAAY,GAAG3O,EAClBC,EAAG0O,EAAY,GAAG1O,GArCL8O,EAmDIrY,KAAKI,MAAM0T,oBAAoB6D,GAA9CW,EAnDWD,EAmDXC,MAUFC,GA7DaF,EAmDJG,IAUSxY,KAAKI,MAAMoT,oBAAoBiF,MAAM,EAAGd,IAE9D3X,KAAKkC,SAAS,CACVyQ,uBAAwB2F,EACxBrF,sBAAuBkF,EACvBjF,oBAAqBkF,EACrB3E,qBAAqB3T,OAAA0X,EAAA,EAAA1X,CAAKyY,KAgB9BvY,KAAK0Y,YAAY3V,EAAeyP,aAAayC,QAAQlS,EAAeyP,aAAa0C,QAAS,6CAmBpF5L,EAAGC,EAAGlI,GAKZ,IAKIsX,EAyCAC,EA9CAC,EAAkB,GAGlB5E,EAAQ3K,EACR8K,EAAQ7K,EAqBZ,IAnBY,QAATlI,IACCsX,EAAc3Y,KAAKI,MAAMsS,oBAK7BuB,EAAQjU,KAAK8Y,WAAW7E,EAAOG,EAAO,QAAQH,MAC9CG,EAAQpU,KAAK8Y,WAAW7E,EAAOG,EAAO,QAAQA,MAMd,IAA7BpU,KAAKI,MAAMyS,eAAqD,IAA9B7S,KAAKI,MAAM0S,gBAC5CmB,GAAgB,EAChBG,GAAgB,EAChByE,EAAgBpD,KAAKkD,IAGnB1E,GAASG,GAERpU,KAAKI,MAAM0S,cAAgBvJ,GAC1BoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IACf3Y,KAAKI,MAAM0S,cAAgBvJ,IACjCoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IAEtB3Y,KAAKI,MAAMyS,cAAgBvJ,GAC1BqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,IAEf3Y,KAAKI,MAAMyS,cAAgBvJ,IACjCqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,IAEzB1E,GAAgB,EAChBG,GAAgB,EAIXwE,EAARxE,GAAsCH,EAEvC,IAAK,IAAIlT,EAAI,EAAGA,EAAI6X,EAAU7X,IACvBqT,EACIpU,KAAKI,MAAM0S,cAAgBvJ,GAC1BoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IAEf3Y,KAAKI,MAAM0S,cAAgBvJ,IACjCoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IAEnB1E,IACHjU,KAAKI,MAAMyS,cAAgBvJ,GAC1BqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,IACf3Y,KAAKI,MAAMyS,cAAgBvJ,IACjCqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,KAKrB,QAATtX,GAGCrB,KAAKkC,SAAS,CACV2Q,cAAevJ,EACfwJ,cAAevJ,EACfmJ,mBAAoBiG,EACpBpF,wBAAuB,GAAAzQ,OAAAhD,OAAA0X,EAAA,EAAA1X,CAAME,KAAKI,MAAMmT,yBAA4BsF,yCAMpEvP,EAAEC,EAAGlI,GAEb,IAKI0X,EAEAJ,EAPAE,EAAkB,GAElB5E,EAAQ3K,EACR8K,EAAQ7K,EAOA,QAATlI,EAEsC,IAAlCrB,KAAKI,MAAMwS,oBACVmG,EAAe/Y,KAAKI,MAAMsS,mBAC1BiG,EAAc3Y,KAAKI,MAAMsS,qBAGzBqG,EAAe/Y,KAAKI,MAAMwS,mBAC1B+F,EAAc3Y,KAAKI,MAAMwS,oBAEd,YAATvR,IAMNsX,EAAc3Y,KAAKI,MAAMuS,uBAQzB3S,KAAKkC,SAAS,CACV6Q,aAAc/S,KAAKI,MAAM6S,sBAAsB3J,EAC/C0J,aAAchT,KAAKI,MAAM6S,sBAAsB1J,KAtCrC,IA2FdqP,EA3FcI,EA2DEhZ,KAAK8Y,WAAW7E,EAAOG,EAAO,OAWlD,IAXGH,EA3De+E,EA2Df/E,MAAOG,EA3DQ4E,EA2DR5E,MAKqB,IAA5BpU,KAAKI,MAAM2S,cAAmD,IAA7B/S,KAAKI,MAAM4S,eAC3CiB,GAAgB,EAChBG,GAAgB,EAChByE,EAAgBpD,KAAKkD,IAGnB1E,GAASG,GAERpU,KAAKI,MAAM4S,aAAezJ,GACzBoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IACf3Y,KAAKI,MAAM4S,aAAezJ,IAChCoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IAEtB3Y,KAAKI,MAAM2S,aAAezJ,GACzBqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,IAEf3Y,KAAKI,MAAM2S,aAAezJ,IAChCqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,IAEzB1E,GAAgB,EAChBG,GAAgB,EAIXwE,EAARxE,GAAsCH,EAEvC,IAAK,IAAIlT,EAAI,EAAGA,EAAI6X,EAAU7X,IACvBqT,EAEIpU,KAAKI,MAAM4S,aAAezJ,GACzBoP,GAA4B,IAE5BE,EAAgBpD,KAAKkD,IAEf3Y,KAAKI,MAAM4S,aAAezJ,IAChCoP,GAA4B,IAC5BE,EAAgBpD,KAAKkD,IAEnB1E,IAEHjU,KAAKI,MAAM2S,aAAezJ,GACzBqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,IACf3Y,KAAKI,MAAM2S,aAAezJ,IAChCqP,GAA4B,EAC5BE,EAAgBpD,KAAKkD,KAKjC,IAAIM,EAAc,CACdX,MAAOS,EACPP,IAAKG,GAQG,QAATtX,EACCrB,KAAKkC,SAAS,CACV0Q,mBAAoB+F,EACpB5F,aAAczJ,EACd0J,aAAczJ,EACduK,oBAAmB,GAAAhR,OAAAhD,OAAA0X,EAAA,EAAA1X,CAAKE,KAAKI,MAAM0T,qBAAhB,CAAoCmF,IACvDzF,oBAAmB,GAAA1Q,OAAAhD,OAAA0X,EAAA,EAAA1X,CAAME,KAAKI,MAAMoT,qBAAjB,CAAsCqF,MAM9C,YAATxX,GAENrB,KAAKkC,SAAS,CACV2Q,cAAevJ,EACfwJ,cAAevJ,EACfoJ,uBAAwBgG,EACxBlF,qBAAoB,GAAA3Q,OAAAhD,OAAA0X,EAAA,EAAA1X,CAAKE,KAAKI,MAAMqT,sBAAhB,CAAsCoF,8CAgC9D7Y,KAAKkC,SAAS,CACVwR,kBAAmB1T,KAAKI,MAAMmT,wEAOlCvR,QAAQC,IAAIjC,KAAKI,MAAMqT,sBACvB,IAAIyF,EAAS,GAAGpW,OAAOqW,MAAM,GAAInZ,KAAKI,MAAMqT,sBAC5CzR,QAAQC,IAAIiX,GACZlZ,KAAKkC,SAAS,CACV0R,wBAAyBsF,qDAIb,IAAAlY,EAAAhB,KAEhB0D,EADiB1D,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBAC1BS,aAC5BxQ,QAAQC,IAAI,gBAAiByB,GAE7B,IAAI0V,EAAYpZ,KAAKI,MAAM6R,MAAM8D,OAAO,SAACpS,EAAOP,GAC5C,IAAIiW,EAAQrY,EAAKZ,MAAM6R,MAAM7O,GACzBkW,EAAQtY,EAAKZ,MAAM6R,MAAM7O,EAAQ,GAKxC,QAAamW,IAAVD,EACH,OAEa5V,EAAO6F,EAAI8P,EAAM9P,GAAK7F,EAAO6F,EAAI+P,EAAM/P,GACxC7F,EAAO6F,EAAI8P,EAAM9P,GAAK7F,EAAO6F,EAAI+P,EAAM/P,KACtC7F,EAAO4F,EAAI+P,EAAM/P,GAAK5F,EAAO4F,EAAIgQ,EAAMhQ,GACxC5F,EAAO4F,EAAI+P,EAAM/P,GAAK5F,EAAO4F,EAAIgQ,EAAMhQ,IAG5CtH,QAAQC,IAAI,gBACD0B,IAILD,EAAO6F,EAAI8P,EAAM9P,GAAK7F,EAAO6F,EAAI+P,EAAM/P,GACxC7F,EAAO6F,EAAI8P,EAAM9P,GAAK7F,EAAO6F,EAAI+P,EAAM/P,IAEvC7F,EAAO4F,IAAM+P,EAAM/P,GAAK5F,EAAO4F,IAAMgQ,EAAMhQ,GAGhDtH,QAAQC,IAAI,kBACD0B,IAILD,EAAO4F,EAAI+P,EAAM/P,GAAK5F,EAAO4F,EAAIgQ,EAAMhQ,GACxC5F,EAAO4F,EAAI+P,EAAM/P,GAAK5F,EAAO4F,EAAIgQ,EAAMhQ,IAEvC5F,EAAO6F,IAAM8P,EAAM9P,GAAK7F,EAAO6F,IAAM+P,EAAM/P,GAGhDvH,QAAQC,IAAI,kBAEL0B,GAIHD,EAAO4F,IAAM+P,EAAM/P,GAAK5F,EAAO6F,IAAM8P,EAAM9P,GAI/CvH,QAAQC,IAAI,cACL0B,GAGA,OAIf,OADI3B,QAAQC,IAAI,mBAAoBmX,GAC7BA,uDAGkBA,EAAW5G,EAAcgH,EAAUC,GAC5D,IASIlF,EACAC,EAgCAkF,EACAC,EA3CAxE,EAAK3H,SAAS4L,EAAU9P,GACxB+L,EAAK7H,SAAS4L,EAAU7P,GACxB6L,EAAK5H,SAASgF,EAAalJ,GAC3BgM,EAAK9H,SAASgF,EAAajJ,GA4D/B,GA3DAvH,QAAQC,IAAIuQ,GAUT2C,EAAKC,EAIJb,EAAQa,EAAKD,EAEPA,EAAKC,EAEXb,EAAQY,EAAKC,EACND,IAAOC,EACdb,EAAQ,EAERvS,QAAQmB,MAAM,4BAEfkS,EAAKC,EAEJd,EAAQc,EAAKD,EACPA,EAAKC,EAEXd,EAAQa,EAAKC,EACPD,IAAOC,EACbd,EAAQ,EAERxS,QAAQmB,MAAM,4BAQL,IAAVoR,IACCmF,EAAW,GAEF,IAAVlF,IACCmF,EAAW,GAEZpF,GAAmB,IAAVA,IAERmF,EAAWnF,EAAQkF,GAEpBjF,GAAmB,IAAVA,IAERmF,EAAWnF,EAAQgF,IAMnBE,IAAaC,EAAS,CACtB,GAAGD,EACC,OAAiC,IAAXA,EACnB,GAAGC,EACN,OAAiC,IAAXA,EAI9B,OAAgB,IAAbD,GAA+B,IAAbC,EACK,EAMvBF,EAAWD,EACYE,EAChBD,EAAWD,EACKG,EAEhBF,IAAaD,EAChBE,GAAYC,EACWD,EAEAC,OAG1B3X,QAAQmB,MAAM,uFAMlB,IAAIJ,EAAiB/C,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBACtD/P,QAAQC,IAAI,iBAAkBjC,KAAKI,MAAM2R,qBACzC,IAAIqH,EAAYpZ,KAAK4Z,yBAAyB,GAE9C,IAAIR,EAEA,OADApX,QAAQmB,MAAM,mBACP,EAGX,IAAI0W,EAAiB7Z,KAAKI,MAAM6R,MAAMgE,QAAQmD,GAC1CU,EAAa9Z,KAAKI,MAAM6R,MAAM4H,EAAe,GAC7CE,EAAO/Z,KAAK2W,SAASyC,EAAWU,GAEhCpF,EAAU1U,KAAKga,6BAA6BZ,EAAWrW,EAAeyP,aAAcuH,EAAKvF,MAAOuF,EAAKxF,OACzGvS,QAAQC,IAAI,UAAWyS,GACvB1S,QAAQC,IAAImX,EAAU9T,MACtB,IAGI2U,EAAsB,CACtB5D,YAJarW,KAAKI,MAAMqG,KAAKsP,OAAO,SAAAtT,GACpC,OAAOA,EAAIuV,YAAcoB,EAAU9T,OAGX,GAAGoB,MAC3BmQ,YAAanC,EAAQvQ,YAEzBnC,QAAQC,IAAIgY,GACZ,IAAI/L,EAAUpO,OAAA0X,EAAA,EAAA1X,CAAOE,KAAKI,MAAM8N,YAiBhC,OAfAlM,QAAQC,IAAIc,GAGZA,EAAesU,KAAO4C,EAEtBjY,QAAQC,IAAIc,GACZmL,EAAWlO,KAAKI,MAAM2R,qBAAuBhP,EAC7Cf,QAAQC,IAAIiM,GACZlO,KAAKkC,SAAS,CACVgM,WAAYA,EACZnL,eAAgBkX,KAKb,wCAGPja,KAAKkC,SAAS,CACN2R,mBAAoB,CACpB9P,WAAY,CACRC,KAAM,OACNI,KAAM,UAEVH,OAAO,CACHC,MAAO,EACPG,MAAO,2CAMVzE,GAAM,IAAA8I,EAAA1I,KACf,OAAGA,KAAKI,MAAM8N,WACClO,KAAKI,MAAM8N,WAAWhN,IAAI,SAACiV,EAAWpV,GAE7C,OAAOa,EAAAC,EAAAC,cAACoY,EAAD,CAAOxW,OAAQyS,EAAYpU,IAAKhB,EAAGmE,OAAQwD,EAAKtI,MAAM8E,OAAQiV,QAASzR,EAAKtI,MAAM4R,kBAGtF,2CAKX,OAAGhS,KAAKI,MAAMwR,aACP5R,KAAKI,MAAMuR,SACH,CACHyI,OAAQpa,KAAKI,MAAMuR,SAASxN,WAAa,MAM1C,sCAKd,OACOvC,EAAAC,EAAAC,cAAA,QAAMe,UAAU,kBAEZjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,iBAAiB4B,MAAOzE,KAAKqa,YAAYxZ,KAAKb,KAAtBA,IACnC4B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,QACV7C,KAAKsa,eAGN1Y,EAAAC,EAAAC,cAACyY,EAAD,CAAM7W,OAAQ1D,KAAKI,MAAMoa,eACzB5Y,EAAAC,EAAAC,cAAC2Y,EAAD,CACIxZ,SAAUjB,KAAKI,MAAM+S,cAAehR,WAAanC,KAAKI,MAAMsT,kBAAkBrR,OAASrC,KAAKI,MAAMsT,kBAAqB,KACvHnR,UAAYvC,KAAKI,MAAMuT,iBAAmB3T,KAAKI,MAAMuT,iBAAmB,KACxEjR,cAAgB1C,KAAKI,MAAMwT,wBAAwBvR,OAASrC,KAAKI,MAAMwT,wBAA0B,KACjGvS,KAAMrB,KAAKI,MAAMyR,UACjBpR,iBAAkBT,KAAKI,MAAMK,iBAC7BC,uBAAwBV,KAAKI,MAAMM,uBACnCF,iBAAkBR,KAAKI,MAAMI,iBAC7BuC,eAAgB/C,KAAKI,MAAM2R,wBAKvCnQ,EAAAC,EAAAC,cAAA,OAAKe,UAAS,GAAAC,OAAK9C,KAAKI,MAAMwR,YAAa,eAAgB,GAA7C,qBACVhQ,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mBACXjB,EAAAC,EAAAC,cAAC4Y,GAAD,CACInU,SAAUvG,KAAKqF,aAAaxE,KAAKb,MACjC2I,SAAU3I,KAAK2a,iBAAiB9Z,KAAKb,MACrC2H,QAAS3H,KAAKgR,YAAYnQ,KAAKb,MAC/BqJ,OAAQ,CAACC,EAAEtJ,KAAKI,MAAM+R,YAAa5I,EAAEvJ,KAAKI,MAAMgS,aAChD3L,KAAMzG,KAAKI,MAAMqG,KAAOzG,KAAKI,MAAMqG,KAAO,KAC1CmC,MAAO5I,KAAKI,MAAMwI,MAClBsF,WAAYlO,KAAKI,MAAM8N,WAAW7L,OAASrC,KAAKI,MAAM8N,WAAa,KACnEhJ,OAAQlF,KAAKI,MAAM8E,OACnBnC,eAAgB/C,KAAKI,MAAM2R,sBAE3BnQ,EAAAC,EAAAC,cAAA,KAAGe,UAAU,sBACbjB,EAAAC,EAAAC,cAAC8Y,GAAD,CAAUrJ,aAAcvR,KAAKI,MAAMmR,aAAc5J,QAAS3H,KAAKgR,YAAYnQ,KAAKb,oDAOpGA,KAAKI,MAAMmR,cAAgBvR,KAAKI,MAAMmR,aACtCvR,KAAKkC,SAAS,CACVqP,aAAcvR,KAAKI,MAAMmR,eAE7BvP,QAAQC,IAAIjC,KAAKI,MAAMmR,qDAIZsJ,EAASC,GAEpB,OADA9Y,QAAQC,IAAI4Y,EAAQC,GAChBD,EAAQhY,UAAUkY,MAAM,KAAK9E,QAAQ6E,IAAa,GAC/CD,EAAQG,YAAchb,KAAKib,eAAeJ,EAAQG,WAAYF,uCAE7DvV,GACR,GAAIA,EAGJ,GAAoB,kBAAVA,GAEN,GAAGA,EAAMjD,SAAS,eAAiBiD,EAAMjD,SAAS,UAE3CtC,KAAKI,MAAM8N,WAAW7L,OAAS,GAC9BrC,KAAKkb,aAAa3V,QAGnB,GAAGA,EAAMjD,SAAS,YAAciD,EAAMjD,SAAS,cAAc,CAEhE,IAAIiL,EAAcC,SAASjI,EAAMA,EAAMlD,OAAS,IAAM,EAEtDrC,KAAK4V,aAAa,gBAAiBrI,SAKpChI,EAAMC,OAAO2V,UAAUC,SAAS,eAC/B7V,EAAM8V,kBAEFrb,KAAKsb,gBAEH/V,EAAMC,OAAO2V,UAAUC,SAAS,qBAC1C7V,EAAM8V,kBACiC,MAAhC9V,EAAMC,OAAO+V,QAAQtQ,QACpBjL,KAAKwb,gBAELxb,KAAKkC,SAAS,CACV1B,iBAAkBR,KAAKI,MAAMI,iBAAmB,EAChDqR,UAAW,SAEuB,MAAhCtM,EAAMC,OAAO+V,QAAQtQ,SAC3BjL,KAAKyb,sBACLzb,KAAKkC,SAAS,CACVxB,uBAAwBV,KAAKI,MAAMM,uBAAyB,EAC5DmR,UAAW,eAIS,WAAtBtM,EAAMC,OAAOnE,MAAqBrB,KAAKib,eAAe1V,EAAMC,OAAQ,cAC1ExD,QAAQC,IAAI,OAERjC,KAAKkC,SAAS,CACVqP,cAAc,kDAMblE,GACjBrL,QAAQC,IAAIoL,EAAE7H,OAAOF,MACA,kBAAlB+H,EAAE7H,OAAOF,MACRtD,QAAQC,IAAI,QACZjC,KAAKkC,SAAS,CAACmQ,eAAgBhF,EAAE7H,OAAOC,SAChB,iBAAlB4H,EAAE7H,OAAOF,OACftD,QAAQC,IAAI,MACZjC,KAAKkC,SAAS,CACVuD,MAAO4H,EAAE7H,OAAOC,MAChByM,aAAc7E,EAAE7H,OAAOC,kDAIlBF,GACb,IAAIxC,EAAiB/C,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBAItD,GAFAxM,EAAMmW,iBAEmB,oBAAtBnW,EAAMC,OAAOF,KAA2B,CAEvC,IAAItF,KAAKI,MAAMiS,eAAgB,OAC/B,IAAIuE,EAIAA,EAHA5W,KAAKI,MAAMkI,oBAGAtI,KAAKI,MAAMkI,oBAFX,EAIf,IAAIqT,EAAc,CACdtF,YAAarW,KAAKI,MAAMiS,eACxBwE,YAAaD,GAEjB7T,EAAesU,KAAOsE,EAEtB3b,KAAKkC,SAAS,CACVgM,WAAYlO,KAAKI,MAAM8N,aAG3B,IAAIuJ,EAAOzX,KACX0X,WAAW,WAEPD,EAAKmE,qBAAqB7Y,EAAesU,MACzCI,EAAKoE,eAAe9Y,EAAesU,KAAKhB,aACxCrU,QAAQC,IAAIwV,EAAKrX,QACnB,SAE0B,UAAtBmF,EAAMC,OAAOF,MACnBtF,KAAK8b,SAAS9b,KAAKI,MAAM8R,mDAapB6J,GAGT,GAAuB,MAApBA,EAAIvW,OAAOF,KACVtF,KAAKkC,SAAS,CACViQ,YAAa4J,EAAIvW,OAAOC,aAGzB,GAAuB,MAApBsW,EAAIvW,OAAOF,KACjBtF,KAAKkC,SAAS,CACVkQ,YAAa2J,EAAIvW,OAAOC,aAGzB,GAAuB,oBAApBsW,EAAIvW,OAAOF,WAEd,GAAuB,kBAApByW,EAAIvW,OAAOF,KACjBtF,KAAKkC,SAAS,CAACmQ,eAAgB0J,EAAIvW,OAAOC,aACvC,GAAuB,mBAApBsW,EAAIvW,OAAOF,KACjBtD,QAAQC,IAAI,MACZjC,KAAKkC,SAAS,CAACoG,oBAAoByT,EAAIvW,OAAOC,aAC3C,GAAuB,iBAApBsW,EAAIvW,OAAOF,KAAwB,CACzCtF,KAAKI,MAAMwR,aAAe5R,KAAKI,MAAMwR,YAErC5R,KAAKkC,SAAS,CACV0P,YAAa5R,KAAKI,MAAMwR,cAE5B,IAAI6F,EAAOzX,KAEX0X,WAAW,WACPD,EAAKuE,mBAIU,kBAApBD,EAAIvW,OAAOF,KACVtF,KAAKkC,SAAS,CAACmQ,eAAgB0J,EAAIvW,OAAOC,QAChB,iBAApBsW,EAAIvW,OAAOF,MACjBtF,KAAKkC,SAAS,CACVuD,MAAOsW,EAAIvW,OAAOC,MAClByM,aAAc6J,EAAIvW,OAAOC,iDAMpBF,GACbvD,QAAQC,IAAIsD,EAAMC,OAAOF,MACzBC,EAAMmW,iBACN,IAAIpJ,EAAgBtS,KAAKI,MAAM8N,WAAWlO,KAAKI,MAAM2R,qBAOjD,GANJ/P,QAAQC,IAAIjC,KAAKI,MAAM8N,YACvBlM,QAAQC,IAAIjC,KAAKI,MAAM2R,qBAKM,oBAAtBxM,EAAMC,OAAOF,MAAoD,UAAtBC,EAAMC,OAAOF,KACvDtF,KAAKic,iBAAiB1W,QAEnB,GAAyB,gBAAtBA,EAAMC,OAAOF,KAAwB,CAC3C,IAAI4W,EAAW,GAEZlc,KAAKI,MAAM+R,YACV+J,EAAQ,EAAQ1O,SAASxN,KAAKI,MAAM+R,aAEpC+J,EAAQ,EAAQ5J,EAAcE,aAAalJ,EAE5CtJ,KAAKI,MAAMgS,YACV8J,EAAQ,EAAQ1O,SAASxN,KAAKI,MAAMgS,aAEpC8J,EAAQ,EAAQ5J,EAAcE,aAAajJ,EAE/CvH,QAAQC,IAAIqQ,GACRA,EAAcE,aAAe0J,EACjCla,QAAQC,IAAIjC,KAAKI,MAAM8N,YACvBlO,KAAKkC,SAAS,CACVsQ,aAAc0J,IAGtBlc,KAAKmc,yBACL,IAAI1E,EAAOzX,KACX0X,WAAW,WAGMD,EAAK2E,oBAMlB3E,EAAKoE,eAAepE,EAAKrX,MAAM2C,eAAesT,aAC9CrU,QAAQC,IAAIwV,EAAKrX,MAAM2C,eAAesT,aACtCrU,QAAQC,IAAIwV,EAAKrX,QALbqX,EAAK4E,kBAMX,wCAIAzZ,GACN,IAAIQ,EACJ,OAAOR,GAEH,IAAK,KACDQ,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,EACR,MACJ,IAAK,KACDA,EAAQ,GACR,MACJ,IAAK,KACDA,EAAQ,GACR,MACJ,QACIpB,QAAQmB,MAAM,qBAGtB,OAAOC,mCAEFR,GAEL,IAIIQ,EAAQpD,KAAK4X,UAAUhV,GAIvB0Z,EAAS,CAAC7Z,IAFJzC,KAAKI,MAAMoT,oBAAoBpQ,GAEtBA,SACnBpB,QAAQC,IAAIqa,GACZtc,KAAKkC,SAAS,CACVyR,iBAAkB2I,EAClB7b,iBAAkBT,KAAKI,MAAMK,iBAAmB,EAChDoR,UAAW,+CAKJxQ,EAAKiI,EAAEC,GAElB,IAAIkO,EAAOzX,KACPuc,EAAY,GAGZ,GAAY,SAATlb,EACCqW,WAAW,WACRD,EAAKrX,MAAM6R,MAAM5P,OAAS,GACzBoV,EAAKrX,MAAM6R,MAAMuK,QAAQ,SAAA/F,GAErB,IAGI/S,EAAS,CACTO,OAJSwT,EAAKL,iBACdX,EAAKnN,EAAGmN,EAAKlN,GAIbxF,WAAY,CACRC,KAAM,OACNI,KAAM,WAIdmY,EAAU9G,KAAK/R,KAGvB+T,EAAKvV,SAAS,CACVsY,aAAc+B,KAEpB,WACK,GAAY,WAATlb,EAAkB,CAWxB,MAPa,CACT4C,OAJSwT,EAAKL,iBACd9N,EAAGC,GAIHxF,WAAY,CACRC,KAAM,OACNI,KAAM,qDAWtBqY,OAAOC,SAAS,EAAEC,SAASC,KAAKC,0DAGhC,IAAIpF,EAAOzX,KAEXA,KAAKkC,SAAS,CACV4P,eAAc,GAAAhP,OAAAhD,OAAA0X,EAAA,EAAA1X,CAAME,KAAKI,MAAM0R,gBAAjB,CAAiCgE,OAQnD9V,KAAKgc,iBACL,IAAIc,EAAQH,SAASI,cAAc,oBACxBJ,SAASI,cAAc,mBAElCrF,WAAW,WACPD,EAAKvV,SAAS,CACVyP,SAAUmL,EAAME,gBAEtB,KAEFtF,WAAW,WAEPD,EAAKrX,MAAM6R,MAAM/Q,IAAI,SAAAuV,GACbgB,EAAKiB,YAAYjC,EAAKnN,EAAGmN,EAAKlN,EAAE,OAChCkO,EAAKwF,UAAUxG,EAAKnN,EAAGmN,EAAKlN,EAAG,SAIvCkO,EAAK6D,eACL7D,EAAKmE,qBAAqBnE,EAAKrX,MAAM0R,eAAe,IACpD2F,EAAKoE,eAAepE,EAAKrX,MAAM0R,eAAe,GAAGuE,cAInD,KAKFrW,KAAKuX,eAAe,eAp1CT/T,aCCJ0Z,oLAJN,OAAOtb,EAAAC,EAAAC,cAACqb,GAAD,aAJE3Z,aCME4Z,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZN7X,IAAS8X,OAAO5b,EAAAC,EAAAC,cAAC2b,GAAD,MAASd,SAASe,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf69db0d.chunk.js","sourcesContent":["import React from \"react\";\n\n// takes the num of boxes/cells to be produced\nclass Box extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allColored: false,\n      legColored: false,\n      completeColored: false,\n      allColorsCounter: 0,\n      legColorsCounter: 0,\n      completedColorsCounter: 0,\n      previousLegIndex: \"\"\n    }\n    this.BoxMarkup = this.BoxMarkup.bind(this)\n  }\n  renderBoxes(i) {\n    if (this.props.toRender) {\n      let { toRender } = this.props\n      return toRender.map((obj, i) => {\n        let result\n        switch (this.props.type) {\n          case \"all\":\n            if (!this.state.allColored) {\n              result = this.allColorsRemoveLogic(i)\n            } else if (this.state.allColored) {\n              result = this.allColorsAddLogic(i)\n            }\n            break\n          case \"leg\":\n            if (!this.state.legColored) {\n              result = this.legColorsRemoveLogic(i)\n            } else if (this.state.legColored) {\n              result = this.legColorsAddLogic(i)\n            }\n            break\n          case \"complete\":\n            if (!this.state.completeColored) {\n              result = this.completedColorsRemoveLogic(i)\n            } else if (this.state.completeColored) {\n              result = this.completedColorsAddLogic(i)\n            }\n            break\n          default:\n            // on first render just run markup\n            result = <this.BoxMarkup key={i} />\n            break\n        }\n        return result\n      });\n    }\n  }\n  toggleColor(type) {\n    if (type === \"all\") {\n      this.state.allColored = !this.state.allColored\n      console.log(\"opposite\", this.state.allColored)\n      this.setState({\n        allColored: this.state.allColored\n      })\n    } else if (type === \"leg\") {\n      this.state.legColored = !this.state.legColored\n      console.log(\"opposite\", this.state.legColored)\n      this.setState({\n        legColored: this.state.legColored\n      })\n    } else if (type === \"complete\") {\n      this.state.completeColored = !this.state.completeColored\n      console.log(\"opposite\", this.state.completeColored)\n      this.setState({\n        completeColored: this.state.completeColored\n      })\n    }\n  }\n  allColorsAddLogic(i) {\n    let { stopsColor } = this.props\n    let hasStopColor = (() => {\n      if (!stopsColor || !stopsColor.length || !stopsColor.includes(i))\n        return false\n      return true\n    })();\n    return <this.BoxMarkup hasStopColor={hasStopColor} key={i} />\n  }\n  allColorsRemoveLogic(i) {\n    let { stopsColor } = this.props\n    let hasStopColor = (() => {\n      if (stopsColor && stopsColor.includes(i)) return false\n    })();\n    return <this.BoxMarkup hasStopColor={hasStopColor} key={i} />\n  }\n  legColorsAddLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (!legsColor || !legsColor.length || !legsColor.includes(i))\n        return false\n      return true\n    })();\n    return <this.BoxMarkup hasLegColor={hasLegColor} key={i} />\n  }\n  legColorsRemoveLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (legsColor && legsColor.includes(i)) return false;\n  })();\n    return <this.BoxMarkup hasLegColor={hasLegColor} key={i} />\n  }\n  completedColorsAddLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (!completeColor || !completeColor.length || !completeColor.includes(i))\n        return false\n      return true\n    })();\n    return <this.BoxMarkup hasCompletionColor={hasCompletionColor} key={i} />\n  }\n  completedColorsRemoveLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (completeColor && completeColor.includes(i)) return false;\n    })();\n    return <this.BoxMarkup hasCompletionColor={hasCompletionColor} key={i} />\n  }\n\n  BoxMarkup(input) {\n    return (\n      <div\n        className={`box ${input.hasStopColor ? `stop-color${this.props.selectedDriver}` : \"\"} ${\n          input.hasLegColor ? `leg-color${this.props.selectedDriver}` : \"\"\n        } ${input.hasCompletionColor ? `complete-color${this.props.selectedDriver}` : \"\"}`}\n      />\n    )\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // check if this props is dif than last - to stop it firing over and over\n    if (this.props.allColorsCounter !== prevProps.allColorsCounter) {\n      // if state count is not yet updated\n      if (this.state.allColorsCounter !== this.props.allColorsCounter) {\n        console.log(\"toggle\")\n        this.toggleColor(\"all\")\n        this.setState({\n            // update by one\n          allColorsCounter: this.props.allColorsCounter\n        })\n      } else {\n        console.error(\"And error in the all index logic\")\n      }\n    }\n    // check for change - if counter diff then there is a change\n    if (this.props.legColorsCounter !== prevProps.legColorsCounter) {\n      // if new leg, index will be diff\n      if (this.props.legsColor.index !== this.state.previousLegIndex) {\n        console.log(\"change leg\")\n        // udpate index\n        this.setState({\n          previousLegIndex: this.props.legsColor.index,\n          legColored: true\n        })\n        // if same leg, index will match previous then just toggle off\n      } else if (this.props.legsColor.index === this.state.previousLegIndex) {\n        console.log(\"toggle leg\")\n        this.toggleColor(\"leg\")\n      } else {\n        console.error(\"An error in the leg index logic\")\n      }\n    }\n    if (\n      this.props.completedColorsCounter !== prevProps.completedColorsCounter\n    ) {\n      console.log(this.props)\n      if (\n        this.state.completedColorsCounter !== this.props.completedColorsCounter\n      ) {\n        console.log(\"toggle\")\n        // update by one\n        this.toggleColor(\"complete\")\n        this.setState({\n          completedColorsCounter: this.props.completedColorsCounter\n        })\n      } else {\n        console.error(\"An error in the complete index logic\")\n      }\n    }\n  }\n  render() {\n    // console.log(this.props.selectedDriver)\n    if (this.props.toRender && this.props.toRender.length) {\n      return <React.Fragment>{this.renderBoxes()}</React.Fragment>\n    } else {\n      return <div>No Boxes yet!</div>\n    }\n  }\n}\n\nexport default Box\n","import React from 'react'\nimport { Manager, Reference, Popper } from 'react-popper';\n\n\n// takes and array of directions and pixes for x and y\nfunction Stop(props){\n    if(!props.coords) return null\n    // console.log('props', props)\n    let coordsArr = props.coords\n    return coordsArr.map((coord, i) => {\n        let styles = {\n            [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n            [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px'\n        }\n        // console.log('styles', styles)\n        return(\n            <Manager key={i}>\n            <Reference>\n            {({ ref }) => (\n                <div className=\"stop-marker\" style={styles}></div>\n            )}\n            </Reference>\n            <Popper placement=\"right\">\n            {({ ref, style, placement, arrowProps }) => (\n                <div ref={ref} style={style} data-placement={placement}>\n                Popper element\n                <div ref={arrowProps.ref} style={arrowProps.style} />\n                </div>\n            )}\n            </Popper>\n            </Manager>\n        )\n    })\n}\n\nexport default Stop\n","import React from 'react'\n\n// takes and array of directions and pixes for x and y\nfunction Truck(props){\n    if(!props.coords) return null\n    let coord = props.coords\n    // console.log(props)\n    let driverID = props.coords.id\n    // console.log(driverID)\n    let style = {\n        [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n        [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px',\n        \"--driver-color\": props.colors[driverID]\n    }\n    return(\n        <div className=\"truck\" style={style}></div>\n    )\n}\n\nexport default Truck\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2,\n  },\n});\n\nclass MaterialSelect extends React.Component {\n  state = {\n    leg: '',\n    labelWidth: 0,\n  };\n\n  componentDidMount() {\n    this.setState({\n      labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n    });\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    // console.log(this.props)\n    return (\n      <div className={classes.root}>\n\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel\n            ref={ref => {\n              this.InputLabelRef = ref;\n            }}\n            htmlFor=\"outlined-age-native-simple\"\n          >\n            Legs\n          </InputLabel>\n          <Select\n            native\n            value={this.props.value}\n            onChange={this.props.onChange}\n            input={\n              <OutlinedInput\n                name={this.props.type === 'driver' ? 'driver-select': 'color-select'}\n                labelWidth={this.state.labelWidth}\n                id=\"outlined-age-native-simple\"\n              />\n            }\n          >\n          <option value=\"\" />\n          {\n              this.props.legs.map((leg, i) => {\n                return <option key={i} value={this.state.value}>{leg.legID}</option>\n              })\n          }\n\n          </Select>\n        </FormControl>\n\n      </div>\n    );\n  }\n}\n\nMaterialSelect.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MaterialSelect);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nfunction MaterialButton(props) {\n  const { classes } = props;\n  return (\n      <Button variant=\"contained\" type={props.type} size={props.size} color={props.color} className={`${props.type} button ${classes.button}`} data-number={props.buttonNumber} onClick={props.onClick}>\n        {props.text}\n      </Button>\n  );\n}\n\nMaterialButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MaterialButton);\n","import React from 'react'\nimport MaterialSelect from './material/MaterialSelect'\nimport MaterialButton from './material/MaterialButton'\nimport TextField from '@material-ui/core/TextField';\n\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 200,\n    },\n    dense: {\n        marginTop: 19,\n    },\n    menu: {\n        width: 200,\n    },\n})\n\nclass Dropdown extends React.Component{\n    constructor(props) {\n\t\tsuper(props)\n        this.state = {\n            }\n\t}\n\n    renderInput(){\n        return(\n            <div className=\"progress-input-wrapper form-child\">\n\n                <TextField\n                    value={this.props.driverProgressInput}\n                    id=\"standard-name\"\n                    label=\"Progress\"\n                    placeholder=\"Progres in Percent\"\n                    className={`${styles.textField} progress-input`}\n                    name=\"progress-input\"\n                    onChange={ev =>  this.props.onChange(ev)}\n                    margin=\"normal\"\n\n                />\n            </div>\n        )\n    }\n    render(){\n\n        if(this.props.legs){\n\n            return(\n                <div className=\"legs-container\">\n\n                <form name={this.props.type === 'driver' ? 'driver-dropdown': 'color'} onSubmit={(ev) => this.props.onSubmit(ev)}>\n                    <label className=\"form-child\">\n                    {this.props.type === 'driver' ? this.props.texts.driverText: this.props.texts.colorText}\n                    <MaterialSelect legs={this.props.legs} value={this.state.value} onChange={this.props.onChange} type={this.props.type === 'driver' ? 'driver' : 'color'}>\n\n                        <option></option>\n                    {\n                        this.props.legs.map((leg, i) => {\n                            return <option key={i} value={this.state.value}>{leg.legID}</option>\n                        })\n                    }\n                    </MaterialSelect>\n                    </label>\n                    {this.props.type === 'driver'?\n                    this.renderInput() : null\n                    }\n                    <MaterialButton type=\"submit\" value=\"Submit\" size=\"large\" color=\"primary\" text=\"Toggle Leg\"/>\n\n                </form>\n\n                </div>\n            )\n        } else {\n            return null\n        }\n\n    }\n\n}\n\nexport default Dropdown\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MaterialButton from './MaterialButton';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass MaterialForm extends React.Component {\n  state = {\n\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n  render() {\n      // console.log(this.props)\n    const { classes } = this.props;\n    // let updatedValue = {}\n    // if(this.props.values){\n    //     updatedValue.x=this.props.values.x\n    //     updatedValue.y=this.props.values.y\n    // } else {\n    //     updatedValue = undefined\n    // }\n    return (\n      <form className={`${classes.container} material-form`} noValidate autoComplete=\"off\" name=\"driver-form\" onSubmit={(ev) => this.props.onSubmit(ev)}>\n        {this.props.values ?\n            <React.Fragment>\n                <TextField\n                    id=\"standard-name\"\n                    label=\"X-coords\"\n                    placeholder=\"1-200\"\n                    className={classes.textField}\n                    value={this.props.values.x}\n                    onChange={this.props.onChange}\n                    margin=\"normal\"\n                    name=\"x\"\n                />\n                <TextField\n                    id=\"standard-name\"\n                    label=\"Y-coords\"\n                    placeholder=\"1-200\"\n                    className={classes.textField}\n                    value={this.props.values.y}\n                    onChange={this.props.onChange}\n                    margin=\"normal\"\n                    name=\"y\"\n                />\n            </React.Fragment>\n            :\n            <React.Fragment>\n                <TextField\n                id=\"standard-name\"\n                label=\"X-coords\"\n                placeholder=\"1-200\"\n                className={classes.textField}\n                onChange={this.props.onChange}\n                margin=\"normal\"\n                name=\"x\"\n                />\n                <TextField\n                id=\"standard-name\"\n                label=\"Y-coords\"\n                placeholder=\"1-200\"\n                className={classes.textField}\n                onChange={this.props.onChange}\n                margin=\"normal\"\n                name=\"y\"\n                />\n            </React.Fragment>\n        }\n             <MaterialButton size=\"large\" color=\"primary\" type=\"primary-button\" text=\"Submit\" buttonNumber={3}/>\n      </form>\n    );\n  }\n}\n\nMaterialForm.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MaterialForm);\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Dropdown from '../Dropdown'\nimport MaterialButton from './MaterialButton'\nimport MaterialForm from './MaterialForm'\n\n\n\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n})\n\nclass Accordion extends React.Component {\n  state = {\n    expanded: null,\n  };\n\n  handleChange = panel => (event, expanded) => {\n    this.setState({\n      expanded: expanded ? panel : false,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { expanded } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel className='top-panel' expanded={expanded === 'panel1'} onChange={this.handleChange('panel1')}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>Set Driver Coordinates</Typography>\n            <Typography className={classes.secondaryHeading}>Set driver postion with coordinates.\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n          <MaterialForm\n              onChange={this.props.onChange}\n              onSubmit={this.props.onSubmit}\n              values={this.props.values}\n             />\n            <Typography>\n\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <ExpansionPanel className='top-panel' expanded={expanded === 'panel2'} onChange={this.handleChange('panel2')}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>Set Driver Leg</Typography>\n            <Typography className={classes.secondaryHeading}>\n              Set driver position with leg and progress.\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className=\"second-panel\">\n          <Dropdown\n                onChange={this.props.onChange}\n                onSubmit={this.props.onSubmit}\n                legs={this.props.legs ? this.props.legs : null}\n                type=\"driver\"\n                texts={this.props.texts}\n          />\n            <Typography>\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <ExpansionPanel className='top-panel' expanded={expanded === 'panel3'} onChange={this.handleChange('panel3')}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>Legs & Progress</Typography>\n            <Typography className={classes.secondaryHeading}>Highlight completed route and legs.</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className=\"third-panel\">\n          <Dropdown\n                onChange={this.props.onChange}\n                onSubmit={this.props.onSubmit}\n                legs={this.props.legs ? this.props.legs : null}\n                type=\"color\"\n                texts={this.props.texts}\n          />\n          <MaterialButton size=\"large\" color=\"primary\" type=\"secondary-button\" text=\"Progess\" buttonNumber={2} onClick={this.props.onClick}/>\n\n            <Typography>\n\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n      </div>\n    );\n  }\n}\n\nAccordion.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Accordion);\n\n\n\n\n\n// type=\"color\"\n// utils={this.state.utils}\n// legs={this.state.legs.length ? this.state.legs : null}\n// onChange={this.handleDropdownChange} onSubmit={this.handleDropdownSubmit}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst styles = theme => ({\n  fab: {\n    margin: theme.spacing.unit,\n    backgroundColor: '#2196f3'\n  },\n  extendedIcon: {\n    marginRight: theme.spacing.unit,\n  },\n});\nfunction renderIcon(props){\n    if(props.iconType === 'add'){\n        return(<AddIcon/>)\n    } else if(props.iconType === 'minus'){\n        return(<img className=\"minus-svg\" src=\"./icons/remove_24px.svg\"/>)\n    }    else {\n        return null\n    }\n}\n\nfunction AddButton(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <Fab size=\"small\" color=\"primary\" aria-label=\"Add\" className={`add-button button ${classes.fab}`} onClick={(ev) => props.onClick(ev)} data-number={props.number}>\n        {renderIcon(props)}\n\n      </Fab>\n    </div>\n  );\n}\n\nAddButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AddButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport black from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n  },\n  icon: {\n    margin: theme.spacing.unit * 2,\n    color: \"#A0A0A0\t\",\n    fontSize: \"12px\",\n    position: \"absolute\",\n    right: \"-7px\",\n    top: \"0\"\n\n  },\n  iconHover: {\n    margin: theme.spacing.unit * 2,\n    '&:hover': {\n      color: black,\n    },\n  },\n});\n\nfunction Icons(props) {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n        <Icon className={`${classes.icon} close-icon`} color=\"primary\" tabIndex=\"-1\">\n        close\n      </Icon>\n    </div>\n  );\n}\n\nIcons.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Icons);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nconst styles = {\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[500],\n    },\n  },\n  checked: {},\n};\n\nclass CheckboxLabels extends React.Component {\n  state = {\n    checkedA: true\n  };\n\n  handleChange = name => event => {\n    this.props.onChange(event)\n    this.setState({ [name]: event.target.checked });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <FormGroup row  className='checkbox-container'>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.state.checkedA}\n              onChange={this.handleChange('checkedA')}\n              value=\"checkedA\"\n              name=\"float-toggle\"\n            />\n          }\n          label=\"Floating Controls\"\n        />\n\n      </FormGroup>\n    );\n  }\n}\n\nCheckboxLabels.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CheckboxLabels);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Accordion from \"./Accordion\";\nimport AddButton from \"./AddButton\";\nimport MaterialButton from \"./MaterialButton\";\nimport Icon from \"./Icon\";\nimport Checkbox from \"./Checkbox\";\n\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nconst styles = (theme, color) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n    },\n    indicator: {\n        backgroundColor: color\n  }\n});\n\n\n\nclass SimpleTabs extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            value: 0,\n            tabs: [{ label: \"Driver 1\" }],\n            numberOfTabs: 1,\n            hovered: false\n        };\n    }\n\n  handleChange = (event, value) => {\n      if(event.target.name === \"float-toggle\"){\n          this.props.onChange(event)\n          return\n      }\n    this.setState({ value });\n  };\n  addTab(){\n      let driverNum = this.state.numberOfTabs + 1\n\n      // console.log(driverNum)\n      this.setState({\n          numberOfTabs: driverNum\n      })\n  }\n  // takes index to extract from array\n  subtractTab(indexToRemove){\n\n      if(this.state.numberOfTabs < 2){\n          console.log('cannot subtract single driver')\n          return\n      }\n\n      let numberOfTabs = this.state.numberOfTabs - 1\n\n      this.setState({\n          numberOfTabs: numberOfTabs\n      })\n\n\n  }\n  handleAddButtonClick(e){\n      // TODO: remove old colors when new driver added\n      //check which tab we are on on click\n      //set the value to select the newwly created tab - new driver\n\n      console.log(e)\n      this.props.onClick(e)\n      this.addTab()\n  }\n  handleRemoveButtonClick(e){\n\n      if(!this.state.hovered){\n          return\n      }\n      let driverIndex = parseInt(e.target.innerText.substring(13,14)) - 1\n      this.props.onClick(`${e.target.innerText} icon-click`)\n      this.subtractTab(driverIndex)\n  }\n\n   mouseEvent(e) {\n    // e = Mouse click event.\n        var rect = e.target.getBoundingClientRect();\n        var x = e.clientX - rect.left; //x position within the element.\n        var y = e.clientY - rect.top;  //y position within the element.\n\n        if(y <= 27 && x >= 60){\n            this.setState({hovered: true})\n        } else {\n            this.setState({hovered: false})\n        }\n    }\n    handleTabsClick(e){\n        if(this.state.hovered){\n            return\n        }\n        this.props.onClick(e.target.innerText)\n    }\n\n    renderIcon(){\n        return(<div tabIndex=\"-1\" className=\"icon-wrapper\">\n          <Icon />\n        </div>)\n    }\n  render() {\n      // console.log(this.props)\n    const { classes } = this.props;\n    const { value } = this.state;\n    if(this.props.driversArr){\n        return (\n            <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs\n                    classes={{\n                        indicator: classes.indicator\n                    }}\n                    className=\"tabs-element\"\n                    name=\"tabs\"\n                    value={this.props.selectedDriver}\n                    onChange={this.handleChange}\n                    onClick={this.handleTabsClick.bind(this)} >\n                {this.props.driversArr.map((tab, i) => {\n\n                    return <Tab\n                                icon={this.renderIcon()} onMouseMove={this.mouseEvent.bind(this)}\n                                label={tab.name}\n                                key={i}\n                                onClick={this.handleRemoveButtonClick.bind(this)}>\n                           </Tab>\n                })}\n                <AddButton\n                    onClick={this.handleAddButtonClick.bind(this)}\n                    iconType=\"add\"/>\n                    <Checkbox />\n                <MaterialButton\n                    size=\"small\"\n                    color=\"secondary\"\n                    text=\"Toggle Route\"\n                    type=\"secondary-button\"\n                    onClick={this.props.onClick}\n                buttonNumber={1}/>\n\n            </Tabs>\n\n            </AppBar>\n            {\n                this.props.driversArr.map((tab, i) => {\n                    return value === i && (\n                        <TabContainer key={i}>\n                        <Accordion\n                        onClick={this.props.onClick}\n                        onSubmit={this.props.onSubmit}\n                        onChange={this.props.onChange}\n                        values={this.props.values}\n                        legs={this.props.legs ? this.props.legs : null}\n                        texts={this.props.texts}\n                        />\n\n                        </TabContainer>\n                    )\n\n                })\n            }\n\n            </div>\n        );\n\n    } else {\n        return null\n    }\n  }\n}\n\nSimpleTabs.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\n\nexport default withStyles(styles)(SimpleTabs);\n\n\n// positioning(){\n//   var parent = document.querySelector('.MuiButtonBase-root-59')\n//   var child = document.querySelector('.material-icons.MuiIcon-root-65')\n//   var parentRect = parent.getBoundingClientRect()\n//   var childRect = child.getBoundingClientRect()\n//   var relativePos = {};\n//\n//   relativePos.top = childRect.top - parentRect.top\n//   relativePos.right = childRect.right - parentRect.right\n//   relativePos.bottom = childRect.bottom - parentRect.bottom\n//   relativePos.left = childRect.left - parentRect.left;\n//\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst styles1 = theme => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n\nfunction MySnackbarContent(props) {\n  const { classes, className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={classNames(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"Close\"\n          color=\"inherit\"\n          className={classes.close}\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nconst styles2 = theme => ({\n  margin: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass CustomizedSnackbars extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClick = () => {\n      console.log('click')\n    this.setState({ open: false });\n  };\n\n  handleClose = (event, reason) => {\n      console.log('close')\n    if (reason === 'clickaway') {\n        this.setState({\n            open: false\n        })\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  render() {\n      // console.log(this.props)\n    return (\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={this.props.snackbarOpen}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n          onClick={this.props.onClick}\n          className=\"snackbar\"\n          data-item=\"hello\"\n        >\n          <MySnackbarContentWrapper\n              onClose={this.handleClose}\n              variant=\"info\"\n              message=\"Those coords are not part of the route.\"\n          />\n        </Snackbar>\n      </div>\n    );\n  }\n}\n\nCustomizedSnackbars.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles2)(CustomizedSnackbars);\n","    import React, { Component } from \"react\";\n// import { Manager, Reference, Popper, Arrow } from \"react-popper\";\n\nimport \"../App.css\";\nimport Box from './Box'\nimport Stop from './Stop'\nimport Truck from './Truck'\nimport Tabs from './material/Tabs'\nimport Snackbar from './material/Snackbar'\nimport stops from '../data/stops.json'\nimport legs from '../data/legs.json'\nimport driver from '../data/driver.json'\n\nclass Grid extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            utilsTop: '',\n            colors: ['red', 'Orange', 'DodgerBlue', 'MediumSeaGreen', 'Violet','SlateBlue', 'Tomato'],\n            floatToggle: true,\n            snackbarOpen: false,\n            allColorsCounter: 0,\n            legColorsCounter: 0,\n            completedColorsCounter: 0,\n            colorType: \"\",\n            loadingDataArr: [],\n            // changes based on tab click\n            selectedDriverIndex: 0,\n            // used to assign driver id on creation\n            createCounter:0,\n            legs: legs,\n\t\t\tstops: stops,\n            legToColorID:\"\",\n            driverFormX:\"\",\n            driverFormY:\"\",\n            driverLegInput:\"\",\n            driversArr: [],\n            driverProgressInput: \"\",\n            currentDriver: \"\",\n            driverLegStart: \"\",\n            driverCoords: \"\",\n            positionSelect: \"coords\",\n            startingCellNumAll: 39800,\n            startingCellNumPartial: \"\",\n            previousLegEndCell:0,\n            previousStopX: 0,\n            previousStopY: 0,\n            previousLegX: 0,\n            previousLegY:0,\n            partialLegStartCoords: \"\",\n            partialLegEndCoords: \"\",\n            boxesToRender: Array.from({length: 40000}, (v, i) => i),\n            holdAllStopColorIndexes: [],\n            holdAllLegColorArrs: [],\n            holdingCompletedArrs: [],\n            finalStopColorArr:[],\n            finalLegColorObj: [],\n            finalCompletedColorsArr: [],\n            finalDriverMoveObj: \"\",\n            legStartEndCellNums: [],\n            texts: {\n                driverText: \"Select leg for driver\",\n                colorText: \"Select a Leg to color\"\n            }\n\t\t};\n\n        this.handleChange = this.handleChange.bind(this);\n\n\n\t}\n    // takes and x/y and returns px to move\n    _convertToPixels(x,y){\n        let totalX\n        let totalY\n        // first 10 cells = 100px\n        // after that everythig 11px\n        // - minus cells add 100px\n        // - rest * 11 then sum\n        if(x > 10){\n            x = x - 10\n            totalX = 100 + (x * 11)\n        } else {\n            totalX = x * 10\n        }\n        if(y > 10){\n            y = y - 10\n            totalY = 100 + (y * 11)\n        } else {\n            totalY = y * 10\n        }\n        let moveX = parseInt(totalX)\n        let moveY = parseInt(totalY)\n        // console.log('mx', moveX)\n        // console.log('my', moveY)\n        let coordsObj = {\n            moveX: moveX,\n            moveY: moveY\n        }\n        return coordsObj\n    }\n    // takes coords and type - needs access to state\n    _numToMove(x,y, type){\n        if(type === 'stop'){\n            // console.log('moveX',this.state.previousStopX )\n            // console.log('moveY', this.state.previousStopY)\n            let moveX = Math.abs(this.state.previousStopX - x)\n            // console.log('abs x', moveX)\n            let moveY = Math.abs(this.state.previousStopY - y)\n            // console.log('abs y', moveY)\n            return {\n                tempX: moveX,\n                tempY: moveY\n            }\n        } else if(type === 'leg'){\n            // console.log('prevX', this.state.previousLegX)\n            // console.log('prevY', this.state.previousLegY)\n            let moveX = Math.abs(this.state.previousLegX - x)\n            // console.log('in move previous', moveX)\n            let moveY = Math.abs(this.state.previousLegY - y)\n            // console.log('in move previous', moveY)\n            return {\n                tempX: moveX,\n                tempY: moveY\n            }\n        } else {\n            console.error(\"error in the num to move function\")\n        }\n\n    }\n    // takes 2 objs of coords and determines the diff\n    _absDiff(firstCoordsObj, secondCoordsObj){\n        let xDiff = Math.abs(firstCoordsObj.x - secondCoordsObj.x)\n        let yDiff = Math.abs(firstCoordsObj.y - secondCoordsObj.y)\n        return {\n            xDiff,\n            yDiff\n        }\n    }\n    // take amount in leg with a percent - returns num to move out of total leg number\n    _percentToCoords(diffObj, percent){\n        let xNum = Math.floor((diffObj.xDiff * 0.01) * percent)\n        let yNum = Math.floor((diffObj.yDiff * 0.01) * percent)\n\n        return {xNum, yNum}\n\n    }\n    // takes 3 objs - deterimine if driver moves coords up/down\n    _getDriverCoords(firstLegStopObj, lastLegStopObj, numToMoveObj ){\n        let x1 = firstLegStopObj.x\n        let x2 = lastLegStopObj.x\n        let y1 = firstLegStopObj.y\n        let y2 = lastLegStopObj.y\n        let xNum = numToMoveObj.xNum\n        let yNum = numToMoveObj.yNum\n        // if x moves up, add\n        let xToMove\n        let yToMove\n        if(x1 < x2){\n            // console.log(firstStopOfLeg[0].x)\n            // console.log(lastStopOfLeg[0].x)\n            xToMove = x1 + xNum\n            // console.log(xToMove)\n        } else if(x1 >= x2){\n            xToMove = x1 - xNum\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        if(y1 < y2){\n            yToMove = y1 + yNum\n        } else if(y1 >= y2){\n            yToMove = y1 - yNum\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        // console.log('x', xToMove)\n        // console.log('y', yToMove)\n        return {\n            xToMove,\n            yToMove\n        }\n    }\n    // update createCounter by 1\n    increaseDriverIdindex(){\n        // console.log('called')\n        let x = this.state.createCounter + 1\n        // console.log(index)\n        this.setState({\n            createCounter: x\n        })\n        // console.log('new Index', this.state.createCounter)\n    }\n    // new add driver - runs on mount and when add button clicked\n    addNewDriver(){\n\n        let newDriverObj = {\n            directions: {\n                xDir: \"left\",\n                yDir: \"bottom\"\n            },\n            pixels:{\n                moveX: 0,\n                moveY: 0\n            },\n            id: this.state.createCounter,\n            name: `driver ${this.state.createCounter + 1}`,\n            color: this.state.colors[this.state.createCounter]\n        }\n        // console.log('id',newDriverObj.id)\n        let arr = []\n        arr.push(newDriverObj)\n        let allDrivers = this.state.driversArr.concat(arr)\n        // console.log(allDrivers)\n        this.setState({\n            driversArr: allDrivers\n        })\n        this.increaseDriverIdindex()\n        this.changeDriver('new-driver', newDriverObj.id)\n\n    }\n    // make new driver the selectedDriver on add\n    changeDriver(type, driverID){\n        //set new driver to be the selectedDriver\n        if(type === 'new-driver')\n            this.setState({\n                selectedDriverIndex: driverID,\n                colorType: \"\"\n            })\n        else if(type === 'change-driver'){\n            this.setState({\n                selectedDriverIndex: driverID,\n            })\n        }\n\n        //update the Tab that is highlighted\n        //turn off color wit type \"\"\n        // reset color toggles to false\n\n    }\n    removeDriver(event){\n        // get the full name of the driver\n        let driverName = event.substring(6,14)\n        // filter out driver by that name\n        let driver = this.state.driversArr.filter(obj => {\n             return (obj.name === driverName.toLowerCase() ? obj : false)\n        })\n        // find index in array\n        let index = this.state.driversArr.indexOf(driver[0])\n        // splice out of driversArr\n        this.state.driversArr.splice(index,1)\n        this.setState({\n            driversArr: this.state.driversArr\n        })\n\n    }\n    // runs on load using pre-loaded data and when form submitted\n    updateDriverwithData(driverData){\n        let selectedDriver = this.state.driversArr[this.state.selectedDriverIndex]\n        // console.log(selectedDriver)\n        // get from api or form\n        let legName = driverData.activeLegID\n        // correlate with stops- letters to match stops needed\n        let firstLetter = legName[0]\n        let secondLetter = legName[1]\n        // get stop coords = filter ones that match\n        let firstStopOfLeg = this.state.stops.filter(stop => {\n            return stop.name === firstLetter\n        })\n        let lastStopOfLeg = this.state.stops.filter(stop => {\n            return stop.name === secondLetter\n        })\n        //calc abs distance bwt coords  - coords for first and last\n        let diffObj = this._absDiff(firstStopOfLeg[0], lastStopOfLeg[0])\n        // console.log(diffObj)\n\n        let progress = parseInt(driverData.legProgress)\n        // takes number of moves and percent - returns number of moves that is\n        let numToMove = this._percentToCoords(diffObj, progress)\n        // takes coords for first, last and how many -returns up / down & COORDS\n        let { xToMove, yToMove } = this._getDriverCoords(firstStopOfLeg[0], lastStopOfLeg[0], numToMove)\n        let moves = this._getDriverCoords(firstStopOfLeg[0], lastStopOfLeg[0], numToMove)\n        // console.log(xToMove, yToMove)\n        // convert the number to move to pixels\n        let driverProgressinPixels = this._convertToPixels(xToMove, yToMove)\n\n        selectedDriver.pixels = driverProgressinPixels\n        selectedDriver.data = driverData\n\n        selectedDriver.driverCoords = moves\n\n\n        this.state.driversArr[this.state.selectedDriverIndex] = selectedDriver\n        // console.log('update', this.state.driversArr)\n\n\n        this.setState({\n            driversArr: this.state.driversArr\n        })\n        // console.log('after', this.state.driversArr)\n    }\n    // on click set driver with coords and send to child\n    updateDriverWithCoords(){\n        // reset to zero\n        this._resetTruck()\n        // get pixels to new location\n        let coords = this._setStopCoords('driver',\n        this.state.driverFormX, this.state.driverFormY)\n        let selectedDriver = this.state.driversArr[this.state.selectedDriverIndex]\n        console.log('current driver', selectedDriver)\n        // console.log(coords)\n        // copy arr\n        let driversArr = [...this.state.driversArr]\n\n        // console.log(driversArr[this.state.selectedDriver])\n        // update the values in the object\n        driversArr[this.state.selectedDriverIndex].directions = coords.directions\n        driversArr[this.state.selectedDriverIndex].pixels = coords.pixels\n        // console.log(driversArr)\n        // set new driver vals\n        this.setState({\n            driversArr: driversArr\n        })\n        let that = this\n        setTimeout(function(){\n            console.log(that.state)\n\n        },500)\n    }\n    // calc up to driver position to color\n    colorCompleted(legID){\n        let selectedDriver = this.state.driversArr[this.state.selectedDriverIndex]\n    \tvar arr = this.state.legs.filter(leg => {\n    \t\treturn leg.legID === legID\n    \t})\n        console.log(selectedDriver)\n        //index for arr of cell nums\n        let holdingArrIndex = this._legIndex(arr[0].legID)\n        // console.log(holdingArrIndex)\n        // index for json with legs info\n        let dataIndex = this.state.legs.indexOf(arr[0])\n        // console.log('holding' ,holdingArrIndex)\n    \t//all previous legs to color\n        // var previousLegNames = this.state.legs.slice(0,index)\n\n        // get arr of all previous arrs to cell nums\n        // var previousLegArrs = this.state.holdAllLegColorArrs.slice(0, holdingArrIndex)\n        //get current arr leg of cell nums\n        // var currentLegArr = this.state.holdAllLegColorArrs[holdingArrIndex]\n        // console.log('previouslegs', previousLegArrs)\n        // console.log('currnt arr', currentLegArr)\n        // get current and next leg json info\n        let thisLeg = this.state.legs[dataIndex]\n\n        let legFirstStop = this.state.stops.filter(stop => {\n            return stop.name === thisLeg.startStop\n        })\n        let legLastStop = this.state.stops.filter(stop => {\n            return stop.name === thisLeg.endStop\n        })\n        // get first and end coords\n        let stopStartCoords = {\n            x: legFirstStop[0].x,\n            y: legFirstStop[0].y\n        }\n        let stopEndCoords = {\n            x: legLastStop[0].x,\n            y: legLastStop[0].y\n        }\n        // console.log(stopStartCoords)\n        // console.log(stopEndCoords)\n        // get diff to get number of moves\n        // let diffObj = this._absDiff(stopStartCoords, stopEndCoords)\n        // console.log(diff)\n        // percent driver is complete of leg\n        // let progress = parseInt(this.state.driver.legProgress)\n        // // takes number of moves and percent - returns number of moves that is partial of leg in coords\n        // let numToMove = this._percentToCoords(diffObj, progress)\n        // console.log('num to move', numToMove)\n        // console.log(this.state.legStartEndCellNums)\n        // cell nums\n        let { start, end } = this.state.legStartEndCellNums[holdingArrIndex]\n        // console.log('start/end', start, end)\n        // set startingCell and start x / y\n\n        // this.state.startingCellNumPartial: start/end cells\n        // 24034 34034\n        // this.partialLegStartCoords: start x/y\n        // {x: 35, y: 80}\n        // this.state.partialLegEndCoords: end\n        // {x: 35, y: 30}\n        var previousLegArrs = this.state.holdAllLegColorArrs.slice(0, holdingArrIndex)\n\n        this.setState({\n            startingCellNumPartial: start,\n            partialLegStartCoords: stopStartCoords,\n            partialLegEndCoords: stopEndCoords,\n            holdingCompletedArrs: [...previousLegArrs]\n        })\n        // console.log('startingCell', start)\n        // console.log('stop/start', stopStartCoords)\n        // console.log('partial leg end', stopEndCoords)\n        // console.log('all', [...previousLegArrs])\n\n\n        // console.log(this.state.holdingCompletedArrs)\n        // console.log(start, end)\n        // set state to start coords\n        // inout end coords\n        // this.state.driverCoords.x = 20\n        // this.state.driverCoords.y = 13\n        // console.log(selectedDriver)\n        // console.log(selectedDriver)\n        this.legStartEnd(selectedDriver.driverCoords.xToMove,selectedDriver.driverCoords.yToMove, 'partial')\n\n        // get start cell num\n\n        // let legStartEndCellNUm = this.state.legStartEndCellNums[index]\n        // console.log(legStartEndCellNUm)\n\n        // use calc to get num of cells in current arr/leg to color\n\n\n\n        \t//get cell of last leg in arr\n    \t// var chunk = this.state.holdAllLegColorArrs[index]\n    \t// var cell = chunk[chunk.length - 1]\n        // console.log('all leg arrs',this.state.holdAllLegColorArrs)\n        // console.log('single previous arr', chunk)\n        // console.log('last cell or last arr', cell)\n\t    //   // need to call color grid with a type condional to get the part btw legs\n    }\n    colorGrid(x, y, type){\n\n        // console.log(this.state.previousStopX)\n        // console.log(this.state.previousStopY)\n        // calc num of units to move based on prev position\n        let tempCellNumsArr = []\n\n\n        let tempX = x\n        let tempY = y\n        let tempCellNum\n        if(type === 'all'){\n            tempCellNum = this.state.startingCellNumAll\n        }\n\n        // console.log(tempX)\n        // convert based on next move using above function\n        tempX = this._numToMove(tempX, tempY, 'stop').tempX\n        tempY = this._numToMove(tempX, tempY, 'stop').tempY\n        // tempY = this._numToMove(tempX, tempY, 'stop').moveY\n        // console.log('tempx', tempX)\n        // console.log('tempy', tempY)\n\n        // on first move on grid only - for bottom corner\n        if(this.state.previousStopX === 0 && this.state.previousStopY  === 0){\n            tempX = tempX - 1\n            tempY = tempY - 1\n            tempCellNumsArr.push(tempCellNum)\n        }\n        // move in tandem while both vals exist\n        while(tempX && tempY){\n            // if last was les than current- do this\n            if(this.state.previousStopY < y){\n                tempCellNum = tempCellNum - 200\n                tempCellNumsArr.push(tempCellNum)\n            } else if(this.state.previousStopY > y){\n                tempCellNum = tempCellNum + 200\n                tempCellNumsArr.push(tempCellNum)\n            }\n            if(this.state.previousStopX < x){\n                tempCellNum = tempCellNum + 1\n                tempCellNumsArr.push(tempCellNum)\n\n            } else if(this.state.previousStopX > x){\n                tempCellNum = tempCellNum - 1\n                tempCellNumsArr.push(tempCellNum)\n            }\n            tempX = tempX - 1\n            tempY = tempY - 1\n        }\n         // axis - loop over the only one left X or Y\n        let loopAxis\n        (tempY ? loopAxis = tempY : loopAxis = tempX)\n        // if only on val left, move on its own\n        for (var i = 0; i < loopAxis; i++) {\n            if(tempY){\n                if(this.state.previousStopY < y){\n                    tempCellNum = tempCellNum - 200\n                    tempCellNumsArr.push(tempCellNum)\n\n                } else if(this.state.previousStopY > y){\n                    tempCellNum = tempCellNum + 200\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            } else if(tempX){\n                if(this.state.previousStopX < x){\n                    tempCellNum = tempCellNum + 1\n                    tempCellNumsArr.push(tempCellNum)\n                } else if(this.state.previousStopX > x){\n                    tempCellNum = tempCellNum - 1\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            }\n        }\n        // holdAllStopColorIndexes - cells for color or entire plots - spread out\n        if(type === 'all'){\n            // console.log(tempCellNumsArr)\n\n            this.setState({\n                previousStopX: x,\n                previousStopY: y,\n                startingCellNumAll: tempCellNum,\n                holdAllStopColorIndexes: [...this.state.holdAllStopColorIndexes, ...tempCellNumsArr]\n            })\n        }\n\n    }\n    // takes x y and determine start and end cells\n    legStartEnd(x,y, type){\n\n        let tempCellNumsArr = []\n\n        let tempX = x\n        let tempY = y\n        // start remains the same\n        let tempStartNum\n        // cell num changes with calcs\n        let tempCellNum\n\n\n        if(type === 'all'){\n            // on first move only\n            if(this.state.previousLegEndCell === 0){\n                tempStartNum = this.state.startingCellNumAll\n                tempCellNum = this.state.startingCellNumAll\n                // tempStartNum = this.state.startingCellNumAll\n            } else {\n                tempStartNum = this.state.previousLegEndCell\n                tempCellNum = this.state.previousLegEndCell\n            }\n        } else if(type === 'partial'){\n            // previous X and Y wrong in here\n\n            // console.log('previousX', this.state.previousLegEndCell)\n            // console.log('previousY', this.state.previousLegEndCell)\n            // start of leg\n            tempCellNum = this.state.startingCellNumPartial\n            // console.log('staring cell' ,this.state.startingCellNumPartial)\n            // set to start coords - it should compute to end coord form here\n            // console.log('leg start x', this.state.partialLegStartCoords.x)\n            // console.log('leg startStop y', this.state.partialLegStartCoords.y)\n            // console.log('prevX',this.state.previousLegX)\n            // console.log('prevXY',this.state.previousLegY)\n            // need to reset previous x and y\n            this.setState({\n                previousLegX: this.state.partialLegStartCoords.x,\n                previousLegY: this.state.partialLegStartCoords.y\n            })\n            // console.log('prevX',this.state.previousLegX)\n            // console.log('prevXY',this.state.previousLegY)\n            // console.log('to x', x)\n            // console.log('to y', y)\n            // console.log(this.state.previousStopX)\n            // console.log(this.state.previousStopY)\n            // console.log('previous',this.state.partialLegStartCoords)\n            // console.log('previousx', this.state.previousStopX)\n            // console.log('previousy', this.state.previousStopY)\n            // console.log('currentx ', x)\n            // console.log('currenty', y)\n\n\n\n        }\n\n        // console.log('start temp', tempCellNum)\n        // console.log('staring cell', tempStartNum)\n        // convert based on next move using above function\n        ({ tempX, tempY } = this._numToMove(tempX, tempY, 'leg'))\n        // tempY = this._numToMove(tempX, tempY, 'leg').tempY\n        // console.log('x to move',tempX)\n        // console.log('y to move', tempY)\n        // on first move on grid only - for bottom corner\n        if(this.state.previousLegX === 0 && this.state.previousLegY  === 0){\n            tempX = tempX - 1\n            tempY = tempY - 1\n            tempCellNumsArr.push(tempCellNum)\n        }\n        // move in tandem while both vals exist\n        while(tempX && tempY){\n            // if last was les than current- do this\n            if(this.state.previousLegY < y){\n                tempCellNum = tempCellNum - 200\n                tempCellNumsArr.push(tempCellNum)\n            } else if(this.state.previousLegY > y){\n                tempCellNum = tempCellNum + 200\n                tempCellNumsArr.push(tempCellNum)\n            }\n            if(this.state.previousLegX < x){\n                tempCellNum = tempCellNum + 1\n                tempCellNumsArr.push(tempCellNum)\n\n            } else if(this.state.previousLegX > x){\n                tempCellNum = tempCellNum - 1\n                tempCellNumsArr.push(tempCellNum)\n            }\n            tempX = tempX - 1\n            tempY = tempY - 1\n        }\n         // axis - loop over the only one left X or Y\n        let loopAxis\n        (tempY ? loopAxis = tempY : loopAxis = tempX)\n        // if only on val left, move on its own\n        for (var i = 0; i < loopAxis; i++) {\n            if(tempY){\n\n                if(this.state.previousLegY < y){\n                    tempCellNum = tempCellNum - 200\n\n                    tempCellNumsArr.push(tempCellNum)\n\n                } else if(this.state.previousLegY > y){\n                    tempCellNum = tempCellNum + 200\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            } else if(tempX){\n\n                if(this.state.previousLegX < x){\n                    tempCellNum = tempCellNum + 1\n                    tempCellNumsArr.push(tempCellNum)\n                } else if(this.state.previousLegX > x){\n                    tempCellNum = tempCellNum - 1\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            }\n        }\n        // console.log('last', tempCellNum)\n        let legCellNums = {\n            start: tempStartNum,\n            end: tempCellNum\n        }\n        // console.log('coords', legCellNums)\n        // each array b4 being pushing into main one\n        // console.log('tempCellNumsArr', tempCellNumsArr)\n        // console.log('x', x)\n        // console.log('y', y)\n        // - make this previousLast\n        if(type === 'all'){\n            this.setState({\n                previousLegEndCell: tempCellNum,\n                previousLegX: x,\n                previousLegY: y,\n                legStartEndCellNums:[...this.state.legStartEndCellNums,legCellNums],\n                holdAllLegColorArrs: [...this.state.holdAllLegColorArrs, tempCellNumsArr]\n\n            })\n            // console.log('all', this.state.holdAllLegColorArrs)\n            // console.log('end of run x', this.state.previousLegX)\n            // console.log('end of run y', this.state.previousLegY)\n        } else if(type === 'partial'){\n            // console.log('cells arr',tempCellNumsArr)\n            this.setState({\n                previousStopX: x,\n                previousStopY: y,\n                startingCellNumPartial: tempCellNum,\n                holdingCompletedArrs:[...this.state.holdingCompletedArrs, tempCellNumsArr]\n\n            })\n            // console.log('complete', this.state.holdingCompletedArrs)\n\n        }\n    }\n\n    colorAllStops(){\n        // console.log('fired')\n        // let arr = [1,2,3,4,5]\n        // let stops = [\n        //     {x:20, y:10},\n        //     {x: 20, y: 20}\n        //     // {x: 25, y: 30},\n        //     // {x: 25, y: 80}\n        // ]\n        // let that = this\n        // stops.map((stop, index) => {\n        //         setTimeout(function(){\n        //             that.colorGrid(stop.x, stop.y)\n            // console.log(index + 1)\n            // console.log(stops.length)\n                // if((index + 1) === that.state.stops.length){\n                //     console.log('push')\n                     \t// that.setState({\n                       // \tpushToChildArr:that.state.holdingAllIndexes\n                       // })\n                //  }\n            //     },100*(index))\n            // })\n\n            this.setState({\n                finalStopColorArr: this.state.holdAllStopColorIndexes\n            })\n            // console.log(this.state.finalStopColorArr)\n        // on click push to child state\n    }\n    // on click pass props to chilc\n    colorCompletedStops(){\n            console.log(this.state.holdingCompletedArrs)\n            let merged = [].concat.apply([], this.state.holdingCompletedArrs);\n            console.log(merged)\n            this.setState({\n                finalCompletedColorsArr: merged\n            })\n    }\n    // takes driver coords and finds the leg start\n    _getLegStartfromCoords(){\n        let selectedDriver = this.state.driversArr[this.state.selectedDriverIndex]\n        let coords = selectedDriver.driverCoords\n        console.log('driver coords', coords)\n        // if x & y is between the stops\n        let firstStop = this.state.stops.filter((coord, index) => {\n            let stop1 = this.state.stops[index  ]\n            let stop2 = this.state.stops[index + 1]\n            // console.log('stop1', stop1)\n            // console.log('stop2', stop2)\n            // console.log('x',coords.x)\n            // console.log('y', coords.y)\n        \tif(stop2 === undefined) return\n        \tif( //x/y are both btw\n                (\n                    ((coords.y > stop1.y && coords.y < stop2.y) ||\n                    (coords.y < stop1.y && coords.y > stop2.y)) &&\n                    ((coords.x > stop1.x && coords.x < stop2.x) ||\n                    (coords.x < stop1.x && coords.x > stop2.x))\n                )\n            ){\n                console.log('both are btw')\n                    return coord\n            } else if(\n                // y is bwn and x is equal\n                (\n                    ((coords.y > stop1.y && coords.y < stop2.y) ||\n                    (coords.y < stop1.y && coords.y > stop2.y))\n                    &&\n                    (coords.x === stop1.x && coords.x === stop2.x)\n                )\n            ){\n                console.log('y btw. x equal' )\n                    return coord\n            } else if(\n                // x is bwn and y is equal\n                (\n                    ((coords.x > stop1.x && coords.x < stop2.x) ||\n                    (coords.x < stop1.x && coords.x > stop2.x))\n                    &&\n                    (coords.y === stop1.y && coords.y === stop2.y)\n                )\n            ){\n                console.log('x btw. y equal' )\n\n                return coord\n            } else if(\n                //coords are exact match\n                (\n                    coords.x === stop1.x && coords.y === stop1.y\n                )\n\n            ){\n                console.log('both equal')\n                return coord\n            } else {\n                // not within the stops\n                return null\n            }\n        })\n            console.log('return firstStop', firstStop)\n        return firstStop\n    }\n    // takes first stop obj, driver coords obj, and abs diff of a single stops axis\n    _findPercentFromDriverCoords(firstStop, driverCoords, yAbsDiff, xAbsDiff){\n        let x1 = parseInt(firstStop.x)\n        let y1 = parseInt(firstStop.y)\n        let x2 = parseInt(driverCoords.x)\n        let y2 = parseInt(driverCoords.y)\n        console.log(driverCoords)\n        // console.log('1', x1)\n        // console.log('2', y1)\n        // console.log('3', x2)\n        // console.log('4', y2)\n        let xDiff\n        let yDiff\n        // console.log('xAbsDiff', xAbsDiff)\n        // console.log('yAbsDiff', yAbsDiff)\n        // find number moved from last stop\n        if(x1 < x2){\n            // console.log('run 1')\n            // console.log(firstStopOfLeg[0].x)\n            // console.log(lastStopOfLeg[0].x)\n            xDiff = x2 - x1\n            // console.log(xToMove)\n        } else if(x1 > x2){\n            // console.log('run 2')\n            xDiff = x1 - x2\n        }  else if(x1 === x2){\n            xDiff = 0\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        if(y1 < y2){\n            // console.log('run 1')\n            yDiff = y2 - y1\n        } else if(y1 > y2){\n            // console.log('run 2')\n            yDiff = y1 - y2\n        } else if(y1 === y2){\n            yDiff = 0\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        // console.log('xDiff', xDiff)\n        // console.log('yDiff', yDiff)\n        // divide number moved so far in leg by total number in leg\n        let xPercent\n        let yPercent\n        // check for zero vals\n        if(xDiff === 0){\n            xPercent = 0\n        }\n        if(yDiff === 0){\n            yPercent = 0\n        }\n        if(xDiff && xDiff !== 0){\n            // console.log('xdiff', xDiff)\n            xPercent = xDiff / xAbsDiff\n        }\n        if(yDiff && yDiff !== 0){\n            // console.log('yDiff',yDiff)\n            yPercent = yDiff / yAbsDiff\n        }\n        let finalPercent\n        // console.log(xPercent)\n        // console.log(yPercent)\n        // if one val is missing use the other alone\n        if(!xPercent || !yPercent){\n            if(xPercent){\n                return finalPercent = xPercent * 100\n            } else if(yPercent){\n                return finalPercent = yPercent * 100\n            }\n        }\n        // it both are zero then zero percent\n        if(xPercent === 0 && yPercent === 0){\n            return finalPercent = 0\n        }\n\n        // console.log('x%',xPercent)\n        // console.log('y%',yPercent)\n        //use the larger leg to updaet val - TODO: make both percents equal so driver fits back into grid\n        if(xAbsDiff > yAbsDiff){\n            return finalPercent = xPercent\n        } else if(xAbsDiff < yAbsDiff){\n            return finalPercent = yPercent\n            // if equal use the larger percent\n        } else if(xAbsDiff === yAbsDiff){\n            if(xPercent >= yPercent){\n                return finalPercent = xPercent\n            } else {\n                return finalPercent = yPercent\n            }\n        } else {\n            console.error('An error occured in the percentage calcs')\n            return\n        }\n    }\n    // takes driver coords from state and sets new progress and leg\n    updateDriverData(){\n        let selectedDriver = this.state.driversArr[this.state.selectedDriverIndex]\n        console.log('selectedDriver', this.state.selectedDriverIndex)\n        let firstStop = this._getLegStartfromCoords()[0]\n        // only works with map stops!\n        if(!firstStop){\n            console.error('Not a map stop')\n            return false\n\n        }\n        let firstStopIndex = this.state.stops.indexOf(firstStop)\n        let secondStop = this.state.stops[firstStopIndex+1]\n        let diff = this._absDiff(firstStop, secondStop)\n        // run once for x and for y\n        let percent = this._findPercentFromDriverCoords(firstStop, selectedDriver.driverCoords, diff.yDiff, diff.xDiff)\n        console.log('percent', percent)\n        console.log(firstStop.name)\n        let currentLeg = this.state.legs.filter(leg => {\n            return leg.startStop === firstStop.name\n        })\n        let newPositionWpercent = {\n            activeLegID: currentLeg[0].legID,\n            legProgress: percent.toString()\n        }\n        console.log(newPositionWpercent)\n        let driversArr = [...this.state.driversArr]\n        // console.log(driversArr[this.state.selectedDriverIndex])\n        console.log(selectedDriver)\n        // update the values in the object\n\n        selectedDriver.data = newPositionWpercent\n\n        console.log(selectedDriver)\n        driversArr[this.state.selectedDriverIndex] = selectedDriver\n        console.log(driversArr)\n        this.setState({\n            driversArr: driversArr,\n            selectedDriver: newPositionWpercent\n        })\n        // console.log(newPositionWpercent)\n\n        // console.log('new driver state', this.state.selectedDriver)\n        return true\n    }\n    _resetTruck(){\n        this.setState({\n                finalDriverMoveObj: {\n                directions: {\n                    xDir: \"left\",\n                    yDir: \"bottom\"\n                },\n                pixels:{\n                    moveX: 0,\n                    moveY: 0\n                }\n            }\n        })\n    }\n    // renders all truck instances\n    renderTrucks(props){\n        if(this.state.driversArr){\n                return this.state.driversArr.map((driverData,i) => {\n                // console.log(driverData)\n                return <Truck coords={driverData} key={i} colors={this.state.colors} counter={this.state.createCounter}/>\n            })\n        } else {\n            return null\n        }\n\n    }\n    handleStyle(){\n        if(this.state.floatToggle){\n            if(this.state.utilsTop){\n                return {\n                    bottom: this.state.utilsTop.toString() + \"px\"\n                }\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n\n    }\n     render() {\n    \treturn(\n            <main className=\"page-container\">\n\n                <div className=\"grid-container\" style={this.handleStyle.bind(this)()}>\n                    <div className=\"grid\">\n                        {this.renderTrucks()}\n\n\n                        <Stop coords={this.state.stopsDirsArr}/>\n                        <Box\n                            toRender={this.state.boxesToRender} stopsColor={(this.state.finalStopColorArr.length ? this.state.finalStopColorArr  : null)}\n                            legsColor={(this.state.finalLegColorObj ? this.state.finalLegColorObj : null)}\n                            completeColor={(this.state.finalCompletedColorsArr.length ? this.state.finalCompletedColorsArr : null)}\n                            type={this.state.colorType}\n                            legColorsCounter={this.state.legColorsCounter}\n                            completedColorsCounter={this.state.completedColorsCounter}\n                            allColorsCounter={this.state.allColorsCounter}\n                            selectedDriver={this.state.selectedDriverIndex}\n                        />\n\n                    </div>\n                </div>\n                <div className={`${this.state.floatToggle? \"float-toggle\" :\"\"} utils-container`}>\n                    <div className=\"driver-controls\">\n                        <Tabs\n                            onChange={this.handleChange.bind(this)}\n                            onSubmit={this.handleFormSubmit.bind(this)}\n                            onClick={this.handleClick.bind(this)}\n                            values={{x:this.state.driverFormX, y:this.state.driverFormY}}\n                            legs={this.state.legs ? this.state.legs : null}\n                            texts={this.state.texts}\n                            driversArr={this.state.driversArr.length ? this.state.driversArr : null}\n                            colors={this.state.colors}\n                            selectedDriver={this.state.selectedDriverIndex}\n                            />\n                            <i className=\"fa fa-angle-right\"></i>\n                            <Snackbar snackbarOpen={this.state.snackbarOpen} onClick={this.handleClick.bind(this)}/>\n                    </div>\n                </div>\n            </main>\n        )\n    }\n    toggleSnackbar(){\n        this.state.snackbarOpen = !this.state.snackbarOpen\n        this.setState({\n            snackbarOpen: this.state.snackbarOpen\n        })\n        console.log(this.state.snackbarOpen)\n        return\n    }\n    // https://stackoverflow.com/questions/16863917/check-if-class-exists-somewhere-in-parent-vanilla-js/19049101\n    hasParentClass(element, checkClass){\n        console.log(element,checkClass)\n        if (element.className.split(' ').indexOf(checkClass)>=0) return true;\n        return element.parentNode && this.hasParentClass(element.parentNode, checkClass);\n    }\n    handleClick(event){\n        if(!event) return\n        // console.log(event)\n        // For TAB clicks - sending strings back here as return vals\n        if(typeof event === 'string'){\n            // to remove drivers from tabs\n            if(event.includes('icon-click') && event.includes('DRIVER')){\n                // don't remove single driver\n                if(this.state.driversArr.length > 1){\n                    this.removeDriver(event)\n                }\n                // to detect which driver is selected\n            } else if(event.includes('DRIVER') && !event.includes('icon-click')){\n                // minus one for zero index\n                let driverIndex = parseInt(event[event.length - 2]) - 1\n                // change to another driver\n                this.changeDriver('change-driver', driverIndex)\n\n            }\n            // if events and not strings\n        } else {\n            if(event.target.classList.contains('add-button')){\n                event.stopPropagation()\n                // call add new driver\n                    this.addNewDriver()\n\n            } else if(event.target.classList.contains('secondary-button')){\n            event.stopPropagation()\n                if(event.target.dataset.number === \"1\"){\n                    this.colorAllStops()\n                    // console.log(this.state.allColorsCounter)\n                    this.setState({\n                        allColorsCounter: this.state.allColorsCounter + 1,\n                        colorType: \"all\"\n                    })\n                } else if(event.target.dataset.number === \"2\"){\n                    this.colorCompletedStops()\n                    this.setState({\n                        completedColorsCounter: this.state.completedColorsCounter + 1,\n                        colorType: \"complete\"\n                    })\n                }\n                // if button and has parent class of snackbar\n            } else if(event.target.type === 'button' && this.hasParentClass(event.target, \"snackbar\") ){\n                console.log('oks')\n                    // send this to child to close\n                    this.setState({\n                        snackbarOpen: false\n                    })\n\n            }\n        }\n    }\n    handleDropdownChange(e) {\n        console.log(e.target.name)\n        if(e.target.name === 'driver-select'){\n            console.log('here')\n            this.setState({driverLegInput: e.target.value})\n        } else if(e.target.name === 'color-select'){\n            console.log('he')\n            this.setState({\n                value: e.target.value,\n                legToColorID: e.target.value\n            })\n        }\n    }\n    onDropdownSubmit(event) {\n        let selectedDriver = this.state.driversArr[this.state.selectedDriverIndex]\n        // console.log(selectedDriver)\n        event.preventDefault()\n\n        if(event.target.name === 'driver-dropdown'){\n            // user needs to choose a leg else return\n            if(!this.state.driverLegInput) return\n            let progress\n            if(!this.state.driverProgressInput){\n                progress = 0\n            } else {\n                progress = this.state.driverProgressInput\n            }\n            let updatedData = {\n                activeLegID: this.state.driverLegInput,\n                legProgress: progress\n            }\n            selectedDriver.data = updatedData\n            //update driver position in state\n            this.setState({\n                driversArr: this.state.driversArr\n            })\n\n            let that = this\n            setTimeout(function(){\n                // that.addNewDriver()\n                that.updateDriverwithData(selectedDriver.data)\n                that.colorCompleted(selectedDriver.data.activeLegID)\n                console.log(that.state)\n            },100)\n\n        } else if(event.target.name === 'color'){\n            this.colorLeg(this.state.legToColorID)\n\n            // console.log(this.state.holdingCompletedArrs)\n            // let merged = [].concat.apply([], this.state.holdingCompletedArrs);\n            // console.log(merged)\n            // this.setState({\n            //     finalCompletedColorsArr: merged\n            // })\n\n        }\n\n    }\n    // hold vals in input until next entered\n    handleChange(evt) {\n        // console.log(evt.target)\n        // console.log(evt.target.name)\n        if(evt.target.name === 'x'){\n            this.setState({\n                driverFormX: evt.target.value\n            })\n\n        } else if(evt.target.name === 'y'){\n            this.setState({\n                driverFormY: evt.target.value,\n\n            })\n        } else if(evt.target.name === 'position-select'){\n\n        } else if(evt.target.name === 'driver-select'){\n            this.setState({driverLegInput: evt.target.value})\n        } else if(evt.target.name === 'progress-input'){\n            console.log('hi')\n            this.setState({driverProgressInput:evt.target.value})\n        } else if(evt.target.name === 'float-toggle'){\n            this.state.floatToggle = !this.state.floatToggle\n\n            this.setState({\n                floatToggle: this.state.floatToggle\n            })\n            let that = this\n            // go to bottom on toggle\n            setTimeout(function(){\n                that.scrollToBottom()\n            })\n        }\n\n        if(evt.target.name === 'driver-select'){\n            this.setState({driverLegInput: evt.target.value})\n        } else if(evt.target.name === 'color-select'){\n            this.setState({\n                value: evt.target.value,\n                legToColorID: evt.target.value\n            })\n        }\n\n\n    }\n    handleFormSubmit(event) {\n        console.log(event.target.name)\n        event.preventDefault();\n        let currentDriver = this.state.driversArr[this.state.selectedDriverIndex]\n        console.log(this.state.driversArr)\n        console.log(this.state.selectedDriverIndex)\n\n        // update coords\n        //set driver to those\n            //UPDATE STATE DATA\n            if(event.target.name === 'driver-dropdown' || event.target.name === 'color'){\n                this.onDropdownSubmit(event)\n\n            } else if(event.target.name === 'driver-form') {\n                let formData = {}\n                // set to new input. If blank use the previous one\n                if(this.state.driverFormX){\n                    formData['x'] = parseInt(this.state.driverFormX)\n                } else {\n                    formData['x'] = currentDriver.driverCoords.x\n                }\n                if(this.state.driverFormY){\n                    formData['y'] = parseInt(this.state.driverFormY)\n                } else {\n                    formData['y'] = currentDriver.driverCoords.y\n                }\n                console.log(currentDriver)\n                    currentDriver.driverCoords = formData\n                console.log(this.state.driversArr)\n                this.setState({\n                    driverCoords: formData\n                })\n            //ACTUALLY MOVE DRIVER\n            this.updateDriverWithCoords()\n            let that = this\n            setTimeout(function(){\n                //UPDATE DRIVER DATA\n                // returns false if not a stop\n                let result = that.updateDriverData()\n                if(!result){\n                    // not part of route\n                    that.toggleSnackbar()\n                    return\n                }\n                that.colorCompleted(that.state.selectedDriver.activeLegID)\n                console.log(that.state.selectedDriver.activeLegID)\n                console.log(that.state)\n            },100)\n        }\n    }\n\n    _legIndex(input){\n        let index\n        switch(input){\n            // pre-stop\n            case 'ZZ':\n                index = 0\n                break\n            case 'AB':\n                index = 1\n                break\n            case 'BC':\n                index = 2\n                break\n            case 'CD':\n                index = 3\n                break\n            case 'DE':\n                index = 4\n                break\n            case 'EF':\n                index = 5\n                break\n            case 'FG':\n                index = 6\n                break\n            case 'GH':\n                index = 7\n                break\n            case 'HI':\n                index = 8\n                break\n            case 'IJ':\n                index = 9\n                break\n            case 'JK':\n                index = 10\n                break\n            case 'KL':\n                index = 11\n                break\n            default:\n                console.error('Nothing in switch')\n                break\n        }\n        return index\n    }\n    colorLeg(input){\n        // console.log(this.state.finalLegColorObj)\n        let that = this\n        // - get val from Dropdown-\n        // change it to an index\n\n        let index = this._legIndex(input)\n        // get leg using index out of array\n        let leg = this.state.holdAllLegColorArrs[index]\n        // set state on child to change the color\n        let legObj = {leg, index}\n        console.log(legObj)\n        this.setState({\n            finalLegColorObj: legObj,\n            legColorsCounter: this.state.legColorsCounter + 1,\n            colorType: \"leg\"\n        })\n    }\n\n    // set coords in pxs of plots\n    _setStopCoords(type,x,y){\n        // console.log(type)\n        let that = this\n        let coordsArr = []\n\n            // filter out undefined\n            if(type === 'stop'){\n                setTimeout(function(){\n                if(that.state.stops.length > 0){\n                    that.state.stops.forEach(stop => {\n                        // console.log(stop.x, stop.y)\n                        let pixels = that._convertToPixels(\n                            stop.x, stop.y\n                        )\n                        let coords = {\n                            pixels: pixels,\n                            directions: {\n                                xDir: \"left\",\n                                yDir: \"bottom\"\n                            }\n                        }\n\n                        coordsArr.push(coords)\n                    })\n                }\n                that.setState({\n                    stopsDirsArr: coordsArr\n                })\n            },1050)\n            } else if(type === 'driver'){\n                let pixels = that._convertToPixels(\n                    x, y\n                )\n                let coords = {\n                    pixels: pixels,\n                    directions: {\n                        xDir: \"left\",\n                        yDir: \"bottom\"\n                    }\n                }\n                return coords\n\n            }\n\n\n    }\n    scrollToBottom(){\n        // console.log('scroll bottom')\n        window.scrollTo(0,document.body.scrollHeight)\n    }\n    componentDidMount() {\n        let that = this\n\n        this.setState({\n            loadingDataArr: [...this.state.loadingDataArr, driver]\n        })\n        // get start pos\n        // - if x is greater then moving right\n        // -when stoped get pos\n        // - if x is greater, right\n        // - if y is greater left\n        //\n        this.scrollToBottom()\n        let utils = document.querySelector('.utils-container')\n        let grid = document.querySelector('.grid-container')\n        let utilsTop\n        setTimeout(function(){\n            that.setState({\n                utilsTop: utils.offsetHeight\n            })\n        },500)\n\n        setTimeout(function(){\n            // console.log(that.state.legs)\n            that.state.stops.map(stop => {\n                    that.legStartEnd(stop.x, stop.y,'all')\n                    that.colorGrid(stop.x, stop.y, 'all')\n\n            })\n            // call these with the default driver on mount\n            that.addNewDriver()\n            that.updateDriverwithData(that.state.loadingDataArr[0])\n            that.colorCompleted(that.state.loadingDataArr[0].activeLegID)\n\n            // that.pleted(that.state.driverCoords.y)\n            // console.log('state',that.state)\n        },100)\n\n\n\n        // call to set stops and truck\n        this._setStopCoords('stop')\n    }\n}\n\nexport default Grid\n","import React, {\n\tComponent\n} from \"react\";\nimport \"./App.css\";\nimport Grid from './components/Grid'\n\nclass App extends Component {\n\n        render() {\n\n        \treturn(<Grid  /> )\n        }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}