{"version":3,"sources":["components/Box.js","components/material/Icon.js","components/Stop.js","components/Cursor.js","components/material/MaterialSelect.js","components/material/MaterialButton.js","components/Dropdown.js","components/material/MaterialForm.js","components/material/Accordion.js","components/material/AddButton.js","components/material/Checkbox.js","components/material/Tabs.js","components/material/Snackbar.js","components/material/Slider.js","components/grid_utils.js","components/material/Select.js","components/material/Modal.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allColored","legColored","completeColored","allColorsCounter","legColorsCounter","completedColorsCounter","previousLegIndex","BoxMarkup","bind","assertThisInitialized","i","_this2","toRender","map","obj","result","type","allColorsAddLogic","allColorsRemoveLogic","legColorsAddLogic","legColorsRemoveLogic","completedColorsAddLogic","completedColorsRemoveLogic","react_default","a","createElement","key","id","console","log","setState","stopsColor","hasStopColor","length","includes","legsColor","hasLegColor","leg","completeColor","hasCompletionColor","input","idStr","concat","className","selectedDriver","prevProps","prevState","toggleColor","error","index","Fragment","renderBoxes","React","Component","withStyles","theme","root","display","justifyContent","alignItems","icon","margin","spacing","unit","color","fontSize","position","right","top","iconHover","&:hover","black","classes","Icon_default","ref","tabIndex","style","styles","strType","Stop","coords","coord","_styles","defineProperty","directions","xDir","pixels","moveX","toString","yDir","moveY","toggleStopNames","esm","_ref","placement","_ref2","arrowProps","objectSpread","backgroundColor","borderRadius","marginLeft","data-placement","Cursor","_style","driverID","colors","show","material_Icon","MaterialSelect","labelWidth","handleChange","name","event","target","value","ReactDOM","findDOMNode","InputLabelRef","offsetWidth","FormControl_default","variant","formControl","InputLabel_default","htmlFor","Select_default","native","onChange","OutlinedInput_default","legs","legID","flexWrap","minWidth","selectEmpty","marginTop","button","Button_default","size","data-number","buttonNumber","onClick","text","container","textField","marginRight","width","dense","menu","Dropdown","TextField_default","driverProgressInput","label","placeholder","ev","_this3","onSubmit","texts","driverText","colorText","material_MaterialSelect","renderInput","material_MaterialButton","MaterialForm","formName","formname","values","graphSize","x","y","Typography_default","addedClass","noValidate","autoComplete","renderFormType","buttonsize","Accordion","expanded","panel","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","heading","secondaryHeading","ExpansionPanelDetails_default","material_MaterialForm","components_Dropdown","typography","pxToRem","flexBasis","flexShrink","palette","secondary","fab","extendedIcon","Fab_default","aria-label","number","iconType","Add_default","src","renderIcon","green","&$checked","checked","CheckboxLabels","checkedA","checkedB","checkedC","FormGroup_default","row","FormControlLabel_default","control","Checkbox_default","checkedState","TabContainer","component","padding","children","SimpleTabs","tabs","numberOfTabs","hovered","driverNum","indexToRemove","e","addTab","driverIndex","parseInt","innerText","substring","iconClick","cursor","subtractTab","rect","getBoundingClientRect","clientX","left","clientY","stopPropagation","parentNode","classList","contains","dataset","cursorArr","AppBar_default","Tabs_default","indicator","handleTabsClick","tab","Tab_default","data-tip","data-key","onMouseMove","mouseEvent","handleRemoveButtonClick","dist_default","material_AddButton","handleAddButtonClick","material_Checkbox","checkedProps","material_Accordion","flexGrow","background","paper","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","MySnackbarContentWrapper","dark","primary","amber","iconVariant","opacity","message","onClose","other","objectWithoutProperties","Icon","SnackbarContent_default","assign","classNames","aria-describedby","action","IconButton_default","close","Close_default","CustomizedSnackbars","open","handleClick","handleClose","reason","Snackbar_default","anchorOrigin","vertical","horizontal","snackbarOpen","autoHideDuration","SimpleSlider","Slider_default","max","step","slider","aria-labelledby","utils","_convertToPixels","totalX","totalY","_numToMove","tempX","Math","abs","previousStopX","tempY","previousStopY","previousLegX","previousLegY","_calcStartingCell","sizeObj","_absDiff","firstCoordsObj","secondCoordsObj","xDiff","yDiff","_getDriverCoords","firstLegStopObj","lastLegStopObj","numToMoveObj","xToMove","yToMove","x1","x2","y1","y2","xNum","yNum","_percentToCoords","diffObj","percent","floor","_findPercentFromDriverCoords","firstStop","driverCoords","yAbsDiff","xAbsDiff","xPercent","yPercent","_makePlotJson","plotsArr","String","fromCharCode","SimpleSelect","xSelect","ySelect","inputProps","ref1","MenuItem_default","cells","cell","ref2","SimpleModal","handleOpen","makeRange","num","Array","from","v","that","setTimeout","handleSubmit","cellsrange","Modal_default","transform","handleSelectChange","setGraphSize","material_Select","SimpleModalWrapped","renderPlotsList","plots","plot","renderInputModal","boxShadow","shadows","outline","Grid","_callLegs","asyncToGenerator","regenerator_default","mark","_callee","response","body","wrap","_context","prev","next","fetch","sent","json","status","Error","abrupt","stop","_callStops","_callee2","_context2","_callDriver","_callee3","_context3","modalState","storeGraphSize","plotObjs","tempPlotObj","cancelSlide","sliderSlicedChunk","previousXSlideCoord","previousYSlideCoord","iconStartAtfirstStop","sliderIndex","initialSliderChange","sliderCoordsArrs","floatToggle","showStopNames","colorType","loadingDataArr","cursorIndex","createCounter","stops","jsonStops","stopsCopy","legToColorID","cursorFormX","cursorFormY","cursorLegInput","cursorInputProgress","currentCursor","driverLegStart","positionSelect","startingCellNumAll","startingCellNumPartial","previousLegEndCell","partialLegStartCoords","partialLegEndCoords","boxesToRender","holdAllStopColorIndexes","holdAllLegColorArrs","holdingCompletedArrs","finalStopColorArr","finalLegColorObj","finalCompletedColorsArr","finalDriverMoveObj","finalSliderCoords","legStartEndCellNums","getWindowOffset","document","documentElement","setProperty","setCSSvars","calcRowVariaion","newCursorObj","arr","push","allCursors","increaseCursorIdindex","changeCursor","cursorID","cursorName","filter","toLowerCase","indexOf","splice","driverData","legName","activeLegID","firstLetter","secondLetter","firstStopOfLeg","lastStopOfLeg","progress","legProgress","numToMove","_utils$_getDriverCoor","moves","driverProgressinPixels","data","toConsumableArray","_resetTruck","_setStopCoords","updateDriverData","holdingArrIndex","_legIndex","dataIndex","thisLeg","legFirstStop","startStop","legLastStop","endStop","stopStartCoords","stopEndCoords","_this$state$legStartE","start","previousLegArrs","end","slice","legStartEnd","moveRowCells","tempCellNum","loopAxis","tempCellNumsArr","tempStartNum","_this$_numToMove","legCellNums","merged","apply","stop1","stop2","undefined","_getLegStartfromCoords","firstStopIndex","secondStop","diff","newPositionWpercent","isArray","components_Cursor","counter","utilsTop","marginBottom","material_Modal","sqrt","handleStyle","renderCursor","components_Stop","stopsDirsArr","components_Box","material_Tabs","material_Snackbar","evt","sliderDiff","previousState","currentState","handleIndexValue","moveDriver","slideIndex","updateDriverWithCoords","flat","getPreviousSliderState","looper","element","checkClass","split","parentElement","hasParentClass","cursorArrCopy","removeDriver","tabClickedIndex","toggleShowCursor","addNewCursor","colorAllStops","colorCompletedStops","selectedCursor","preventDefault","updatedData","updateCursorwithData","colorCompleted","colorLeg","currentTarget","xVal","yVal","offSet","toggleStartCheckbox","nextSibling","receivePlotData","handleModalOpenClose","setSliderCoords","tempSliderIndex","lenght","window","scrollTo","scrollHeight","querySelector","grid","offsetHeight","innerHeight","createGraph","scrollToBottom","xSlideCoord","ySlideCoord","currentSmall","previousSmall","longerArr","shorterArr","storeArr","xArr","yArr","lastXarr","lastYarr","j","_obj","_obj2","_obj3","keys","startObj","endObj","_this$_numBetweenStop","_numBetweenStops","xIsInteger","yIsInteger","alert","onDropdownSubmit","formData","toggleSnackbar","handlePlotLoading","_this4","legConstructor","colorGrid","then","res","legObj","coordsArr","forEach","App","components_Grid","Boolean","location","hostname","match","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcfd132c.chunk.js","sourcesContent":["import React from \"react\";\n\n// takes the num of boxes/cells to be produced\nclass Box extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      allColored: false,\n      legColored: false,\n      completeColored: false,\n      allColorsCounter: 0,\n      legColorsCounter: 0,\n      completedColorsCounter: 0,\n      previousLegIndex: \"\"\n    }\n    this.BoxMarkup = this.BoxMarkup.bind(this)\n  }\n  renderBoxes(i) {\n    if (this.props.toRender) {\n      let { toRender } = this.props\n      return toRender.map((obj, i) => {\n        let result\n        switch (this.props.type) {\n          case \"all\":\n            if (!this.state.allColored) {\n              result = this.allColorsRemoveLogic(i)\n            } else if (this.state.allColored) {\n              result = this.allColorsAddLogic(i)\n            }\n            break\n          case \"leg\":\n            if (!this.state.legColored) {\n              result = this.legColorsRemoveLogic(i)\n            } else if (this.state.legColored) {\n              result = this.legColorsAddLogic(i)\n            }\n            break\n          case \"complete\":\n            if (!this.state.completeColored) {\n              result = this.completedColorsRemoveLogic(i)\n            } else if (this.state.completeColored) {\n              result = this.completedColorsAddLogic(i)\n            }\n            break\n          default:\n            // on first render just run markup\n            result = <this.BoxMarkup key={i} id={i}/>\n            break\n        }\n        return result\n      });\n    }\n  }\n  toggleColor(type) {\n    if (type === \"all\") {\n      this.state.allColored = !this.state.allColored\n      console.log(\"opposite\", this.state.allColored)\n      this.setState({\n        allColored: this.state.allColored\n      })\n    } else if (type === \"leg\") {\n      this.state.legColored = !this.state.legColored\n      console.log(\"opposite\", this.state.legColored)\n      this.setState({\n        legColored: this.state.legColored\n      })\n    } else if (type === \"complete\") {\n      this.state.completeColored = !this.state.completeColored\n      console.log(\"opposite\", this.state.completeColored)\n      this.setState({\n        completeColored: this.state.completeColored\n      })\n    }\n  }\n  allColorsAddLogic(i) {\n    let { stopsColor } = this.props\n    let hasStopColor = (() => {\n      if (!stopsColor || !stopsColor.length || !stopsColor.includes(i))\n        return false\n      return true\n    })();\n    return <this.BoxMarkup hasStopColor={hasStopColor} key={i} id={i} />\n  }\n  allColorsRemoveLogic(i) {\n    let { stopsColor } = this.props\n    let hasStopColor = (() => {\n      if (stopsColor && stopsColor.includes(i)) return false\n    })();\n    return <this.BoxMarkup hasStopColor={hasStopColor} key={i} id={i} />\n  }\n  legColorsAddLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (!legsColor || !legsColor.length || !legsColor.includes(i))\n        return false\n      return true\n    })();\n    return <this.BoxMarkup hasLegColor={hasLegColor} key={i} id={i} />\n  }\n  legColorsRemoveLogic(i) {\n    let { legsColor } = this.props\n    legsColor = legsColor.leg\n    let hasLegColor = (() => {\n      if (legsColor && legsColor.includes(i)) return false;\n  })();\n    return <this.BoxMarkup hasLegColor={hasLegColor} key={i} id={i} />\n  }\n  completedColorsAddLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (!completeColor || !completeColor.length || !completeColor.includes(i))\n        return false\n      return true\n    })();\n    return <this.BoxMarkup hasCompletionColor={hasCompletionColor} key={i} id={i} />\n  }\n  completedColorsRemoveLogic(i) {\n    let { completeColor } = this.props\n    let hasCompletionColor = (() => {\n      if (completeColor && completeColor.includes(i)) return false;\n    })();\n    return <this.BoxMarkup hasCompletionColor={hasCompletionColor} key={i} id={i} />\n  }\n\n  BoxMarkup(input) {\n      let idStr = `id${input.id}`\n      // console.log('input', input.hasStopColor)\n      // console.log('input', this.props)\n      return (\n      <div\n        id={idStr}\n        key={input.id}\n        className={`box ${input.hasStopColor ? `stop-color${this.props.selectedDriver}` : \"\"} ${\n          input.hasLegColor ? `leg-color${this.props.selectedDriver}` : \"\"\n        } ${input.hasCompletionColor ? `complete-color${this.props.selectedDriver}` : \"\"}`}\n      />\n    )\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // check if this props is dif than last - to stop it firing over and over\n    if (this.props.allColorsCounter !== prevProps.allColorsCounter) {\n      // if state count is not yet updated\n      if (this.state.allColorsCounter !== this.props.allColorsCounter) {\n        console.log(\"toggle\")\n        this.toggleColor(\"all\")\n        this.setState({\n            // update by one\n          allColorsCounter: this.props.allColorsCounter\n        })\n      } else {\n        console.error(\"And error in the all index logic\")\n      }\n    }\n    // check for change - if counter diff then there is a change\n    if (this.props.legColorsCounter !== prevProps.legColorsCounter) {\n      // if new leg, index will be diff\n      if (this.props.legsColor.index !== this.state.previousLegIndex) {\n        console.log(\"change leg\")\n        // udpate index\n        this.setState({\n          previousLegIndex: this.props.legsColor.index,\n          legColored: true\n        })\n        // if same leg, index will match previous then just toggle off\n      } else if (this.props.legsColor.index === this.state.previousLegIndex) {\n        console.log(\"toggle leg\")\n        this.toggleColor(\"leg\")\n      } else {\n        console.error(\"An error in the leg index logic\")\n      }\n    }\n    if (\n      this.props.completedColorsCounter !== prevProps.completedColorsCounter\n    ) {\n      console.log(this.props)\n      if (\n        this.state.completedColorsCounter !== this.props.completedColorsCounter\n      ) {\n        console.log(\"toggle\")\n        // update by one\n        this.toggleColor(\"complete\")\n        this.setState({\n          completedColorsCounter: this.props.completedColorsCounter\n        })\n      } else {\n        console.error(\"An error in the complete index logic\")\n      }\n    }\n  }\n  render() {\n\n    if (this.props.toRender && this.props.toRender.length) {\n      return <React.Fragment>{this.renderBoxes()}</React.Fragment>\n    } else {\n      return <div>No Boxes yet!</div>\n    }\n  }\n}\n\nexport default Box\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport black from '@material-ui/core/colors';\nimport Icon from '@material-ui/core/Icon';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n  },\n  icon: {\n    margin: theme.spacing.unit * 2,\n    color: \"#A0A0A0\t\",\n    fontSize: \"12px\",\n    position: \"absolute\",\n    right: \"-7px\",\n    top: \"0\"\n\n  },\n  iconHover: {\n    margin: theme.spacing.unit * 2,\n    '&:hover': {\n      color: black,\n    },\n  },\n});\n\nfunction Icons(props) {\n  const { classes } = props;\n  // console.log(props)\n  return (\n\n          (props.type === \"stop\" ?\n          <div className={classes.root}>\n          {console.log('stop')}\n              <Icon\n                ref={props.ref} className={`${classes.icon} stop-marker`} color=\"primary\"\n                tabIndex=\"-1\"\n                style={props.styles}>\n              {props.strType}\n            </Icon>\n          </div>\n          :\n           <div className={classes.root}>\n              <Icon\n              className={`${classes.icon} ${props.className}`}\n              color=\"primary\"\n              tabIndex=\"-1\"\n              style={props.style}>\n              {props.strType}\n            </Icon>\n          </div>)\n\n\n  );\n}\n\nIcons.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Icons);\n","import React from 'react'\nimport { Manager, Reference, Popper } from 'react-popper';\nimport Icon from './material/Icon'\n\n// takes and array of directions and pixes for x and y\nfunction Stop(props){\n    if(!props.coords) return null\n    // console.log('props', props)\n    let coordsArr = props.coords\n    return coordsArr.map((coord, i) => {\n        let styles = {\n            [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n            [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px',\n        }\n        function toggleStopNames(props){\n            if(props.toggleStopNames){\n                return \"block\"\n            } else {\n                return \"none\"\n            }\n        }\n        return(\n            <Manager key={i}>\n        <Reference>\n          {({ ref }) => (\n            <div ref={ref} className=\"stop-marker\" style={styles} />\n          )}\n        </Reference>\n        <Popper placement=\"left\">\n          {({ ref, style, placement, arrowProps }) => (\n            <div\n              ref={ref}\n              style={{ ...style,\n                  backgroundColor: \"rgba(0,0,0,0.5)\",\n                  color: \"#fff\",\n                  borderRadius: \"5px\",\n                  marginLeft: \"10px\",\n                  display: toggleStopNames(props),\n                  marginLeft: \"-10px\"\n              }}\n              data-placement={placement}\n            >\n              {`stop${i + 1}`}\n              <div ref={arrowProps.ref} style={arrowProps.style} />\n            </div>\n          )}\n        </Popper>\n      </Manager>\n        )\n    })\n}\n\nexport default Stop\n","import React from 'react'\nimport Icon from './material/Icon'\n\n// takes and array of directions and pixes for x and y\nfunction Cursor(props){\n    if(!props.coords) return null\n    let coord = props.coords\n    // console.log(props)\n    let driverID = props.coords.id\n    // console.log(driverID)\n    let style = {\n        [coord.directions.xDir]: coord.pixels.moveX.toString() + 'px',\n        [coord.directions.yDir]: coord.pixels.moveY.toString() + 'px',\n        \"--driver-color\": props.colors[driverID]\n    }\n    return(\n        <div className={`${props.show ? 'show' : 'hide' } cursor-wrapper icon-wrapper`} style={style}>\n            <Icon\n                 className=\"cursor\"\n                 strType=\"place\"\n                 />\n        </div>\n    )\n}\n\nexport default Cursor\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2,\n  },\n});\n\nclass MaterialSelect extends React.Component {\n  state = {\n    leg: '',\n    labelWidth: 0,\n  };\n\n  componentDidMount() {\n    this.setState({\n      labelWidth: ReactDOM.findDOMNode(this.InputLabelRef).offsetWidth,\n    });\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    // console.log(this.props)\n    return (\n      <div className={classes.root}>\n\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel\n            ref={ref => {\n              this.InputLabelRef = ref;\n            }}\n            htmlFor=\"outlined-age-native-simple\"\n          >\n            Legs\n          </InputLabel>\n          <Select\n            native\n            value={this.props.value}\n            onChange={this.props.onChange}\n            input={\n              <OutlinedInput\n                name={this.props.type === 'driver' ? 'driver-select': 'color-select'}\n                labelWidth={this.state.labelWidth}\n                id=\"outlined-age-native-simple\"\n              />\n            }\n          >\n          <option value=\"\" />\n          {\n              this.props.legs.map((leg, i) => {\n                return <option key={i} value={this.state.value}>{leg.legID}</option>\n              })\n          }\n\n          </Select>\n        </FormControl>\n\n      </div>\n    );\n  }\n}\n\nMaterialSelect.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MaterialSelect);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  input: {\n    display: 'none',\n  },\n});\n\nfunction MaterialButton(props) {\n  const { classes } = props;\n  return (\n      <Button variant=\"contained\" type={props.type} size={props.size} color={props.color} className={`${props.type} button ${classes.button}`} data-number={props.buttonNumber} onClick={props.onClick}>\n        {props.text}\n      </Button>\n  );\n}\n\nMaterialButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MaterialButton);\n","import React from 'react'\nimport MaterialSelect from './material/MaterialSelect'\nimport MaterialButton from './material/MaterialButton'\nimport TextField from '@material-ui/core/TextField';\n\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 200,\n    },\n    dense: {\n        marginTop: 19,\n    },\n    menu: {\n        width: 200,\n    },\n})\n\nclass Dropdown extends React.Component{\n    constructor(props) {\n\t\tsuper(props)\n        this.state = {\n            }\n\t}\n\n    renderInput(){\n        return(\n            <div className=\"progress-input-wrapper form-child\">\n\n                <TextField\n                    value={this.props.driverProgressInput}\n                    id=\"standard-name\"\n                    label=\"Progress\"\n                    placeholder=\"Progres in Percent\"\n                    className={`${styles.textField} progress-input`}\n                    name=\"progress-input\"\n                    onChange={ev =>  this.props.onChange(ev)}\n                    margin=\"normal\"\n\n                />\n            </div>\n        )\n    }\n    render(){\n\n        if(this.props.legs){\n\n            return(\n                <div className=\"legs-container\">\n\n                <form name={this.props.type === 'driver' ? 'driver-dropdown': 'color'} onSubmit={(ev) => this.props.onSubmit(ev)}>\n                    <label className=\"form-child\">\n                    {this.props.type === 'driver' ? this.props.texts.driverText: this.props.texts.colorText}\n                    <MaterialSelect legs={this.props.legs} value={this.state.value} onChange={this.props.onChange} type={this.props.type === 'driver' ? 'driver' : 'color'}>\n\n                        <option></option>\n                    {\n                        this.props.legs.map((leg, i) => {\n                            return <option key={i} value={this.state.value}>{leg.legID}</option>\n                        })\n                    }\n                    </MaterialSelect>\n                    </label>\n                    {this.props.type === 'driver'?\n                    this.renderInput() : null\n                    }\n                    <MaterialButton type=\"submit\" value=\"Submit\" size=\"large\" color=\"primary\" text=\"Toggle Leg\"/>\n\n                </form>\n\n                </div>\n            )\n        } else {\n            return null\n        }\n\n    }\n\n}\n\nexport default Dropdown\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MaterialButton from './MaterialButton';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n  dense: {\n    marginTop: 19,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass MaterialForm extends React.Component {\n  state = {\n      formName: this.props.formname\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  }\n  renderFormType(props, classes){\n      if(props.values && !props.graphSize){\n          return(\n              <React.Fragment>\n                  <TextField\n                      id=\"standard-name\"\n                      label=\"X-coords\"\n                      placeholder=\"1-200\"\n                      className={classes.textField}\n                      value={props.values.x}\n                      onChange={props.onChange}\n                      margin=\"normal\"\n                      name=\"x\"\n                  />\n                  <TextField\n                      id=\"standard-name\"\n                      label=\"Y-coords\"\n                      placeholder=\"1-200\"\n                      className={classes.textField}\n                      value={props.values.y}\n                      onChange={props.onChange}\n                      margin=\"normal\"\n                      name=\"y\"\n                  />\n              </React.Fragment>\n          )\n      } else if(!props.values){\n          return(\n              <React.Fragment>\n                  <TextField\n                  id=\"standard-name\"\n                  label=\"X-coords\"\n                  placeholder=\"1-200\"\n                  className={classes.textField}\n                  onChange={props.onChange}\n                  margin=\"normal\"\n                  name=\"x\"\n                  />\n                  <TextField\n                  id=\"standard-name\"\n                  label=\"Y-coords\"\n                  placeholder=\"1-200\"\n                  className={classes.textField}\n                  onChange={props.onChange}\n                  margin=\"normal\"\n                  name=\"y\"\n                  />\n              </React.Fragment>\n          )\n      } else if(props.values && props.graphSize){\n          return(\n              <React.Fragment>\n               <Typography id=\"graph-size-label\">Graph Size</Typography>\n                  <TextField\n                  id=\"graph-size-form-x\"\n                  label=\"X length\"\n                  placeholder=\"1-100\"\n                  className={classes.textField}\n                  onChange={props.onChange}\n                  margin=\"normal\"\n                  name=\"x\"\n                  />\n                  <TextField\n                  id=\"graph-size-form-y\"\n                  label=\"Y height\"\n                  placeholder=\"1-100\"\n                  className={classes.textField}\n                  onChange={props.onChange}\n                  margin=\"normal\"\n                  name=\"y\"\n                  />\n              </React.Fragment>\n          )\n      }\n  }\n  render() {\n      // console.log(this.props)\n    const { classes } = this.props;\n    return (\n      <form className={`${classes.container} ${this.props.addedClass} material-form`} noValidate autoComplete=\"off\" name={this.state.formName} onSubmit={(ev) => this.props.onSubmit(ev)}>\n        {this.renderFormType(this.props, classes)}\n             <MaterialButton size={this.props.buttonsize} color=\"primary\" type=\"primary-button\" text=\"Submit\" buttonNumber={3}/>\n      </form>\n    );\n  }\n}\n\nMaterialForm.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MaterialForm);\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Dropdown from '../Dropdown'\nimport MaterialButton from './MaterialButton'\nimport MaterialForm from './MaterialForm'\n\n\n\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n})\n\nclass Accordion extends React.Component {\n  state = {\n    expanded: null,\n  };\n\n  handleChange = panel => (event, expanded) => {\n    this.setState({\n      expanded: expanded ? panel : false,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { expanded } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <ExpansionPanel className='top-panel' expanded={expanded === 'panel1'} onChange={this.handleChange('panel1')}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>Set Cursor Coordinates</Typography>\n            <Typography className={classes.secondaryHeading}>Set cursor place on grid.\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n          <MaterialForm\n              onChange={this.props.onChange}\n              onSubmit={this.props.onSubmit}\n              values={this.props.values}\n              formname=\"driver-form\"\n              buttonsize=\"large\"\n             />\n            <Typography>\n\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <ExpansionPanel className='top-panel' expanded={expanded === 'panel2'} onChange={this.handleChange('panel2')}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>Set Cursor Leg</Typography>\n            <Typography className={classes.secondaryHeading}>\n              Set cursor inside legs at progress points.\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className=\"second-panel\">\n          <Dropdown\n                onChange={this.props.onChange}\n                onSubmit={this.props.onSubmit}\n                legs={this.props.legs ? this.props.legs : null}\n                type=\"driver\"\n                texts={this.props.texts}\n          />\n            <Typography>\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n        <ExpansionPanel className='top-panel' expanded={expanded === 'panel3'} onChange={this.handleChange('panel3')}>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>Show Legs & Progress</Typography>\n            <Typography className={classes.secondaryHeading}>Highlight completed parts, and legs.</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className=\"third-panel\">\n          <Dropdown\n                onChange={this.props.onChange}\n                onSubmit={this.props.onSubmit}\n                legs={this.props.legs ? this.props.legs : null}\n                type=\"color\"\n                texts={this.props.texts}\n          />\n          <MaterialButton size=\"large\" color=\"primary\" type=\"secondary-button\" text=\"Progess\" buttonNumber={2} onClick={this.props.onClick}/>\n\n            <Typography>\n\n            </Typography>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n\n      </div>\n    );\n  }\n}\n\nAccordion.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Accordion);\n\n\n\n\n\n// type=\"color\"\n// utils={this.state.utils}\n// legs={this.state.legs.length ? this.state.legs : null}\n// onChange={this.handleDropdownChange} onSubmit={this.handleDropdownSubmit}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\n\nconst styles = theme => ({\n  fab: {\n    margin: theme.spacing.unit,\n    backgroundColor: '#2196f3'\n  },\n  extendedIcon: {\n    marginRight: theme.spacing.unit,\n  },\n});\nfunction renderIcon(props){\n    if(props.iconType === 'add'){\n        return(<AddIcon/>)\n    } else if(props.iconType === 'minus'){\n        return(<img className=\"minus-svg\" src=\"./icons/remove_24px.svg\"/>)\n    }    else {\n        return null\n    }\n}\n\nfunction AddButton(props) {\n  const { classes } = props;\n  return (\n    <div className=\"add-button-container\">\n      <Fab size=\"small\" color=\"primary\" aria-label=\"Add\" className={`add-button button ${classes.fab}`} onClick={(ev) => props.onClick(ev)} data-number={props.number}>\n        {renderIcon(props)}\n        <AddIcon />\n      </Fab>\n    </div>\n  );\n}\n\nAddButton.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AddButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\nconst styles = {\n  root: {\n    color: green[600],\n    '&$checked': {\n      color: green[500],\n    },\n  },\n  checked: {},\n};\n\nclass CheckboxLabels extends React.Component {\n  state = {\n    checkedA: false,\n    checkedB: false,\n    checkedC: false\n  };\n\n  handleChange = () => event => {\n    let name  = this.props.value\n    if(this.props.onChange){\n        this.props.onChange(event)\n    }\n    this.setState({ [name]: event.target.checked });\n };\n checkedState(){\n     if(this.props.value === \"checkedA\"){\n         return this.state.checkedA\n     } else if(this.props.value === \"checkedB\"){\n         return this.state.checkedB\n     } else if(this.props.value === \"checkedC\"){\n         return this.state.checkedC\n     }\n }\n  render() {\n    const { classes } = this.props;\n    return (\n      <FormGroup row  className='checkbox-container'>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.checkedState()}\n              onChange={this.handleChange()}\n              value={this.props.value}\n              name={this.props.name}\n            />\n\n          }\n          label={this.props.label}\n        />\n\n      </FormGroup>\n    );\n  }\n}\n\nCheckboxLabels.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CheckboxLabels);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Accordion from \"./Accordion\";\nimport AddButton from \"./AddButton\";\nimport MaterialButton from \"./MaterialButton\";\nimport Icon from \"./Icon\";\nimport Checkbox from \"./Checkbox\";\nimport ReactTooltip from 'react-tooltip'\n\n\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nconst styles = (theme, color) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n    },\n    indicator: {\n        backgroundColor: color\n  }\n})\n\nclass SimpleTabs extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            value: 0,\n            tabs: [{ label: \"Driver 1\" }],\n            numberOfTabs: 1,\n            hovered: false,\n            checkedA: false,\n            checkedB: false,\n            checkedC: false\n        };\n    }\n// handle check boxes\n  handleChange = (event, value) => {\n      if(event.target.name === \"float-toggle\"){\n          this.props.onChange(event)\n          return\n      }\n      if(event.target.name === \"toggle\"){\n          this.props.onChange(event)\n          return\n      } else if(event.target.name === \"stop-name-toggle\"){\n          this.props.onChange(event)\n          return\n      }\n    this.setState({ value: this.props.selectedDriver });\n  };\n  addTab(){\n      let driverNum = this.state.numberOfTabs + 1\n      // console.log(driverNum)\n      this.setState({\n          numberOfTabs: driverNum\n      })\n  }\n  // takes index to extract from array\n  subtractTab(indexToRemove){\n\n      if(this.state.numberOfTabs < 2){\n          console.log('cannot subtract single driver')\n          return\n      }\n      let numberOfTabs = this.state.numberOfTabs - 1\n\n      this.setState({\n          numberOfTabs: numberOfTabs\n      })\n\n\n  }\n  handleAddButtonClick(e){\n      this.props.onClick(e)\n      this.addTab()\n      this.setState({value: this.props.selectedDriver})\n      // console.log(this.state.value)\n  }\n  handleRemoveButtonClick(e){\n      if(!this.state.hovered){\n          return\n      }\n      console.log('HERE')\n      let driverIndex = parseInt(e.target.innerText.substring(13,14)) - 1\n      this.props.onClick({event: e, iconClick:true, cursor:true})\n      this.subtractTab(driverIndex)\n  }\n\n   mouseEvent(e) {\n    // e = Mouse click event.\n        var rect = e.target.getBoundingClientRect();\n        var x = e.clientX - rect.left; //x position within the element.\n        var y = e.clientY - rect.top;  //y position within the element.\n\n        if(y <= 27 && x >= 60){\n            this.setState({hovered: true})\n        } else {\n            this.setState({hovered: false})\n        }\n    }\n    handleTabsClick(e){\n        e.stopPropagation()\n        if(this.state.hovered || e.target.parentNode.parentNode.parentNode.classList.contains(\"tabs-element\")){\n            return\n        } else if(e.target.type === \"button\" && e.target.dataset.key){\n            this.props.onClick({event: e, iconClick:false, cursor:true})\n        }\n    }\n\n    renderIcon(){\n        return(\n            <div tabIndex=\"-1\" className=\"icon-wrapper\">\n              <Icon\n                className=\"close-icon\"\n                strType=\"close\"\n                />\n            </div>)\n    }\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n    if(this.props.cursorArr){\n        return (\n            <div className={classes.root}>\n            <AppBar position=\"static\">\n\n                <Tabs\n\n                    classes={{\n                        indicator: classes.indicator\n                    }}\n                    className=\"tabs-element\"\n                    name=\"tabs\"\n                    value={this.props.selectedDriver}\n                    onChange={this.handleChange}\n                    onClick={this.handleTabsClick.bind(this)} >\n\n                {\n                    this.props.cursorArr.map((tab, i) => {\n\n                    return(\n                        <div>\n                            <Tab\n                                data-tip=\"Click to Hide Cursor\"\n                                data-key={i}\n                                icon={this.renderIcon()} onMouseMove={this.mouseEvent.bind(this)}\n                                label={tab.name}\n                                key={i}\n                                onClick={this.handleRemoveButtonClick.bind(this)}>\n                           </Tab>\n                           <ReactTooltip />\n                        </div>)\n                       })\n                }\n                <AddButton\n                    onClick={this.handleAddButtonClick.bind(this)}\n                    />\n                    <div className=\"checkboxes\">\n\n                        <Checkbox\n                            checkedProps={this.state.checkedA}\n                            value=\"checkedA\"\n                            name=\"float-toggle\"\n                            label=\"Floating Controls\"/>\n                        <Checkbox\n                            value=\"checkedB\"\n                            name=\"stop-name-toggle\"\n                            label=\"Show Stop Names\"/>\n                    </div>\n\n                <MaterialButton\n                    size=\"small\"\n                    color=\"secondary\"\n                    text=\"Toggle Route\"\n                    type=\"secondary-button\"\n                    onClick={this.props.onClick}\n                    buttonNumber={1}/>\n\n            </Tabs>\n\n            </AppBar>\n\n                <TabContainer>\n\n                <Accordion\n                    onClick={this.props.onClick}\n                    onSubmit={this.props.onSubmit}\n                    onChange={this.props.onChange}\n\n                    values={this.props.values}\n\n                    legs={this.props.legs ? this.props.legs : null}\n                    texts={this.props.texts}\n                    />\n                </TabContainer>\n            </div>\n        )\n    } else {\n        return null\n    }\n  }\n}\n\nSimpleTabs.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\n\nexport default withStyles(styles)(SimpleTabs);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst styles1 = theme => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n\nfunction MySnackbarContent(props) {\n  const { classes, className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={classNames(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"Close\"\n          color=\"inherit\"\n          className={classes.close}\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nconst MySnackbarContentWrapper = withStyles(styles1)(MySnackbarContent);\n\nconst styles2 = theme => ({\n  margin: {\n    margin: theme.spacing.unit,\n  },\n});\n\nclass CustomizedSnackbars extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClick = () => {\n      console.log('click')\n    this.setState({ open: false });\n  };\n\n  handleClose = (event, reason) => {\n      console.log('close')\n    if (reason === 'clickaway') {\n        this.setState({\n            open: false\n        })\n      return;\n    }\n    // console.log(this.state)\n    this.setState({ open: false });\n  };\n\n  render() {\n      // console.log(this.props)\n    return (\n      <div>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}    \n          open={this.props.snackbarOpen}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n          onClick={this.props.onClick}\n          className=\"snackbar\"\n        >\n          <MySnackbarContentWrapper\n              onClose={this.handleClose}\n              variant=\"info\"\n              message=\"Those coords are not part of the route.\"\n          />\n        </Snackbar>\n      </div>\n    );\n  }\n}\n\nCustomizedSnackbars.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles2)(CustomizedSnackbars);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/lab/Slider';\n\nconst styles = {\n  root: {\n    width: 300,\n  },\n  slider: {\n    padding: '22px 0px',\n  },\n};\n\nclass SimpleSlider extends React.Component {\n  state = {\n    value:200,\n  };\n\n  handleChange = (event, value) => {\n    this.props.onChange({event: event, value:value})\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n    // console.log(this.state.value)\n    return (\n      <div className={`${classes.root} slider `}>\n        <Typography id=\"label\">{this.props.label}</Typography>\n        <Slider\n          max={1000}\n          step={1}\n          classes={{ container: classes.slider }}\n          value={value}\n          aria-labelledby=\"label\"\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nSimpleSlider.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleSlider);\n","var utils = (function () {\n    return {\n    _convertToPixels: function(x,y) {\n        if(!x){\n            x = 0\n        }\n        if(!y){\n            y =0\n        }\n        let totalX\n        let totalY\n        // first 10 cells = 100px\n        // after that everythig 11px\n        // - minus cells add 100px\n        // - rest * 11 then sum\n        if(x){\n            x = x - 10\n            totalX = 100 + (x * 11)\n        } else {\n            totalX = x * 10\n        }\n        if(y){\n            y = y - 10\n            totalY = 100 + (y * 11)\n        } else {\n            totalY = y * 10\n        }\n        let moveX = parseInt(totalX)\n        let moveY = parseInt(totalY)\n        // console.log('mx', moveX)\n        // console.log('my', moveY)\n        let coordsObj = {\n            moveX: moveX,\n            moveY: moveY\n        }\n        return coordsObj\n    },\n    _numToMove: function(x,y, type){\n        if(type === 'stop'){\n            // console.log('moveX',this.state.previousStopX )\n            // console.log('moveY', this.state.previousStopY)\n            let moveX = Math.abs(this.state.previousStopX - x)\n            // console.log('abs x', moveX)\n            let moveY = Math.abs(this.state.previousStopY - y)\n            // console.log('abs y', moveY)\n            return {\n                tempX: moveX,\n                tempY: moveY\n            }\n        } else if(type === 'leg'){\n            // console.log('prevX', this.state.previousLegX)\n            // console.log('prevY', this.state.previousLegY)\n            let moveX = Math.abs(this.state.previousLegX - x)\n            // console.log('in move previous', moveX)\n            let moveY = Math.abs(this.state.previousLegY - y)\n            // console.log('in move previous', moveY)\n            return {\n                tempX: moveX,\n                tempY: moveY\n            }\n        } else {\n            console.error(\"error in the num to move function\")\n        }\n\n    },\n    _calcStartingCell: function(sizeObj){\n        // find the corner cell formula is (x * y) - x\n            let startingCellNum = (parseInt(sizeObj.x) * parseInt(sizeObj.y)) - parseInt(sizeObj.x)\n            // console.log('startingCell', startingCellNum)\n            return startingCellNum\n    },\n    // takes 2 objs of coords and determines the diff\n    _absDiff: function(firstCoordsObj, secondCoordsObj){\n        let xDiff = Math.abs(firstCoordsObj.x - secondCoordsObj.x)\n        let yDiff = Math.abs(firstCoordsObj.y - secondCoordsObj.y)\n        return {\n            xDiff,\n            yDiff\n        }\n    },\n    _getDriverCoords: function(firstLegStopObj, lastLegStopObj, numToMoveObj ){\n        let x1 = firstLegStopObj.x\n        let x2 = lastLegStopObj.x\n        let y1 = firstLegStopObj.y\n        let y2 = lastLegStopObj.y\n        let xNum = numToMoveObj.xNum\n        let yNum = numToMoveObj.yNum\n        // if x moves up, add\n        let xToMove\n        let yToMove\n        if(x1 < x2){\n            // console.log(firstStopOfLeg[0].x)\n            // console.log(lastStopOfLeg[0].x)\n            xToMove = x1 + xNum\n            // console.log(xToMove)\n        } else if(x1 >= x2){\n            xToMove = x1 - xNum\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        if(y1 < y2){\n            yToMove = y1 + yNum\n        } else if(y1 >= y2){\n            yToMove = y1 - yNum\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        console.log('x', xToMove)\n        console.log('y', yToMove)\n        return {\n            x: xToMove,\n            y: yToMove\n        }\n    },\n    // take amount in leg with a percent - returns num to move out of total leg number\n    _percentToCoords: function(diffObj, percent){\n        let xNum = Math.floor((diffObj.xDiff * 0.01) * percent)\n        let yNum = Math.floor((diffObj.yDiff * 0.01) * percent)\n        return {xNum, yNum}\n    },\n    // takes first stop obj, driver coords obj, and abs diff of a single stops axis\n    _findPercentFromDriverCoords(firstStop, driverCoords, yAbsDiff, xAbsDiff){\n        let x1 = parseInt(firstStop.x)\n        let y1 = parseInt(firstStop.y)\n        let x2 = parseInt(driverCoords.x)\n        let y2 = parseInt(driverCoords.y)\n        // console.log(driverCoords)\n        // console.log('1', x1)\n        // console.log('2', y1)\n        // console.log('3', x2)\n        // console.log('4', y2)\n        let xDiff\n        let yDiff\n        // console.log('xAbsDiff', xAbsDiff)\n        // console.log('yAbsDiff', yAbsDiff)\n        // find number moved from last stop\n        if(x1 < x2){\n            // console.log('run 1')\n            // console.log(firstStopOfLeg[0].x)\n            // console.log(lastStopOfLeg[0].x)\n            xDiff = x2 - x1\n            // console.log(xToMove)\n        } else if(x1 > x2){\n            // console.log('run 2')\n            xDiff = x1 - x2\n        }  else if(x1 === x2){\n            xDiff = 0\n            // if it's first stop with no second stop\n        // } else if(!x2 && !y2)\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        if(y1 < y2){\n            // console.log('run 1')\n            yDiff = y2 - y1\n        } else if(y1 > y2){\n            // console.log('run 2')\n            yDiff = y1 - y2\n        } else if(y1 === y2){\n            yDiff = 0\n        } else {\n            console.error(\"error in driver movement\")\n        }\n        // console.log('xDiff', xDiff)\n        // console.log('yDiff', yDiff)\n        // divide number moved so far in leg by total number in leg\n        let xPercent\n        let yPercent\n        // check for zero vals\n        if(xDiff === 0){\n            xPercent = 0\n        }\n        if(yDiff === 0){\n            yPercent = 0\n        }\n        if(xDiff && xDiff !== 0){\n            // console.log('xdiff', xDiff)\n            xPercent = xDiff / xAbsDiff\n        }\n        if(yDiff && yDiff !== 0){\n            // console.log('yDiff',yDiff)\n            yPercent = yDiff / yAbsDiff\n        }\n        let finalPercent\n        // console.log(xPercent)\n        // console.log(yPercent)\n        // if one val is missing use the other alone\n        if(!xPercent || !yPercent){\n            if(xPercent){\n                return finalPercent = xPercent * 100\n            } else if(yPercent){\n                return finalPercent = yPercent * 100\n            }\n        }\n        // it both are zero then zero percent\n        if(xPercent === 0 && yPercent === 0){\n            return finalPercent = 0\n        }\n\n        // console.log('x%',xPercent)\n        // console.log('y%',yPercent)\n        //use the larger leg to updaet val - TODO: make both percents equal so driver fits back into grid\n        if(xAbsDiff > yAbsDiff){\n            return finalPercent = xPercent\n        } else if(xAbsDiff < yAbsDiff){\n            return finalPercent = yPercent\n            // if equal use the larger percent\n        } else if(xAbsDiff === yAbsDiff){\n            if(xPercent >= yPercent){\n                return finalPercent = xPercent\n            } else {\n                return finalPercent = yPercent\n            }\n        } else {\n            console.error('An error occured in the percentage calcs')\n            return\n        }\n    },\n    // make json from the entered plot points\n    _makePlotJson(plotsArr){\n        return plotsArr.map((coords,i) => {\n            return {\n                    \"name\":String.fromCharCode(i+65),\n                    \"x\":coords.x,\n                    \"y\":coords.y\n                }\n            })\n        }\n\n\n}\n})();\n\nexport default utils\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing.unit * 2,\n  },\n});\n\nclass SimpleSelect extends React.Component {\n  state = {\n    value: '',\n    name: '',\n    xSelect: '',\n    ySelect: ''\n  };\n\n\n  componentDidMount() {\n      // try to fix focus problem on ranges\n    function focusOnSelect(){\n        console.log('here')\n        let select1 = document.querySelector('#select-xSelect')\n        let select2 = document.querySelector('#select-ySelect')\n        select1.addEventListener('blur', () => {\n            if(this.state.xSelect){\n                setInterval(function(){\n                    select1.focus()\n                },10)\n            }\n\n        })\n        select2.addEventListener('blur', () => {\n            if(this.state.ySelect){\n                setInterval(function(){\n                    select2.focus()\n                },10)\n\n            }\n        })\n\n    }\n    // focusOnSelect.bind(this)()\n  }\n\n  handleChange = event => {\n      console.log(event.target.name)\n      console.log(event.target.value)\n      this.props.onChange(event)\n    this.setState({ [event.target.name]: event.target.value });\n\n  };\n\n  render() {\n    const { classes } = this.props;\n    // console.log(this.props.cells)\n    return (\n      <form className={classes.root} autoComplete=\"off\">\n        <FormControl className={`${classes.formControl} regular`}>\n          <InputLabel htmlFor=\"age-simple\">X</InputLabel>\n          <Select\n            value={this.state.xSelect}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'xSelect',\n              id: 'x-simple-select',\n            }}\n            ref={this.ref1}\n          >\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            { this.props.cells.map((cell,i) => {\n            return <MenuItem value={cell+1} key={i}>{cell+1}</MenuItem>\n               })\n            }\n\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <InputLabel htmlFor=\"age-simple\">Y</InputLabel>\n          <Select\n            value={this.state.ySelect}\n            onChange={this.handleChange}\n            inputProps={{\n              name: 'ySelect',\n              id: 'y-simple-select',\n            }}\n            ref={this.ref2}\n          >\n            <MenuItem value=\"\">\n              <em>None</em>\n            </MenuItem>\n            { this.props.cells.map((cell,i) => {\n            return <MenuItem value={cell+1} key={i}>{cell+1}</MenuItem>\n               })\n            }\n          </Select>\n        </FormControl>\n\n      </form>\n    );\n  }\n}\n\nSimpleSelect.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleSelect);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport Select from \"./Select\";\nimport Icon from \"./Icon\";\nimport MaterialForm from \"./MaterialForm\";\nimport MaterialButton from \"./MaterialButton\";\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    width: \"500px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\nfunction getModalRighStyle() {\n  const top = 50;\n  const right = 20;\n\n  return {\n    top: `${top}px`,\n    right: `${right}px`,\n    transform: `translate(-${top}%, -${right}%)`\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: \"absolute\",\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: \"none\"\n  }\n});\n\nclass SimpleModal extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      open: false,\n      cells: \"\"\n    };\n\n    this.makeRange = this.makeRange.bind(this);\n  }\n\n  handleOpen = e => {\n    // console.log(e);\n    this.setState({ open: true });\n  };\n\n  handleClose = e => {\n    this.setState({ open: false });\n    this.props.onChange(e);\n    // console.log(this.state.open);\n  };\n\n  // make range for select dropdowns\n  makeRange() {\n    let num = this.props.cells;\n    let arr = Array.from({ length: num }, (v, i) => i);\n    return arr;\n  }\n  componentDidMount() {\n    let that = this;\n    // set state from parent to open modal\n    setTimeout(function() {\n      that.setState({\n        open: that.props.open\n      });\n    }, 1000);\n  }\n  componentDidUpdate() {\n    // when parent updates the state, it will register here\n    if (this.props.open !== this.state.open) {\n      this.setState({\n        open: this.props.open\n      });\n    }\n  }\n  handleSelectChange(e) {\n    this.props.onChange(e);\n  }\n  handleSubmit(e) {\n    this.props.onSubmit(e);\n  }\n  handleClick(e) {\n      // console.log(e.target)\n    e.stopPropagation();\n    if (e.target.classList && e.target.classList.contains(\"close-icon\")) {\n      this.handleClose(e);\n    } else if (\n      e.target.classList &&\n      (e.target.classList.contains(\"modal-submit\") ||\n        e.target.classList.contains(\"auto-plot-submit\"))\n    ) {\n      this.handleSubmit(e);\n    }\n  }\n  renderIcon() {\n    let that = this;\n    return (\n      <div tabIndex=\"-1\" className=\"icon-wrapper\">\n        <Icon\n          className=\"close-icon\"\n          strType=\"close\"\n          onClick={that.handleClick.bind(that)}\n        />\n      </div>\n    );\n  }\n  renderInputModal(classes) {\n    let cellsrange = this.makeRange(this.props.cells);\n    return (\n      <React.Fragment>\n        <Modal\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n          open={this.state.open}\n          onClose={this.handleClose}\n          onClick={this.handleClick.bind(this)}\n        >\n          <div style={getModalStyle()} className={`${classes.paper} modal`}>\n            <div className=\"modal-col modal-left\">\n              <Typography variant=\"h6\" id=\"modal-title\">\n                Set Graph Size\n              </Typography>\n              <MaterialForm\n                graphSize={true}\n                onChange={this.handleSelectChange.bind(this)}\n                onSubmit={this.handleSubmit.bind(this)}\n                values={this.state.setGraphSize}\n                formname=\"graph-size\"\n                addedClass=\"graph-size\"\n                buttonsize=\"small\"\n              />\n            </div>\n            <div className=\"modal-center modal-col\">\n              <Icon className=\"close-icon\" strType=\"close\" />\n              <Typography variant=\"h6\" id=\"modal-title\">\n                Set Plot Points\n              </Typography>\n              <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n                <Select\n                  cells={cellsrange}\n                  onChange={this.handleSelectChange.bind(this)}\n                />\n              </Typography>\n              <Typography variant=\"subtitle2\" id=\"simple-modal-description\">\n                <div className=\"auto-plot\">\n                  <span id=\"auto-plot-span\">\n                    <strong>OR</strong>\n                  </span>\n                  <MaterialButton\n                    type=\"auto-plot-submit submit\"\n                    value=\"Submit\"\n                    size=\"small\"\n                    color=\"primary\"\n                    text=\"Auto\"\n                    onClick={this.handleClick.bind(this)}\n                    />\n                </div>\n              </Typography>\n            </div>\n            <SimpleModalWrapped />\n            <div className=\"modal-right modal-col\">\n              <Typography variant=\"h6\" id=\"modal-title\">\n                Points Plotted\n              </Typography>\n              {this.renderPlotsList(this.props)}\n              <MaterialButton\n                type=\" modal-submit submit\"\n                value=\"Submit\"\n                size=\"small\"\n                color=\"secondary\"\n                text=\"Graph\"/>\n            </div>\n          </div>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n  renderPlotsList(props) {\n      console.log(props)\n    if (!props.plots) return;\n    return (\n      <div className=\"plots-list-container\">\n        <ol className=\"plots-list\">\n          {props.plots.map((plot, i) => {\n            return (\n              <li key={i}>\n                <strong>X</strong>:{plot.x}&nbsp;&nbsp;&nbsp; <strong>Y</strong>\n                :{plot.y}\n              </li>\n            );\n          })}\n        </ol>\n      </div>\n    );\n  }\n  render() {\n    const { classes } = this.props;\n    return <React.Fragment>{this.renderInputModal(classes)}</React.Fragment>;\n  }\n}\n\nSimpleModal.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\n// We need an intermediary variable for handling the recursive nesting.\nconst SimpleModalWrapped = withStyles(styles)(SimpleModal);\n\nexport default SimpleModalWrapped;\n","import React, { Component } from \"react\";\nimport { Manager, Reference, Popper, Arrow } from \"react-popper\";\n\nimport \"../App.css\";\nimport Box from './Box'\nimport Stop from './Stop'\nimport Cursor from './Cursor'\nimport Tabs from './material/Tabs'\nimport Snackbar from './material/Snackbar'\nimport Slider from './material/Slider'\nimport Checkbox from './material/Checkbox'\nimport utils from './grid_utils'\nimport MaterialForm from './material/MaterialForm'\nimport MaterialButton from './material/MaterialButton'\nimport Modal from './material/Modal'\n\nclass Grid extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            modalState: true,\n            setGraphSize: {\"x\":\"20\", \"y\":\"20\"},\n            storeGraphSize: {\"x\":\"20\", \"y\":\"20\"},\n            plotObjs:[],\n            tempPlotObj:{x:\"\",y:\"\"},\n            cancelSlide: false,\n            sliderSlicedChunk: [],\n            previousXSlideCoord: {x: 0},\n            previousYSlideCoord: {y: 0},\n            iconStartAtfirstStop: false,\n            sliderIndex:0,\n            initialSliderChange: true,\n            sliderCoordsArrs: [],\n            // utilsTop: '',\n            colors: ['red', 'Orange', 'DodgerBlue', 'MediumSeaGreen', 'Violet','SlateBlue', 'Tomato'],\n            floatToggle: false,\n            showStopNames: false,\n            snackbarOpen: false,\n            allColorsCounter: 0,\n            legColorsCounter: 0,\n            completedColorsCounter: 0,\n            colorType: \"\",\n            loadingDataArr: [],\n            // changes based on tab click\n            cursorIndex: 0,\n            // used to assign driver id on creation\n            createCounter:0,\n            legs: [],\n\t\t\tstops: [],\n            jsonStops:[],\n            stopsCopy: [],\n            legToColorID:\"\",\n            cursorFormX:\"\",\n            cursorFormY:\"\",\n            cursorLegInput:\"\",\n            cursorArr: [],\n            cursorInputProgress: \"\",\n            currentCursor: \"\",\n            driverLegStart: \"\",\n            driverCoords: \"\",\n            positionSelect: \"coords\",\n            startingCellNumAll: 0,\n            startingCellNumPartial: \"\",\n            previousLegEndCell:0,\n            previousStopX: 0,\n            previousStopY: 0,\n            previousLegX: 0,\n            previousLegY:0,\n            partialLegStartCoords: \"\",\n            partialLegEndCoords: \"\",\n            boxesToRender: Array.from({length: 100}, (v, i) => i),\n            holdAllStopColorIndexes: [],\n            holdAllLegColorArrs: [],\n            holdingCompletedArrs: [],\n            finalStopColorArr:[],\n            finalLegColorObj: [],\n            finalCompletedColorsArr: [],\n            finalDriverMoveObj: \"\",\n            finalSliderCoords: [],\n            legStartEndCellNums: [],\n            texts: {\n                driverText: \"Select leg for driver\",\n                colorText: \"Select a Leg to color\"\n            }\n\t\t};\n\n    this.getWindowOffset = this.getWindowOffset.bind(this)\n\n\t}\n    createGraph(){\n        let that = this\n        // take state of graph and multiple to get num\n        let cells = parseInt(this.state.setGraphSize.x) * parseInt(this.state.setGraphSize.y)\n        if(!cells){\n            console.error('No cell values')\n            return\n        }\n        // console.log(cells)\n        that.setState({\n            boxesToRender:Array.from({length: cells}, (v, i) => i)\n        })\n        setCSSvars()\n        // sets vals in css to grid size\n        function setCSSvars(){\n            // console.log(that.state.setGraphSize)\n            let root = document.documentElement;\n            root.style.setProperty('--graph-size-x',  that.state.setGraphSize.x);\n            root.style.setProperty('--graph-size-y', that.state.setGraphSize.y);\n        }\n        setTimeout(function(){\n            that.setState({\n                startingCellNumAll: utils._calcStartingCell(that.state.setGraphSize)\n            })\n            console.log('TOP', that.state.startingCellNumAll)\n            that.calcRowVariaion()\n        })\n\n    }\n    // takes coords and type - needs access to state\n    _numToMove(x,y, type){\n        if(type === 'stop'){\n            // console.log('moveX',this.state.previousStopX )\n            // console.log('moveY', this.state.previousStopY)\n            let moveX = Math.abs(this.state.previousStopX - x)\n            // console.log('abs x', moveX)\n            let moveY = Math.abs(this.state.previousStopY - y)\n            // console.log('abs y', moveY)\n            return {\n                tempX: moveX,\n                tempY: moveY\n            }\n        } else if(type === 'leg'){\n            // console.log('prevX', this.state.previousLegX)\n            // console.log('prevY', this.state.previousLegY)\n            let moveX = Math.abs(this.state.previousLegX - x)\n            // console.log('in move previous', moveX)\n            let moveY = Math.abs(this.state.previousLegY - y)\n            // console.log('in move previous', moveY)\n            return {\n                tempX: moveX,\n                tempY: moveY\n            }\n        } else {\n            console.error(\"error in the num to move function\")\n        }\n\n    }\n    // take amount in leg with a percent - returns num to move out of total leg number\n    _percentToCoords(diffObj, percent){\n        let xNum = Math.floor((diffObj.xDiff * 0.01) * percent)\n        let yNum = Math.floor((diffObj.yDiff * 0.01) * percent)\n\n        return {xNum, yNum}\n\n    }\n    // update createCounter by 1\n    increaseCursorIdindex(){\n        let x = this.state.createCounter + 1\n        // console.log('called',x)\n        // console.log(index)\n        this.setState({\n            createCounter: x\n        })\n        // console.log('new Index', this.state.createCounter)\n    }\n    // new add driver - runs on mount and when add button clicked\n    addNewCursor(){\n\n        let newCursorObj = {\n            directions: {\n                xDir: \"left\",\n                yDir: \"bottom\"\n            },\n            pixels:{\n                moveX: 0,\n                moveY: 0\n            },\n            id: this.state.createCounter,\n            name: `cursor ${this.state.createCounter + 1}`,\n            color: this.state.colors[this.state.createCounter],\n            show:false\n        }\n        // console.log('id',newCursorObj.id)\n        let arr = []\n        arr.push(newCursorObj)\n        let allCursors = this.state.cursorArr.concat(arr)\n        // console.log(allCursors)\n        this.setState({\n            cursorArr: allCursors\n        })\n        this.increaseCursorIdindex()\n        this.changeCursor('new-cursor', newCursorObj.id)\n\n    }\n    // make new driver the selectedDriver on add\n    changeCursor(type, cursorID){\n        //set new driver to be the selectedDriver\n        if(type === 'new-cursor')\n            this.setState({\n                cursorIndex: cursorID,\n                colorType: \"\"\n            })\n        else if(type === 'change-cursor'){\n            this.setState({\n                cursorIndex: cursorID,\n            })\n        }\n    }\n    removeDriver(event){\n        // get the full name of the driver\n        let cursorName = event.event.target.dataset.key\n        // filter out driver by that name\n        let cursor = this.state.cursorArr.filter(obj => {\n             return (obj.name === cursorName.toLowerCase() ? obj : false)\n        })\n        // console.log(this.state.cursorArr)\n        // change to next available one lower than the deleted one\n        for (var i = this.state.cursorArr.length - 1; i >= 0; i--) {\n            if(cursor[0].id > this.state.cursorArr[i].id){\n                this.changeCursor('change-cursor', this.state.cursorArr[i].id)\n            }\n        }\n        console.log(this.state.cursorArr)\n        let that = this\n        setTimeout(function(){\n\n            let index = that.state.cursorArr.indexOf(cursor[0])\n            // splice out of cursorArr\n            that.state.cursorArr.splice(index,1)\n            that.setState({\n                cursorArr: that.state.cursorArr\n            })\n            console.log(that.state.cursorArr)\n        })\n    }\n    // runs on load using pre-loaded data and when form submitted\n    updateCursorwithData(driverData){\n        let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n        // console.log(selectedDriver)\n        // get from api or form\n        let legName = driverData.activeLegID\n        // correlate with stops- letters to match stops needed\n        let firstLetter = legName[0]\n        let secondLetter = legName[1]\n        // get stop coords = filter ones that match\n        let firstStopOfLeg = this.state.stops.filter(stop => {\n            return stop.name === firstLetter\n        })\n        let lastStopOfLeg = this.state.stops.filter(stop => {\n            return stop.name === secondLetter\n        })\n        //calc abs distance bwt coords  - coords for first and last\n        let diffObj = utils._absDiff(firstStopOfLeg[0], lastStopOfLeg[0])\n        // console.log(diffObj)\n\n        let progress = parseInt(driverData.legProgress)\n        // takes number of moves and percent - returns number of moves that is\n        let numToMove = utils._percentToCoords(diffObj, progress)\n        // takes coords for first, last and how many -returns up / down & COORDS\n        let { x, y } = utils._getDriverCoords(firstStopOfLeg[0], lastStopOfLeg[0], numToMove)\n        console.log(x, y)\n        let moves = utils._getDriverCoords(firstStopOfLeg[0], lastStopOfLeg[0], numToMove)\n        // convert the number to move to pixels\n        let driverProgressinPixels = utils._convertToPixels(x, y)\n        console.log(driverProgressinPixels)\n        //\n        selectedDriver.pixels = driverProgressinPixels\n        selectedDriver.data = driverData\n\n        selectedDriver.driverCoords = moves\n\n\n        this.state.cursorArr[this.state.cursorIndex] = selectedDriver\n        console.log('update', this.state.cursorArr)\n        console.log('update', this.state.cursorArr)\n\n\n        this.setState({\n            cursorArr: this.state.cursorArr\n        })\n        // console.log('after', this.state.cursorArr)\n    }\n    // on click set driver with coords and send to child\n    updateDriverWithCoords(coords, type){\n\n        let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n        let cursorArr = [...this.state.cursorArr]\n         if(type === \"form\"){\n            // reset to zero\n            this._resetTruck()\n            // from form\n            coords = this._setStopCoords('driver',\n            this.state.cursorFormX, this.state.cursorFormY)\n            // toggle driver to first stop of map start\n        } else if(type === \"checkbox\"){\n            if(this.state.iconStartAtfirstStop){\n                coords = this._setStopCoords('driver',\n                coords.x, coords.y)\n                selectedDriver.driverCoords.x = this.state.stops[0].x\n                selectedDriver.driverCoords.y = this.state.stops[0].y\n                console.log('S', selectedDriver)\n                this.setState({\n                    cursorArr: cursorArr\n                })\n                this.updateDriverData()\n                // else start at beginning\n            } else if(!this.state.iconStartAtfirstStop){\n                coords = this._setStopCoords('driver',\n                coords.x, coords.y)\n                selectedDriver.driverCoords.x = 0\n                selectedDriver.driverCoords.y = 0\n                this.setState({\n                    cursorArr: cursorArr\n                })\n                this.updateDriverData()\n            }\n\n        } else if(type === \"slider\"){\n            // reset to zero\n            // this._resetTruck()\n            // from params\n\n            coords = this._setStopCoords('driver',\n            coords.x, coords.y)\n        } else if(type === \"manual\"){\n            // console.log(\"LOAD\")\n            // reset to zero\n            this._resetTruck()\n            coords = this._setStopCoords('driver', coords.x, coords.y)\n            cursorArr[this.state.cursorIndex].driverCoords = {x: 0, y: 0}\n        }\n        // console.log(coords)\n        // subtract for icon positionSelect\n        coords.pixels.moveX = coords.pixels.moveX - 30\n        // console.log(cursorArr[this.state.selectedDriver])\n        // update the values in the object\n        cursorArr[this.state.cursorIndex].directions = coords.directions\n        cursorArr[this.state.cursorIndex].pixels = coords.pixels\n        //console.log(cursorArr)\n        // set new driver vals\n        this.setState({\n            cursorArr: cursorArr\n        })\n    }\n    // calc up to driver position to color\n    colorCompleted(legID, type){\n        let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n    \tvar arr = this.state.legs.filter(leg => {\n            // console.log(leg.legID)\n    \t\treturn leg.legID === legID\n    \t})\n\n        //index for arr of cell nums\n        let holdingArrIndex = this._legIndex(arr[0].legID)\n        // console.log(holdingArrIndex)\n        // index for json with legs info\n        let dataIndex = this.state.legs.indexOf(arr[0])\n        // console.log('holding' ,holdingArrIndex)\n    \t//all previous legs to color\n        // var previousLegNames = this.state.legs.slice(0,index)\n\n        // get arr of all previous arrs to cell nums\n        // var previousLegArrs = this.state.holdAllLegColorArrs.slice(0, holdingArrIndex)\n        //get current arr leg of cell nums\n        // var currentLegArr = this.state.holdAllLegColorArrs[holdingArrIndex]\n        // console.log('previouslegs', previousLegArrs)\n        // console.log('currnt arr', currentLegArr)\n        // get current and next leg json info\n        let thisLeg = this.state.legs[dataIndex]\n        // console.log(thisLeg)\n        let legFirstStop = this.state.stops.filter(stop => {\n            return stop.name === thisLeg.startStop\n        })\n        // console.log(legFirstStop)\n        let legLastStop = this.state.stops.filter(stop => {\n            return stop.name === thisLeg.endStop\n        })\n        // get first and end coords\n        let stopStartCoords = {\n            x: legFirstStop[0].x,\n            y: legFirstStop[0].y\n        }\n        let stopEndCoords = {\n            x: legLastStop[0].x,\n            y: legLastStop[0].y\n        }\n        // console.log(stopStartCoords)\n        // console.log(stopEndCoords)\n        // get diff to get number of moves\n        // let diffObj = utils._absDiff(stopStartCoords, stopEndCoords)\n        // console.log(diff)\n        // percent driver is complete of leg\n        // let progress = parseInt(this.state.driver.legProgress)\n        // // takes number of moves and percent - returns number of moves that is partial of leg in coords\n        // let numToMove = utils._percentToCoords(diffObj, progress)\n        // console.log('num to move', numToMove)\n        // console.log(this.state.legStartEndCellNums)\n        // cell nums\n        let { start, end } = this.state.legStartEndCellNums[holdingArrIndex]\n        // console.log('start/end', start, end)\n        // set startingCell and start x / y\n\n        // this.state.startingCellNumPartial: start/end cells\n        // 24034 34034\n        // this.partialLegStartCoords: start x/y\n        // {x: 35, y: 80}\n        // this.state.partialLegEndCoords: end\n        // {x: 35, y: 30}\n        var previousLegArrs = this.state.holdAllLegColorArrs.slice(0, holdingArrIndex)\n\n        this.setState({\n            startingCellNumPartial: start,\n            partialLegStartCoords: stopStartCoords,\n            partialLegEndCoords: stopEndCoords,\n            holdingCompletedArrs: [...previousLegArrs]\n        })\n        // console.log('startingCell', start)\n        // console.log('stop/start', stopStartCoords)\n        // console.log('partial leg end', stopEndCoords)\n        // console.log('all', [...previousLegArrs])\n\n\n        // console.log(this.state.holdingCompletedArrs)\n        // console.log(start, end)\n        // set state to start coords\n        // inout end coords\n        // this.state.driverCoords.x = 20\n        // this.state.driverCoords.y = 13\n        // console.log(selectedDriver)\n        if(type === \"data\"){\n            // console.log(selectedDriver)\n            this.legStartEnd(selectedDriver.driverCoords.x,selectedDriver.driverCoords.y, 'partial')\n        } else if(type === \"coords\"){\n            this.legStartEnd(selectedDriver.driverCoords.x,selectedDriver.driverCoords.y, 'partial')\n        }\n\n    }\n    // calc num of cells to vertial based on grid size\n    calcRowVariaion(){\n        // formula - move up/down is the same value as x and y\n        this.setState({\n            moveRowCells: parseInt(this.state.setGraphSize.x)\n        })\n\n    }\n    colorGrid(x, y, type){\n        // console.log(this.state.startingCellNumAll)\n        // console.log(this.state.previousStopX)\n        // console.log(this.state.previousStopY)\n        // calc num of units to move based on prev position\n        let tempCellNumsArr = []\n\n\n        let tempX = x\n        let tempY = y\n        let tempCellNum\n        if(type === 'all'){\n            tempCellNum = this.state.startingCellNumAll\n        }\n\n        // console.log(tempX)\n        // convert based on next move using above function\n        tempX = this._numToMove(tempX, tempY, 'stop').tempX\n        tempY = this._numToMove(tempX, tempY, 'stop').tempY\n        // tempY = this._numToMove(tempX, tempY, 'stop').moveY\n        // console.log('tempx', tempX)\n        // console.log('tempy', tempY)\n\n        // on first move on grid only - for bottom corner\n        if(this.state.previousStopX === 0 && this.state.previousStopY  === 0){\n            tempX = tempX - 1\n            tempY = tempY - 1\n            tempCellNumsArr.push(tempCellNum)\n        }\n        // move in tandem while both vals exist\n        while(tempX && tempY){\n            // console.log(this.state.moveRowCells)\n            // if last was les than current- do this\n            if(this.state.previousStopY < y){\n                tempCellNum = tempCellNum - this.state.moveRowCells\n                tempCellNumsArr.push(tempCellNum)\n                // console.log('temp', tempCellNumsArr)\n            } else if(this.state.previousStopY > y){\n                tempCellNum = tempCellNum + this.state.moveRowCells\n                tempCellNumsArr.push(tempCellNum)\n            }\n            if(this.state.previousStopX < x){\n                tempCellNum = tempCellNum + 1\n                tempCellNumsArr.push(tempCellNum)\n\n            } else if(this.state.previousStopX > x){\n                tempCellNum = tempCellNum - 1\n                tempCellNumsArr.push(tempCellNum)\n            }\n            tempX = tempX - 1\n            tempY = tempY - 1\n        }\n         // axis - loop over the only one left X or Y\n        let loopAxis\n        (tempY ? loopAxis = tempY : loopAxis = tempX)\n        // if only on val left, move on its own\n        for (var i = 0; i < loopAxis; i++) {\n            if(tempY){\n                if(this.state.previousStopY < y){\n                    tempCellNum = tempCellNum - this.state.moveRowCells\n                    tempCellNumsArr.push(tempCellNum)\n\n                } else if(this.state.previousStopY > y){\n                    tempCellNum = tempCellNum + this.state.moveRowCells\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            } else if(tempX){\n                if(this.state.previousStopX < x){\n                    tempCellNum = tempCellNum + 1\n                    tempCellNumsArr.push(tempCellNum)\n                } else if(this.state.previousStopX > x){\n                    tempCellNum = tempCellNum - 1\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            }\n        }\n        // console.log(tempCellNumsArr)\n        // holdAllStopColorIndexes - cells for color or entire plots - spread out\n        if(type === 'all'){\n\n            this.setState({\n                previousStopX: x,\n                previousStopY: y,\n                startingCellNumAll: tempCellNum,\n                holdAllStopColorIndexes: [...this.state.holdAllStopColorIndexes, ...tempCellNumsArr]\n            })\n        }\n\n    }\n    // takes x y and determine start and end cells\n    legStartEnd(x,y, type){\n\n        let tempCellNumsArr = []\n\n        let tempX = x\n        let tempY = y\n        // start remains the same\n        let tempStartNum\n        // cell num changes with calcs\n        let tempCellNum\n\n\n        if(type === 'all'){\n            // on first move only\n            if(this.state.previousLegEndCell === 0){\n                tempStartNum = this.state.startingCellNumAll\n                tempCellNum = this.state.startingCellNumAll\n                // tempStartNum = this.state.startingCellNumAll\n            } else {\n                tempStartNum = this.state.previousLegEndCell\n                tempCellNum = this.state.previousLegEndCell\n            }\n        } else if(type === 'partial'){\n            // previous X and Y wrong in here\n\n            // console.log('previousX', this.state.previousLegEndCell)\n            // console.log('previousY', this.state.previousLegEndCell)\n            // start of leg\n            tempCellNum = this.state.startingCellNumPartial\n            // console.log('staring cell' ,this.state.startingCellNumPartial)\n            // set to start coords - it should compute to end coord form here\n            // console.log('leg start x', this.state.partialLegStartCoords.x)\n            // console.log('leg startStop y', this.state.partialLegStartCoords.y)\n            // console.log('prevX',this.state.previousLegX)\n            // console.log('prevXY',this.state.previousLegY)\n            // need to reset previous x and y\n            this.setState({\n                previousLegX: this.state.partialLegStartCoords.x,\n                previousLegY: this.state.partialLegStartCoords.y\n            })\n            // console.log('prevX',this.state.previousLegX)\n            // console.log('prevXY',this.state.previousLegY)\n            // console.log('to x', x)\n            // console.log('to y', y)\n            // console.log(this.state.previousStopX)\n            // console.log(this.state.previousStopY)\n            // console.log('previous',this.state.partialLegStartCoords)\n            // console.log('previousx', this.state.previousStopX)\n            // console.log('previousy', this.state.previousStopY)\n            // console.log('currentx ', x)\n            // console.log('currenty', y)\n\n\n\n        }\n\n        // console.log('start temp', tempCellNum)\n        // console.log('staring cell', tempStartNum)\n        // convert based on next move using above function\n        ({ tempX, tempY } = this._numToMove(tempX, tempY, 'leg'))\n        // tempY = this._numToMove(tempX, tempY, 'leg').tempY\n        // console.log('x to move',tempX)\n        // console.log('y to move', tempY)\n        // on first move on grid only - for bottom corner\n        if(this.state.previousLegX === 0 && this.state.previousLegY  === 0){\n            tempX = tempX - 1\n            tempY = tempY - 1\n            tempCellNumsArr.push(tempCellNum)\n        }\n        // move in tandem while both vals exist\n        while(tempX && tempY){\n            // if last was les than current- do this\n            if(this.state.previousLegY < y){\n                tempCellNum = tempCellNum - this.state.moveRowCells\n                tempCellNumsArr.push(tempCellNum)\n            } else if(this.state.previousLegY > y){\n                tempCellNum = tempCellNum + this.state.moveRowCells\n                tempCellNumsArr.push(tempCellNum)\n            }\n            if(this.state.previousLegX < x){\n                tempCellNum = tempCellNum + 1\n                tempCellNumsArr.push(tempCellNum)\n\n            } else if(this.state.previousLegX > x){\n                tempCellNum = tempCellNum - 1\n                tempCellNumsArr.push(tempCellNum)\n            }\n            tempX = tempX - 1\n            tempY = tempY - 1\n        }\n         // axis - loop over the only one left X or Y\n        let loopAxis\n        (tempY ? loopAxis = tempY : loopAxis = tempX)\n        // if only on val left, move on its own\n        for (var i = 0; i < loopAxis; i++) {\n            if(tempY){\n\n                if(this.state.previousLegY < y){\n                    tempCellNum = tempCellNum - this.state.moveRowCells\n\n                    tempCellNumsArr.push(tempCellNum)\n\n                } else if(this.state.previousLegY > y){\n                    tempCellNum = tempCellNum + this.state.moveRowCells\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            } else if(tempX){\n\n                if(this.state.previousLegX < x){\n                    tempCellNum = tempCellNum + 1\n                    tempCellNumsArr.push(tempCellNum)\n                } else if(this.state.previousLegX > x){\n                    tempCellNum = tempCellNum - 1\n                    tempCellNumsArr.push(tempCellNum)\n                }\n            }\n        }\n        // console.log('last', tempCellNum)\n        let legCellNums = {\n            start: tempStartNum,\n            end: tempCellNum\n        }\n        // console.log('coords', legCellNums)\n        // each array b4 being pushing into main one\n        // console.log('tempCellNumsArr', tempCellNumsArr)\n        // console.log('holdAllLegColorArrs', this.state.holdAllLegColorArrs)\n        // console.log('x', x)\n        // console.log('y', y)\n        // - make this previousLast\n        if(type === 'all'){\n            this.setState({\n                previousLegEndCell: tempCellNum,\n                previousLegX: x,\n                previousLegY: y,\n                legStartEndCellNums:[...this.state.legStartEndCellNums,legCellNums],\n                holdAllLegColorArrs: [...this.state.holdAllLegColorArrs, tempCellNumsArr]\n\n            })\n            // console.log('all', this.state.holdAllLegColorArrs)\n            // console.log('end of run x', this.state.previousLegX)\n            // console.log('end of run y', this.state.previousLegY)\n        } else if(type === 'partial'){\n            // console.log('cells arr',tempCellNumsArr)\n            this.setState({\n                previousStopX: x,\n                previousStopY: y,\n                startingCellNumPartial: tempCellNum,\n                holdingCompletedArrs:[...this.state.holdingCompletedArrs, tempCellNumsArr]\n\n            })\n            // console.log('complete', this.state.holdingCompletedArrs)\n\n        }\n    }\n\n    colorAllStops(){\n        // console.log('fired')\n        // let arr = [1,2,3,4,5]\n        // let stops = [\n        //     {x:20, y:10},\n        //     {x: 20, y: 20}\n        //     // {x: 25, y: 30},\n        //     // {x: 25, y: 80}\n        // ]\n        // let that = this\n        // stops.map((stop, index) => {\n        //         setTimeout(function(){\n        //             that.colorGrid(stop.x, stop.y)\n            // console.log(index + 1)\n            // console.log(stops.length)\n                // if((index + 1) === that.state.stops.length){\n                //     console.log('push')\n                     \t// that.setState({\n                       // \tpushToChildArr:that.state.holdingAllIndexes\n                       // })\n                //  }\n            //     },100*(index))\n            // })\n\n            this.setState({\n                finalStopColorArr: this.state.holdAllStopColorIndexes\n            })\n            // console.log(this.state.finalStopColorArr)\n        // on click push to child state\n    }\n    // on click pass props to child\n    colorCompletedStops(){\n            console.log(this.state.holdingCompletedArrs)\n            let merged = [].concat.apply([], this.state.holdingCompletedArrs);\n            console.log(merged)\n            this.setState({\n                finalCompletedColorsArr: merged\n            })\n    }\n    // takes driver coords and finds the leg start\n    _getLegStartfromCoords(){\n        let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n        let coords = selectedDriver.driverCoords\n        // console.log('driver coords', coords)\n        // if x & y is between the stops\n        let firstStop = this.state.stops.filter((coord, index) => {\n            let stop1 = this.state.stops[index]\n            let stop2 = this.state.stops[index + 1]\n            // console.log('stop1', stop1)\n            // console.log('stop2', stop2)\n            // console.log('x',coords.x)\n            // console.log('y', coords.y)\n        \tif(stop2 === undefined) return\n        \tif( //x/y are both btw\n                (\n                    ((coords.y > stop1.y && coords.y < stop2.y) ||\n                    (coords.y < stop1.y && coords.y > stop2.y)) &&\n                    ((coords.x > stop1.x && coords.x < stop2.x) ||\n                    (coords.x < stop1.x && coords.x > stop2.x))\n                )\n            ){\n                console.log('both are btw')\n                    return coord\n            } else if(\n                // y is bwn and x is equal\n                (\n                    ((coords.y > stop1.y && coords.y < stop2.y) ||\n                    (coords.y < stop1.y && coords.y > stop2.y))\n                    &&\n                    (coords.x === stop1.x && coords.x === stop2.x)\n                )\n            ){\n                console.log('y btw. x equal' )\n                    return coord\n            } else if(\n                // x is bwn and y is equal\n                (\n                    ((coords.x > stop1.x && coords.x < stop2.x) ||\n                    (coords.x < stop1.x && coords.x > stop2.x))\n                    &&\n                    (coords.y === stop1.y && coords.y === stop2.y)\n                )\n            ){\n                console.log('x btw. y equal' )\n\n                return coord\n            } else if(\n                //coords are exact match\n                (\n                    coords.x === stop1.x && coords.y === stop1.y\n                )\n\n            ){\n                console.log('both equal')\n                return coord\n                // first stop  on map with nothing previous\n            } else if(index === 0 && (coord === this.state.stops[0])){\n                // console.log('first stop on map')\n                    return coord\n            } else {\n                // not within the stops\n                return null\n            }\n        })\n                // console.log('return firstStop', firstStop)\n        return firstStop\n    }\n    // takes driver coords from state and sets new progress and leg\n    updateDriverData(){\n        let selectedDriver = this.state.cursorArr[this.state.cursorIndex]\n        // console.log('selectedDriver', this.state.cursorIndex)\n        let firstStop = this._getLegStartfromCoords()[0]\n        // only works with map stops!\n        if(!firstStop){\n            console.error('Not a map stop')\n            return false\n\n        }\n        let firstStopIndex = this.state.stops.indexOf(firstStop)\n        let secondStop = this.state.stops[firstStopIndex+1]\n        let diff = utils._absDiff(firstStop, secondStop)\n        // console.log(selectedDriver.driverCoords)\n        // run once for x and for y\n        let percent = utils._findPercentFromDriverCoords(firstStop, selectedDriver.driverCoords, diff.yDiff, diff.xDiff)\n        // /console.log('percent', percent)\n        // console.log(firstStop.name)\n        let currentLeg = this.state.legs.filter(leg => {\n            return leg.startStop === firstStop.name\n        })\n        let newPositionWpercent = {\n            activeLegID: currentLeg[0].legID,\n            legProgress: percent.toString()\n        }\n        //  console.log(newPositionWpercent)\n        let cursorArr = [...this.state.cursorArr]\n        // console.log(cursorArr[this.state.cursorIndex])\n        // console.log(selectedDriver)\n        // update the values in the object\n\n        selectedDriver.data = newPositionWpercent\n\n        // console.log(selectedDriver)\n        cursorArr[this.state.cursorIndex] = selectedDriver\n        // console.log(cursorArr)\n        this.setState({\n            cursorArr: cursorArr,\n            selectedDriver: newPositionWpercent\n        })\n        // console.log(newPositionWpercent)\n\n        // console.log('new driver state', this.state.selectedDriver)\n        return true\n    }\n    // resets data but does not move\n    _resetTruck(){\n        this.setState({\n                finalDriverMoveObj: {\n                directions: {\n                    xDir: \"left\",\n                    yDir: \"bottom\"\n                },\n                pixels:{\n                    moveX: 0,\n                    moveY: 0\n                }\n            }\n        })\n    }\n    // renders all truck instances\n    renderCursor(){\n        // console.log('CI',this.state.cursorIndex)\n        if(this.state.cursorArr && Array.isArray(this.state.cursorArr)){\n                return this.state.cursorArr.map((driverData,i) => {\n                // console.log(driverDyata)\n                return <Cursor show={driverData.show} coords={driverData} key={i} colors={this.state.colors} counter={this.state.createCounter}/>\n            })\n        } else {\n            return null\n        }\n\n    }\n    // position utils-container based on size with graph\n    handleStyle(){\n\n        // set to false temorarily\n        if(this.state.floatToggle){\n            console.log('float', this.state.floatToggle)\n            if(this.state.utilsTop){\n                return {\n                    marginBottom: this.state.utilsTop.toString() + \"px\"\n                }\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n\n    }\n\n     render() {\n        // console.log(this.getWindowOffset())\n    \treturn(\n            <main className=\"page-container\">\n            <Modal\n                open={this.state.modalState}\n                cells={Math.sqrt(parseInt(this.state.setGraphSize.x) * parseInt(this.state.setGraphSize.y))}\n                onChange={this.handleChange.bind(this)}\n                onSubmit={this.handleSubmit.bind(this)}\n                plots={this.state.plotObjs.length ? this.state.plotObjs : undefined}\n                />\n                <div className=\"grid-container\" style={this.handleStyle.bind(this)()}>\n                    <div className=\"grid\">\n                    {this.renderCursor()}\n                        <Stop\n                            coords={this.state.stopsDirsArr}\n                            toggleStopNames={this.state.showStopNames}/>\n                        <Box\n                            toRender={this.state.boxesToRender} stopsColor={(this.state.finalStopColorArr.length ? this.state.finalStopColorArr  : null)}\n                            legsColor={(this.state.finalLegColorObj ? this.state.finalLegColorObj : null)}\n                            completeColor={(this.state.finalCompletedColorsArr.length ? this.state.finalCompletedColorsArr : null)}\n                            type={this.state.colorType}\n                            legColorsCounter={this.state.legColorsCounter}\n                            completedColorsCounter={this.state.completedColorsCounter}\n                            allColorsCounter={this.state.allColorsCounter}\n                            selectedDriver={this.state.cursorIndex}\n                        />\n\n\n\n                    </div>\n                </div>\n                <div className={`${this.state.floatToggle? \"float-toggle\" :\"\"} utils-container`}>\n                    <div className=\"driver-controls\">\n                        <div className=\"upper-controls\">\n                        <MaterialButton\n                            onClick={this.handleClick.bind(this)}\n                            buttonNumber={4}\n                            size=\"small\"\n                            text=\"Show Window\"\n                            type=\"primary-button\"\n                            color=\"default\"\n                            />\n\n\n                        </div>\n                        <Tabs\n                            onChange={this.handleChange.bind(this)}\n                            onSubmit={this.handleSubmit.bind(this)}\n                            onClick={this.handleClick.bind(this)}\n                            values={{x:this.state.cursorFormX, y:this.state.cursorFormY}}\n                            legs={this.state.legs ? this.state.legs : null}\n                            texts={this.state.texts}\n                            cursorArr={this.state.cursorArr.length ? this.state.cursorArr : null}\n                            colors={this.state.colors}\n                            selectedDriver={this.state.cursorIndex}\n                            />\n\n                            <Snackbar\n                                snackbarOpen={this.state.snackbarOpen} onClick={this.handleClick.bind(this)}\n                            />\n                    </div>\n                </div>\n            </main>\n        )\n    }\n    handleModalOpenClose(){\n        this.state.modalState = !this.state.modalState\n        this.setState({\n            modalState: this.state.modalState\n        })\n        // console.log('handleModalOpenClose')\n        // console.log(this.state.modalState)\n    }\n    handleSliderChange(evt){\n        let that = this\n        // set to false if set to true elsewhere\n        if(this.state.cancelSlide){\n            this.state.cancelSlide = false\n            this.setState({\n                cancelSlide: this.state.cancelSlide\n            })\n        }\n        // if slider\n        if(evt.value){\n            console.log('slider coords', this.state.sliderCoordsArrs)\n            console.log('slider coords', this.state.finalSliderCoords)\n            // flatten on first use & when when toggleStartCheckbox called\n            if(!this.state.finalSliderCoords.length){\n                this.setState({\n                    finalSliderCoords: this.state.sliderCoordsArrs.flat()\n                })\n            }\n            console.log('final', this.state.finalSliderCoords)\n            //manage by leg\n            //make giant array of all coords\n            //for every slider increment move ten\n            let that = this\n            function getPreviousSliderState(){\n                 let previousState\n                    if(that.state.initialSliderChange){\n                        previousState = 0\n                        that.setState({\n                            initialSliderChange: false,\n                            previousState: previousState\n                            })\n                      } else {\n                        previousState = that.state.currentState\n                          that.setState({\n                              previousState: previousState\n                          })\n                      }\n                    let currentState = evt.value\n                    that.setState({\n                        currentState: currentState\n                    })\n\n                }\n                getPreviousSliderState()\n\n            function sliderDiff(){\n                let diff\n                // if first move, previous will be null\n                if(!that.state.previousState){\n                    diff = that.state.currentState\n                } else {\n                    diff = that.state.currentState - that.state.previousState\n                }\n                // console.log('diff', diff)\n                return diff\n            }\n            setTimeout(function(){\n                console.log('val', that.state.currentState)\n                // console.log('diff', sliderDiff())\n                // console.log(that.state.finalSliderCoords)\n\n            },100)\n            // move back and forth\n            function handleIndexValue(){\n                if(that.state.cancelSlide){\n                    return\n                }\n                if(sliderDiff() > 0){\n                    that.setState({\n                        sliderIndex: that.state.sliderIndex + 1\n                    })\n                } else if(sliderDiff() < 0){\n                    that.setState({\n                        sliderIndex: that.state.sliderIndex - 1\n                    })\n                }\n                // console.log('val', that.state.currentState)\n                // console.log('diff', sliderDiff())\n                console.log('index', that.state.sliderIndex)\n            }\n            function moveDriver(){\n                // when checkbox in toggleStartCheckbox cancel here\n                if(that.state.cancelSlide){\n                    console.log('CANCEL')\n                    return\n                }\n                // if zero cannot movebackwards\n                console.log('state',that.state.finalSliderCoords)\n                if(!that.state.slideIndex){\n                 //    console.log('index', that.state.sliderIndex)\n                    console.log('state',that.state.finalSliderCoords)\n                 // console.log(that.state.finalSliderCoords[that.state.sliderIndex])\n                    if((!that.state.finalSliderCoords[that.state.sliderIndex]) && (!that.state.finalSliderCoords[that.state.sliderIndex] )){\n                        console.error(\"Cannot move backwards past beginning of graph.\")\n                        return\n                    }\n                }\n                let currentCursor = that.state.cursorArr[that.state.cursorIndex]\n\n\n                that.updateDriverWithCoords({\n                    x: that.state.finalSliderCoords[that.state.sliderIndex].x,\n                    y: that.state.finalSliderCoords[that.state.sliderIndex].y\n                }, \"slider\")\n\n            }\n                var i = 0\n                looper(i)\n                // move driver x times with delay\n                function looper () {\n                   setTimeout(function () {\n                       if(sliderDiff() >= 0){\n                           if (i < sliderDiff()) {\n                               handleIndexValue()\n                               moveDriver()\n                               looper();\n                           }\n                           i = i + 1\n                       } else if(sliderDiff() < 0){\n                           if (i > sliderDiff()) {\n                               handleIndexValue()\n                               moveDriver()\n                               looper();\n                           }\n                           i = i - 1\n                       }\n                  }, 10)\n                }\n\n            // }\n            sliderDiff()\n        }\n    }\n\n\n    toggleSnackbar(){\n        this.state.snackbarOpen = !this.state.snackbarOpen\n        console.log(this.state.snackbarOpen)\n        this.setState({\n            snackbarOpen: this.state.snackbarOpen\n        })\n        console.log(this.state.snackbarOpen)\n        return\n    }\n    // https://stackoverflow.com/questions/16863917/check-if-class-exists-somewhere-in-parent-vanilla-js/19049101\n    hasParentClass(element, checkClass){\n        if (element.className.split(' ').indexOf(checkClass)>=0) return true;\n        return element.parentElement && this.hasParentClass(element.parentElement, checkClass);\n    }\n    toggleShowCursor(e){\n        let currentCursor = this.state.cursorArr[this.state.cursorIndex]\n        currentCursor.show = !currentCursor.show\n        const cursorArrCopy = [...this.state.cursorArr]\n        // https://stackoverflow.com/a/47580775/5972531\n        this.setState({\n            cursorArr: cursorArrCopy\n        })\n    }\n    handleClick(event){\n        console.log(event)\n        // console.log(this.hasParentClass(event.target, \"snackbar\")event.target)\n        if(!event) return\n        // console.log(event)\n        // For TAB clicks - sending strings back here as return vals\n            // to remove drivers from tabs when clicking X\n            if(event.event && event.iconClick && event.cursor){\n                // don't remove single driver\n                if(this.state.cursorArr.length > 1){\n                    this.removeDriver(event)\n                }\n                // to detect which driver is selected\n            } else if(event.event && !event.iconClick && event.cursor){\n                // use data prop on html\n                let tabClickedIndex = parseInt(event.event.target.dataset.key)\n                // change to another cursor based on click\n                this.changeCursor('change-cursor', tabClickedIndex)\n                let that = this\n                setTimeout(function () {\n                    console.log('TAB',tabClickedIndex)\n                    console.log('current', that.state.cursorIndex)\n                    that.toggleShowCursor(event)\n                })\n\n                // if events and not strings\n            } else if(event.target.classList.contains('add-button')){\n                event.stopPropagation()\n                // call add new driver\n                    this.addNewCursor()\n\n            } else if(event.target.classList.contains('secondary-button')){\n            event.stopPropagation()\n                if(event.target.dataset.number === \"1\"){\n                    this.colorAllStops()\n                    // console.log(this.state.allColorsCounter)\n                    this.setState({\n                        allColorsCounter: this.state.allColorsCounter + 1,\n                        colorType: \"all\"\n                    })\n                } else if(event.target.dataset.number === \"2\"){\n                    this.colorCompletedStops()\n                    this.setState({\n                        completedColorsCounter: this.state.completedColorsCounter + 1,\n                        colorType: \"complete\"\n                    })\n                }\n                // if button and has parent class of snackbar\n            } else if(event.target.type === 'button' && this.hasParentClass(event.target, \"snackbar\") ){\n                console.log('oks')\n                    // send this to child to close\n                    this.setState({\n                        snackbarOpen: false\n                    })\n                    // for show modal button\n            } else if(event.target.dataset.number === '4' && event.target.classList.contains(\"button\")){\n                this.state.modalState = !this.state.modalState\n                this.setState({\n                    modalState: this.state.modalState\n                })\n                console.log(this.state.modalState)\n            }\n\n    }\n    handleDropdownChange(e) {\n        console.log(e.target.name)\n        if(e.target.name === 'driver-select'){\n            console.log('here')\n            this.setState({cursorLegInput: e.target.value})\n        } else if(e.target.name === 'color-select'){\n            console.log('he')\n            this.setState({\n                value: e.target.value,\n                legToColorID: e.target.value\n            })\n        }\n    }\n    onDropdownSubmit(event) {\n        let selectedCursor = this.state.cursorArr[this.state.cursorIndex]\n        console.log(selectedCursor)\n        // console.log(event.target.name)\n        event.preventDefault()\n\n        if(event.target.name === 'driver-dropdown'){\n            // user needs to choose a leg else return\n            if(!this.state.cursorLegInput) return\n            let progress\n            if(!this.state.cursorInputProgress){\n                progress = 0\n            } else {\n                progress = this.state.cursorInputProgress\n            }\n            let updatedData = {\n                activeLegID: this.state.cursorLegInput,\n                legProgress: progress\n            }\n            selectedCursor.data = updatedData\n            //update driver position in state\n            this.setState({\n                cursorArr: this.state.cursorArr\n            })\n\n            let that = this\n            setTimeout(function(){\n                // that.addNewCursor()\n                that.updateCursorwithData(selectedCursor.data)\n                that.colorCompleted(selectedCursor.data.activeLegID)\n                console.log(that.state)\n            },100)\n\n        } else if(event.target.name === 'color'){\n            // console.log('color', this.state.legToColorID)\n            this.colorLeg(this.state.legToColorID)\n\n        }\n\n    }\n    // hold vals in input until next entered\n    handleChange(evt) {\n        // console.log(evt.target)\n        // console.log(evt)\n        // console.log(evt.target.parentNode)\n        // console.log(evt.target.parentNode)\n        // console.log(evt.target.nextSibling)\n        // console.log(evt.target.name)\n\n        // to filter out undefined errors\n            if(evt.target.name === 'x' && evt.currentTarget.parentNode.parentNode.parentNode.classList.contains('graph-size')){\n            let xVal = evt.target.value\n            // onChange store the input sizes\n            this.setState(prevState => ({\n                storeGraphSize: {\n                    ...prevState.storeGraphSize,\n                    x: xVal\n                }\n            }))\n            // console.log(this.state.storeGraphSize)\n            } else if(evt.target.name === 'y' && evt.currentTarget.parentNode.parentNode.parentNode.classList.contains('graph-size')){\n                let yVal = evt.target.value\n                this.setState(prevState => ({\n                    storeGraphSize: {\n                        ...prevState.storeGraphSize,\n                        y: yVal\n                    }\n                }))\n                console.log(this.state.storeGraphSize)\n            } else if(evt.target.name === 'x' && !evt.currentTarget.parentNode.parentNode.parentNode.classList.contains('graph-size')){\n\n                this.setState({\n                    cursorFormX: evt.target.value\n                })\n            } else if(evt.target.name === 'y' && !evt.currentTarget.parentNode.parentNode.parentNode.classList.contains('graph-size')){\n                this.setState({\n                    cursorFormY: evt.target.value,\n                })\n            } else if(evt.target.name === 'position-select'){\n\n            } else if(evt.target.name === 'driver-select'){\n                this.setState({cursorLegInput: evt.target.value})\n            } else if(evt.target.name === 'progress-input'){\n                console.log('hi')\n                this.setState({cursorInputProgress:evt.target.value})\n                // comes from names on checkboxes\n            } else if(evt.target.name === 'float-toggle'){\n                this.state.floatToggle = !this.state.floatToggle\n\n                let that = this\n                // go to bottom on toggle\n                let offSet = this.getWindowOffset()\n                if(offSet){\n                    console.log('HERE', offSet)\n                    this.setState({\n                        utilsTop: offSet,\n                        floatToggle: this.state.floatToggle\n                    })\n                }\n            } else if(evt.target.name === \"stop-name-toggle\"){\n                this.state.showStopNames = !this.state.showStopNames\n\n                this.setState({\n                    showStopNames: this.state.showStopNames\n                })\n            } else if(evt.target.name === 'color-select'){\n                this.setState({\n                    value: evt.target.value,\n                    legToColorID: evt.target.value\n                })\n            } else if(evt.target.name === \"icon-start\"){\n                    this.toggleStartCheckbox()\n            // plot points from modal input\n        } else if\n        (evt.target.name === \"xSelect\" ||\n         evt.target.name === \"ySelect\" ||\n         evt.target.classList && evt.target.classList.contains(\"close-icon\") ||\n         evt.target.nextSibling && evt.target.nextSibling.classList.contains(\"modal\")\n        )\n         {\n             // console.log(evt.target.classList)\n                if(evt.target.name === \"xSelect\"){\n                    this.setState(prevState => ({\n                        tempPlotObj: {\n                            ...prevState.tempPlotObj,\n                            x: evt.target.value\n                        }\n                    }))\n                    let that = this\n                    setTimeout(function(){\n                        that.receivePlotData(that.state.tempPlotObj)\n                    })\n                } else if(evt.target.name === \"ySelect\"){\n                    this.setState(prevState => ({\n                        tempPlotObj: {\n                            ...prevState.tempPlotObj,\n                            y: evt.target.value\n                        }\n                    }))\n                    let that = this\n                    setTimeout(function(){\n                        that.receivePlotData(that.state.tempPlotObj)\n                    })\n                    // when X is clicked trigger this - open close\n                } else if(evt.target.classList.contains(\"close-icon\")){\n\n                    this.handleModalOpenClose()\n                        // on modal close trigger this - open close\n                } else if(evt.target.nextSibling.classList.contains(\"modal\")){\n                    this.handleModalOpenClose()\n                }\n            }\n    }\n    // set plot points from inputs in modal\n    receivePlotData(obj){\n        console.log(obj)\n        if(!obj.x || !obj.y){\n            console.error(\"Must have two plot points\")\n            return\n        }\n        this.setState({\n            tempPlotObj: obj,\n            plotObjs: [...this.state.plotObjs, this.state.tempPlotObj],\n            tempPlotObj: \"\"\n        })\n    }\n    toggleStartCheckbox(){\n\n        this.state.iconStartAtfirstStop = !this.state.iconStartAtfirstStop\n        let setSliderCoords\n        let tempSliderIndex\n        // if not at first stop, include all coords in slider\n        console.log(this.state.sliderSlicedChunk)\n        if(this.state.iconStartAtfirstStop){\n            // slice off part before start\n            this.state.sliderSlicedChunk = this.state.sliderCoordsArrs.splice(0,1)\n            // reassign arr without that part\n            setSliderCoords = this.state.sliderCoordsArrs\n            // console.log(\"S\" ,setSliderCoords)\n            tempSliderIndex = 10\n            this.updateDriverWithCoords({\n                x: this.state.stops[0].x,\n                y: this.state.stops[0].y,\n            }, \"checkbox\")\n        } else {\n            // if at first stop, only allow slider from there\n            setSliderCoords = this.state.sliderSlicedChunk.concat(this.state.sliderCoordsArrs)\n            console.log('slider', this.state.sliderCoordsArrs)\n            tempSliderIndex = 0\n            this.updateDriverWithCoords({\n                x: 0,\n                y: 0\n            }, \"checkbox\")\n        }\n\n\n        this.setState({\n            cancelSlide: true,\n            iconStartAtfirstStop: this.state.iconStartAtfirstStop,\n            sliderCoordsArrs: setSliderCoords,\n            sliderIndex: tempSliderIndex,\n            // flatten array to remove/add coords when clicked\n            finalSliderCoords: setSliderCoords.flat()\n        })\n        // console.log(this.state.finalSliderCoords)\n    }\n    // buildFinalSliderArr(arrs){\n    //\n    // }\n    // empty the flatten array on each click - it's rebuilt inside iderChange\n    emptyFinalSliderArr(){\n        // if arr as len, empty it\n        if(this.state.finalSliderCoords.lenght){\n            this.setState({\n                finalSliderCoords: []\n            })\n        }\n        return\n    }\n    // add the beginning to the stops\n    addStartStop(){\n        // make an array including beginning\n        let stops = [{\n            \"name\": \"A\",\n            \"x\": 0,\n            \"y\": 0\n        }]\n        let arr = stops.concat(this.state.stopsCopy)\n        this.setState({\n            stopsCopy: arr\n        })\n    }\n    // scroll page to the bottom\n    scrollToBottom(){\n        // if(window.outerHeight > document.body.scrollHeight){\n        //     console.log('scroll bottom')\n        //     return\n        // } else {\n            console.log('scroll bottom DO')\n            window.scrollTo(0,document.body.scrollHeight)\n        // }\n    }\n    getWindowOffset(){\n        let that = this\n        let utils = document.querySelector('.utils-container')\n        let grid = document.querySelector('.grid-container')\n\n        if(utils.offsetHeight + grid.offsetHeight > window.innerHeight){\n            return utils.offsetHeight\n            // console.log('HERE')\n            // setTimeout(function(){\n            //     that.setState({\n            //         utilsTop: utils.offsetHeight\n            //     })\n            // },500)\n        } else {\n            return false\n        }\n        // if(document.body.offsetHeight > window.outerHeight){\n        //     setTimeout(function(){\n        //         console.log('set offset here', utils.offsetHeight)\n        //         that.setState({\n        //             utilsTop: utils.offsetHeight\n        //         })\n        //     },500)\n        // } else {\n        //     return false\n        // }\n    }\n\n\n    componentDidMount() {\n        let that = this\n        // create graph size based on input - COMMENT OUT\n        this.createGraph()\n        this.scrollToBottom()\n        // make scroll to the correct part of screen\n\n        // this.getWindowOffset()\n        // this.scrollToBottom()\n        let utils = document.querySelector('.utils-container')\n        let grid = document.querySelector('.grid-container')\n        let utilsTop\n        setTimeout(function(){\n            that.setState({\n                utilsTop: utils.offsetHeight\n            })\n        },500)\n\n\n        setTimeout(function(){\n            // console.log(that.state.legs)\n            //--- COMMENT OUT\n            // that.state.stops.map((stop, i) => {\n            //         that.legStartEnd(stop.x, stop.y,'all')\n            //         that.colorGrid(stop.x, stop.y, 'all')\n            //\n            // })\n            // call these with the default driver on mount\n            //--- COMMENT OUT\n            that.addNewCursor()\n            that.updateDriverWithCoords({x:0, y:0}, 'manual' )\n            // that.updateCursorwithData(that.state.loadingDataArr[0])\n            // that.colorCompleted(that.state.loadingDataArr[0].activeLegID, \"coords\")\n\n            // that.pleted(that.state.driverCoords.y)\n            // console.log('state',that.state)\n        },100)\n\n\n\n        // call to set stops and truck\n        //--- COMMENT OUT\n\n        // this._setStopCoords('stop')\n        // Call our fetch function below once the component mounts\n        //--- COMMENT OUT\n\n        // this._callDriver()\n        // .then(res => {\n        //     // load into ar r. Can be looped over if mutlple drivers\n        //     this.setState({ loadingDataArr: [...this.state.loadingDataArr, res.driver] })\n        // })\n        // .catch(err => console.log(err));\n        //--- COMMENT OUT\n        // this._callStops()\n        // .then(res => {\n        //     // temp stops\n        //     this.setState({\n        //         stops:\n        //         [{\n        //             \"name\": \"A\",\n        //             \"x\": 10,\n        //             \"y\": 10\n        //             },\n        //             {\n        //             \"name\": \"B\",\n        //             \"x\": 20,\n        //             \"y\": 20\n        //             },\n        //             {\n        //             \"name\": \"C\",\n        //             \"x\": 18,\n        //             \"y\": 4\n        //\n        //         }],\n        //         stopsCopy: this.state.stops.slice()\n        //     })\n        //--- COMMENT OUT\n            // this.legConstructor(this.state.stops)\n\n\n        // })\n        // .catch(err => console.log(err));\n        // this.legConstructor(this.state.stops)\n\n        // this._callLegs()\n        // .then(res => {\n        //     this.setState({ legs: res.legs })\n        // })\n        // .catch(err => console.log(err))\n\n        // make array of coords to move icon\n        setTimeout(function(){\n            // start at first stop\n            // that.updateDriverWithCoords({\n            //     x: 0,\n            //     y: 0,\n            // }, \"checkbox\")\n            //--- COMMENT OUT\n            // start from map beginng\n            // that.addStartStop()\n            // make slider coords\n            //--- COMMENT OUT\n\n        //     that.state.stopsCopy.map((stop, index) => {\n        //         if(!that.state.stopsCopy[index + 1]) return\n        //         let { xSlideCoord, ySlideCoord } = that.slideRange(stop, that.state.stopsCopy[index + 1])\n        //         console.log(xSlideCoord, ySlideCoord)\n        //         that.sliderCoordsCalc(xSlideCoord, ySlideCoord, \"stop-coords\")\n        //     })\n        },500)\n        function addElemClass(){\n            // add class to slider button so can select it later\n            let sliderButton = document.querySelector(\"[type=button]\")\n            if(that.hasParentClass(sliderButton, \"slider\")){\n                sliderButton.classList.add(\"slider-button\")\n            }\n        }\n        // addElemClass()\n\n    }\n\n    // takes two ranges and combines the arrays\n    // calcs where smaller axis points coords should be placed with larger\n    // makes arr of arrs of all slider coords to follow\n    sliderCoordsCalc(xSlideCoord, ySlideCoord, type){\n        let storeArr = []\n        let currentLong\n        let previousLong\n        let currentSmall\n        let previousSmall\n        // console.log('COORDS', xSlideCoord, ySlideCoord)\n\n\n\n        // console.log('C',this.state.currentXSlideCoord)\n        // console.log('P', this.state.previousXSlideCoord)\n        let xArr = xSlideCoord\n        let yArr = ySlideCoord\n\n        // console.log(xArr)\n        // console.log(yArr)\n        let longerArr\n        let shorterArr\n        if(xArr.length >= yArr.length){\n            longerArr = xArr\n            shorterArr = yArr\n        } else {\n            longerArr = yArr\n            shorterArr = xArr\n        }\n        // store last values of arrs\n        let lastXarr = xArr[xArr.length -1]\n        let lastYarr = yArr[yArr.length -1]\n        if(xArr.length){\n            this.setState({ lastXarr })\n        }\n        if(yArr.length){\n            this.setState({ lastYarr })\n\n        }\n\n        // console.log('short',shorterArr)\n        // console.log('long',longerArr)\n        let obj\n        // j runs on all small loop\n        let j = 0\n\n        for (var i = 0; i < longerArr.length; i++) {\n\n                // Vals to use while function runs\n                // if there and not equal to last, reassign\n                if(shorterArr[i] && shorterArr[i] !== currentSmall){\n                    currentSmall = shorterArr[i]\n                } else {\n                    // if not there, use the value in state\n                    if(!currentSmall){\n                        previousSmall = this.state.previousSmall\n                    } else {\n                        // if there but the same, use the one stored in current and save to state\n                        previousSmall = currentSmall\n                        this.setState({previousSmall: previousSmall})\n                    }\n                }\n            if(j < shorterArr.length){\n                // loop through both until shorter runs out\n                    obj = {\n                        [Object.keys(longerArr[i])[0]]: Object.values(longerArr[i])[0],\n                        [Object.keys(shorterArr[i])[0]]: Object.values(shorterArr[i])[0]\n                    }\n            // increase inner loop\n                j++\n            } else {\n                // inside loop already use val stored within the function\n                if(i > 0){\n                    obj = {\n                        [Object.keys(longerArr[i])[0]]: Object.values(longerArr[i])[0],\n                        [Object.keys(previousSmall)[0]]: Object.values(previousSmall)[0],\n                    }\n                    // begginning of loop - get value from state and set it on first loop run\n                } else {\n                    // if long x, get last y\n                    if(Object.keys(longerArr[i])[0] === 'x'){\n                        previousSmall = this.state.lastYarr\n                        this.setState({previousSmall})\n                    } else {\n                        // if long y, get last x\n                        previousSmall = this.state.lastXarr\n                        this.setState({previousSmall})\n                    }\n                    // console.log('first Run', this.state.previousSmall)\n                    obj = {\n                        [Object.keys(longerArr[i])[0]]: Object.values(longerArr[i])[0],\n                        [Object.keys(previousSmall)[0]]: Object.values(previousSmall)[0],\n                    }\n                }\n            }\n            storeArr.push(obj)\n\n            // console.log(' obj', obj)\n        }\n        // console.log('stops1',this.state.stopsCopy[0])\n        // console.log('stops2',this.state.stopsCopy[1])\n        // console.log('store',storeArr)\n\n            this.setState({\n                sliderCoordsArrs: [...this.state.sliderCoordsArrs, storeArr]\n            })\n\n    }\n\n    // creates two rangeArr each x/y  start - stop\n    // this sets state for sliderCalcs\n    slideRange(startObj, endObj){\n        if(!startObj || !endObj) return\n        // console.log(startObj)\n        let yArr = []\n        let xArr = []\n        let x1 = startObj.x\n        let x2 = endObj.x\n        let y1 = startObj.y\n        let y2 = endObj.y\n        let { xToMove, yToMove } = this._numBetweenStops(startObj, endObj)\n        // console.log(\"x\", xToMove)\n        // console.log(\"y\", yToMove)\n        // find if pos of neg\n        let xIsInteger = (xToMove < 0 ? false : true)\n        let yIsInteger = (yToMove < 0 ? false : true)\n        // make arr of x/y stops\n            for (var i = 0; i < Math.abs(yToMove); i++) {\n                if(yIsInteger){\n                    let obj = {y: y1 + (i + 1)}\n                    yArr.push(obj)\n                } else {\n                    let obj = {y: y1 - (i + 1)}\n                    yArr.push(obj)\n                }\n            }\n            for (var i = 0; i < Math.abs(xToMove); i++) {\n                if(xIsInteger){\n                    let obj = {x: x1 + (i + 1)}\n                    xArr.push(obj)\n                } else {\n                    let obj = {x: y1 - (i + 1)}\n                    xArr.push(obj)\n                }\n            }\n        // console.log(xArr)\n        // console.log(yArr)\n        // push to state\n        return {\n            xSlideCoord: xArr,\n            ySlideCoord: yArr\n        }\n    }\n    _numBetweenStops(stop1, stop2){\n        let x1 = stop1.x\n        let x2 = stop2.x\n        let y1 = stop1.y\n        let y2 = stop2.y\n        // console.log(y1)\n        // console.log(y2)\n        let xToMove\n        let yToMove\n        if(x1 > x2){\n            xToMove = x1 - x2\n            xToMove = -Math.abs(xToMove)\n        } else {\n            xToMove = x2 - x1\n        }\n\n        if(y1 > y2){\n            yToMove = y1 - y2\n            yToMove = -Math.abs(yToMove)\n        } else {\n            yToMove = y2 - y1\n        }\n        return {xToMove, yToMove}\n\n    }\n    handleSubmit(event) {\n        // console.log(event.target)\n        event.preventDefault();\n        // console.log(this.state.cursorIndex)\n        let that = this\n        function validGraphSides(input){\n            if(input.x !== input.y){\n                console.error(\"X and Y must be equal\")\n                alert(\"X and Y values must be equal\")\n                return false\n            }\n            return true\n        }\n        // on submit use the stored sizes\n        if(event.target.name === 'graph-size'){\n            // console.log('store', this.state.storeGraphSize)\n            if(!validGraphSides(this.state.storeGraphSize)) return\n            this.setState({\n                setGraphSize: this.state.storeGraphSize\n            })\n            setTimeout(function(){\n                console.log(that.state.setGraphSize)\n                that.createGraph()\n                return\n            },100)\n        }\n        let currentCursor = this.state.cursorArr[this.state.cursorIndex]\n                // update coords\n                //set driver to those\n            //UPDATE STATE DATA\n            if(event.target.name === 'driver-dropdown' || event.target.name === 'color'){\n                this.onDropdownSubmit(event)\n\n            } else if(event.target.name === 'driver-form') {\n                let formData = {}\n                // set to new input. If blank use the previous one\n                if(this.state.cursorFormX){\n                    formData['x'] = parseInt(this.state.cursorFormX)\n                } else {\n                    formData['x'] = currentCursor.driverCoords.x\n                }\n                if(this.state.cursorFormY){\n                    formData['y'] = parseInt(this.state.cursorFormY)\n                } else {\n                    formData['y'] = currentCursor.driverCoords.y\n                }\n                console.log(currentCursor)\n                    currentCursor.driverCoords = formData\n                console.log(this.state.cursorArr)\n                this.setState({\n                    driverCoords: formData\n                })\n            //ACTUALLY MOVE CURSOR\n            this.updateDriverWithCoords(\"\", \"form\")\n            let that = this\n            setTimeout(function(){\n                //UPDATE DRIVER DATA\n                // returns false if not a stop\n                let result = that.updateDriverData()\n                if(!result){\n                    // not part of route\n                    that.toggleSnackbar()\n                    return\n                }\n                that.colorCompleted(that.state.selectedDriver.activeLegID)\n                console.log(that.state.selectedDriver.activeLegID)\n                console.log(that.state)\n            },100)\n        } else if(event.target.classList && event.target.classList.contains(\"modal-submit\")){\n            this.handlePlotLoading('manual')\n        } else if(event.target.classList && event.target.classList.contains(\"auto-plot-submit\")){\n            this.handlePlotLoading('auto')\n        }\n    }\n    handlePlotLoading(type){\n        let that = this\n        if(type === \"manual\"){\n            console.log('MANUAL')\n            let json = utils._makePlotJson(this.state.plotObjs)\n            this.setState({stops: json})\n            this._setStopCoords('stop')\n            setTimeout(function(){\n                that.legConstructor(that.state.stops)\n                // console.log(that.state.startingCellNumAll)\n                that.state.stops.map((stop, i) => {\n\n                    that.legStartEnd(stop.x, stop.y,'all')\n                    that.colorGrid(stop.x, stop.y, 'all')\n\n                })\n\n            })\n\n        } else if(type === \"auto\"){\n            this._callStops()\n            .then(res => {\n                this.setState({\n                    stops: res.stops,\n                    stopsCopy: res.stops,\n                    // set auto 100\n                    setGraphSize: {\"x\":\"100\", \"y\": \"100\"},\n                    plotObjs: res.stops\n                })\n                console.log('call graph')\n                this.createGraph()\n                this._setStopCoords('stop')\n                setTimeout(function(){\n                    // console.log(that.state.startingCellNumAll)\n                    that.legConstructor(that.state.stops)\n                    that.state.stops.map((stop, i) => {\n                        that.legStartEnd(stop.x, stop.y,'all')\n                        that.colorGrid(stop.x, stop.y, 'all')\n\n                    })\n\n                })\n            })\n        }\n    }\n\n\n    _legIndex(input){\n        // console.log('i', input)\n        let index\n        switch(input){\n            // pre-stop\n            case 'ZZ':\n                index = 0\n                break\n            case 'AB':\n                index = 1\n                break\n            case 'BC':\n                index = 2\n                break\n            case 'CD':\n                index = 3\n                break\n            case 'DE':\n                index = 4\n                break\n            case 'EF':\n                index = 5\n                break\n            case 'FG':\n                index = 6\n                break\n            case 'GH':\n                index = 7\n                break\n            case 'HI':\n                index = 8\n                break\n            case 'IJ':\n                index = 9\n                break\n            case 'JK':\n                index = 10\n                break\n            case 'KL':\n                index = 11\n                break\n            default:\n                console.error('Nothing in switch')\n                break\n        }\n        return index\n    }\n    colorLeg(input){\n        console.log(this.state.finalLegColorObj)\n        let that = this\n        // - get val from Dropdown-\n        // change it to an index\n\n        let index = this._legIndex(input)\n        console.log('i', index)\n        // get leg using index out of array\n        let leg = this.state.holdAllLegColorArrs[index]\n        console.log('leg', this.state.holdAllLegColorArrs)\n        // set state on child to change the color\n        let legObj = {leg, index}\n        console.log(legObj)\n        this.setState({\n            finalLegColorObj: legObj,\n            legColorsCounter: this.state.legColorsCounter + 1,\n            colorType: \"leg\"\n        })\n    }\n    // build legs out of stops\n    legConstructor(stops){\n        let legs = stops.map((stop, i) => {\n            // console.log(stop)\n            if(!stops[i + 1]) return\n            return {\n                \"startStop\": stop.name,\n                \"endStop\": stops[i + 1].name,\n                \"legID\": `${stop.name}${stops[i + 1].name}`\n\n            }\n        }).filter(stop => stop)\n        this.setState({\n            legs: legs\n        })\n        // console.log(this.state.legs)\n    }\n\n    // set coords in pxs of plots\n    _setStopCoords(type,x,y){\n        let that = this\n        let coordsArr = []\n\n            // filter out undefined\n            if(type === 'stop'){\n                setTimeout(function(){\n                if(that.state.stops.length > 0){\n                    that.state.stops.forEach(stop => {\n                        // console.log(stop.x, stop.y)\n                        let pixels = utils._convertToPixels(\n                            stop.x, stop.y\n                        )\n                        let coords = {\n                            pixels: pixels,\n                            directions: {\n                                xDir: \"left\",\n                                yDir: \"bottom\"\n                            }\n                        }\n\n                        coordsArr.push(coords)\n                    })\n                }\n                that.setState({\n                    stopsDirsArr: coordsArr\n                })\n            },1050)\n            } else if(type === 'driver'){\n                let pixels = utils._convertToPixels(\n                    x, y\n                )\n                let coords = {\n                    pixels: pixels,\n                    directions: {\n                        xDir: \"left\",\n                        yDir: \"bottom\"\n                    }\n                }\n                // console.log(coords)\n                return coords\n\n            }\n\n\n    }\n\n    _callLegs = async () => {\n        const response = await fetch('/legs');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body\n    }\n    _callStops = async () => {\n        const response = await fetch('/stops');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body\n    }\n    _callDriver = async () => {\n        const response = await fetch('/driver');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n\n            throw Error(body.message)\n        }\n        return body\n    }\n}\n\nexport default Grid\n","import React, {\n\tComponent\n} from \"react\";\nimport \"./App.css\";\nimport Grid from './components/Grid'\n\nclass App extends Component {\n\n        render() {\n\n        \treturn(<Grid  /> )\n        }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}